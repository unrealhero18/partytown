/*! For license information please see hls_video.js.LICENSE.txt */
(() => {
  var __webpack_modules__ = {
      15: (t) => {
        t.exports = function () {
          var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 'app';
          return ''.concat(t, '.').concat('wistia.com');
        };
      },
      324: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { default: () => i });
        var n = r(1);
        null == n.default.engines && (n.default.engines = {});
        const i = function (t, e) {
          n.default.engines[t] = e;
        };
      },
      346: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { setup: () => h, teardown: () => v });
        var n = r(347),
          i = r.n(n),
          a = r(1),
          s = a.default.lib('utilities/cacheable'),
          o = s.makeCacheable,
          l = s.uncacheNamespace,
          u = s.makeNamespace,
          c = a.default.lib('utilities/legacyLocalstorage').setOrGet,
          d = o('bandwidth_tracking'),
          f = u('bandwidth_tracking'),
          h = function (t) {
            var e = t.hls,
              r = d(t, 'persistBandwidthEstimate', function () {
                return function () {
                  var t = e.abrController.getEstimate
                    ? e.abrController.getEstimate()
                    : e.abrController.bwEstimator.getEstimate();
                  c('hls.bandwidth_estimate', t);
                };
              });
            e.off(i().Events.FRAG_LOADED, r), e.on(i().Events.FRAG_LOADED, r);
          },
          v = function (t) {
            f(t).persistBandwidthEstimate &&
              t.hls &&
              t.hls.off(i().Events.FRAG_LOADED, f(t).persistBandwidthEstimate),
              l('bandwidth_tracking', t);
          };
      },
      358: (t, e, r) => {
        'use strict';
        function n(t, e) {
          for (var r, n = 0; n < e.length; n++)
            ((r = e[n]).enumerable = r.enumerable || !1),
              (r.configurable = !0),
              'value' in r && (r.writable = !0),
              Object.defineProperty(t, r.key, r);
        }
        r.r(e), r.d(e, { default: () => i });
        const i = (function () {
          function t() {
            !(function (t, e) {
              if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
            })(this, t);
          }
          return (
            (e = t),
            (i = [
              {
                key: 'isBuffered',
                value: function (e, r) {
                  try {
                    if (e)
                      for (var n = t.getBuffered(e), i = 0; i < n.length; i++)
                        if (r >= n.start(i) && r <= n.end(i)) return !0;
                  } catch (t) {}
                  return !1;
                },
              },
              {
                key: 'bufferInfo',
                value: function (e, r, n) {
                  try {
                    if (e) {
                      var i,
                        a = t.getBuffered(e),
                        s = [];
                      for (i = 0; i < a.length; i++) s.push({ start: a.start(i), end: a.end(i) });
                      return this.bufferedInfo(s, r, n);
                    }
                  } catch (t) {}
                  return { len: 0, start: r, end: r, nextStart: void 0 };
                },
              },
              {
                key: 'bufferedInfo',
                value: function (t, e, r) {
                  t.sort(function (t, e) {
                    var r = t.start - e.start;
                    return r || e.end - t.end;
                  });
                  var n = [];
                  if (r)
                    for (var i, a = 0; a < t.length; a++)
                      if ((i = n.length)) {
                        var s = n[i - 1].end;
                        t[a].start - s < r
                          ? t[a].end > s && (n[i - 1].end = t[a].end)
                          : n.push(t[a]);
                      } else n.push(t[a]);
                  else n = t;
                  for (var o, l = 0, u = e, c = e, d = 0; d < n.length; d++) {
                    var f = n[d].start,
                      h = n[d].end;
                    if (e + r >= f && e < h) (u = f), (l = (c = h) - e);
                    else if (e + r < f) {
                      o = f;
                      break;
                    }
                  }
                  return { len: l, start: u || 0, end: c || 0, nextStart: o };
                },
              },
              {
                key: 'getBuffered',
                value: function (t) {
                  try {
                    return t.buffered;
                  } catch (t) {
                    return {
                      length: 0,
                      start: function () {
                        return 0;
                      },
                      end: function () {
                        return 0;
                      },
                    };
                  }
                },
              },
              {
                key: 'lastBufferedTime',
                value: function (t, e) {
                  return t ? this.bufferInfo(t, t.currentTime || 0, e).end : 0;
                },
              },
              {
                key: 'timeBeforeEndOfBuffer',
                value: function (t, e) {
                  var r = (t && t.currentTime) || 0;
                  return this.lastBufferedTime(t, e) - r;
                },
              },
            ]),
            (r = null) && n(e.prototype, r),
            i && n(e, i),
            t
          );
          var e, r, i;
        })();
      },
      357: (t, e, r) => {
        'use strict';
        function n(t, e) {
          if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
        }
        function i(t, e) {
          for (var r, n = 0; n < e.length; n++)
            ((r = e[n]).enumerable = r.enumerable || !1),
              (r.configurable = !0),
              'value' in r && (r.writable = !0),
              Object.defineProperty(t, r.key, r);
        }
        r.r(e), r.d(e, { default: () => a });
        const a = (function () {
          function t(e) {
            var r = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0,
              i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
            n(this, t),
              (this.halfLife = e),
              (this.alpha_ = e ? Math.exp(Math.log(0.5) / e) : 0),
              (this.estimate_ = r),
              (this.totalWeight_ = i);
          }
          return (
            (e = t),
            (r = [
              {
                key: 'sample',
                value: function (t, e) {
                  var r = Math.pow(this.alpha_, t);
                  (this.estimate_ = e * (1 - r) + r * this.estimate_), (this.totalWeight_ += t);
                },
              },
              {
                key: 'getTotalWeight',
                value: function () {
                  return this.totalWeight_;
                },
              },
              {
                key: 'getEstimate',
                value: function () {
                  if (this.alpha_) {
                    var t = 1 - Math.pow(this.alpha_, this.totalWeight_);
                    if (t) return this.estimate_ / t;
                  }
                  return this.estimate_;
                },
              },
            ]) && i(e.prototype, r),
            a && i(e, a),
            t
          );
          var e, r, a;
        })();
      },
      354: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { default: () => h });
        var n = r(347),
          i = r.n(n);
        function a(t, e) {
          for (var r, n = 0; n < e.length; n++)
            ((r = e[n]).enumerable = r.enumerable || !1),
              (r.configurable = !0),
              'value' in r && (r.writable = !0),
              Object.defineProperty(t, r.key, r);
        }
        function s(t, e, r) {
          return (s =
            'undefined' != typeof Reflect && Reflect.get
              ? Reflect.get
              : function (t, e, r) {
                  var n = (function (t, e) {
                    for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = c(t)); );
                    return t;
                  })(t, e);
                  if (n) {
                    var i = Object.getOwnPropertyDescriptor(n, e);
                    return i.get ? i.get.call(r) : i.value;
                  }
                })(t, e, r || t);
        }
        function o(t, e) {
          return (o =
            Object.setPrototypeOf ||
            function (t, e) {
              return (t.__proto__ = e), t;
            })(t, e);
        }
        function l(t) {
          var e = (function () {
            if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ('function' == typeof Proxy) return !0;
            try {
              return (
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0
              );
            } catch (t) {
              return !1;
            }
          })();
          return function () {
            var r,
              n = c(t);
            if (e) {
              var i = c(this).constructor;
              r = Reflect.construct(n, arguments, i);
            } else r = n.apply(this, arguments);
            return u(this, r);
          };
        }
        function u(t, e) {
          return !e || ('object' != typeof e && 'function' != typeof e)
            ? (function (t) {
                if (void 0 === t)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called"
                  );
                return t;
              })(t)
            : e;
        }
        function c(t) {
          return (c = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function (t) {
                return t.__proto__ || Object.getPrototypeOf(t);
              })(t);
        }
        var d = r(1).default.lib('utilities/core').base64Decode,
          f = 'data:application/x-mpegURL;base64,';
        const h = (function (t) {
          function e(t) {
            var r;
            return (
              (function (t, e) {
                if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
              })(this, e),
              ((r = u.call(this, t)).log = t.debug),
              t && t.getFragFromCache && (r.getFragFromCache = t.getFragFromCache),
              t && t.getM3u8FromCache && (r.getM3u8FromCache = t.getM3u8FromCache),
              t &&
                t.callbackOnFragmentProgress &&
                (r.callbackOnFragmentProgress = t.callbackOnFragmentProgress),
              r
            );
          }
          !(function (t, e) {
            if ('function' != typeof e && null !== e)
              throw new TypeError('Super expression must either be null or a function');
            (t.prototype = Object.create(e && e.prototype, {
              constructor: { value: t, writable: !0, configurable: !0 },
            })),
              e && o(t, e);
          })(e, t);
          var r,
            n,
            i,
            u = l(e);
          return (
            (r = e),
            (n = [
              {
                key: 'load',
                value: function (t, r, n) {
                  if ('manifest' === t.type && t.url && 0 === t.url.indexOf(f)) {
                    var i = t.url.replace(f, ''),
                      a = d(i);
                    setTimeout(function () {
                      var e = { url: t.url, data: a };
                      n.onSuccess(
                        e,
                        {
                          aborted: !1,
                          loaded: 0,
                          total: 0,
                          chunkCount: 0,
                          bwEstimate: 0,
                          loading: { start: 0, end: 0, first: 0 },
                          parsing: { start: 0, end: 0 },
                          buffering: { start: 0, end: 0, first: 0 },
                          retry: 0,
                        },
                        t
                      );
                    }, 0);
                  } else {
                    if ('level' === t.type) {
                      if (this.getM3u8FromCache) {
                        var o = this.getM3u8FromCache(t.url);
                        if (o) {
                          var l = o.event,
                            u = o.stats;
                          return void setTimeout(function () {
                            n.onSuccess(l, u, t);
                          }, 0);
                        }
                      }
                      var h = n.onSuccess;
                      return (
                        (n.onSuccess = function (t, e, r) {
                          h && h(t, e, r);
                        }),
                        void s(c(e.prototype), 'load', this).call(this, t, r, n)
                      );
                    }
                    if (null == t.type) {
                      var v = this.getFragFromCache(t.url, t.rangeStart, t.rangeEnd);
                      if (v) {
                        var g = v.event,
                          p = v.stats;
                        return void setTimeout(function () {
                          n.onProgress(p, t, g.data), n.onSuccess(g, p, t);
                        }, 0);
                      }
                    }
                    s(c(e.prototype), 'load', this).call(this, t, r, n);
                  }
                },
              },
            ]) && a(r.prototype, n),
            i && a(r, i),
            e
          );
        })(i().DefaultConfig.loader);
      },
      348: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { setup: () => v, teardown: () => p });
        var n = r(347),
          i = r.n(n),
          a = r(1),
          s = r(349),
          o = a.default.lib('utilities/wlog').wlog.getPrefixedFunctions('hls_video'),
          l = a.default.lib('utilities/cacheable'),
          u = l.makeCacheable,
          c = l.uncacheNamespace,
          d = l.makeNamespace,
          f = u('dynamic_max_max_buffer'),
          h = d('dynamic_max_max_buffer'),
          v = function (t) {
            var e = t.hls,
              r = f(t, 'onFragLoaded', function () {
                return function () {
                  g(t);
                };
              });
            e.off(i().Events.FRAG_LOADED, r), e.on(i().Events.FRAG_LOADED, r);
          },
          g = function (t) {
            var e = t.hls;
            t.attributes.maxMaxBufferLength &&
              (e.config.maxMaxBufferLength = t.attributes.maxMaxBufferLength);
            var r = (0, s.levelToAsset)(t, e.currentLevel);
            r &&
              r.metadata &&
              e.abrController.getEstimate() * e.config.abrBandWidthFactor <
                8 * r.metadata.max_bitrate &&
              (0 <= e.manualLevel || 0 === e.currentLevel
                ? (o.info('set maxMaxBufferLength', t.getDuration()),
                  (e.config.maxMaxBufferLength = t.getDuration()))
                : (o.info('set maxMaxBufferLength', 60), (e.config.maxMaxBufferLength = 60)));
          },
          p = function (t) {
            h(t).onFragLoaded && t.hls && t.hls.off(i().Events.FRAG_LOADED, h(t).onFragLoaded),
              c('dynamic_max_max_buffer', t);
          };
      },
      351: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { setup: () => m, teardown: () => R });
        var n = r(347),
          i = r.n(n),
          a = r(1).default,
          s = a.lib('player/lib/timeout-utils').doTimeout,
          o = a.lib('utilities/obj'),
          l = a.lib('utilities/wlog').wlog,
          u = a.lib('utilities/metrics'),
          c = a.lib('utilities/cacheable'),
          d = c.makeCacheable,
          f = c.uncacheNamespace,
          h = c.makeNamespace,
          v = d('error_handling'),
          g = h('error_handling'),
          p = l.getPrefixedFunctions('hls error_handling'),
          m = function (t) {
            var e = v(t, 'onError', function () {
              return function (e, r) {
                y(t, e, r);
              };
            });
            t.hls.on(i().Events.ERROR, e);
            var r = v(t, 'onEmergencyAbortLoad', function () {
              return function () {
                A(t);
              };
            });
            t.hls.on(i().Events.FRAG_LOAD_EMERGENCY_ABORTED, r);
          },
          y = function (t, e, r) {
            r.fatal ? b(t, e, r) : E(t, e, r);
          },
          b = function (t, e, r) {
            var n,
              a,
              o = t.hls,
              u = t.attributes;
            switch (r.type) {
              case i().ErrorTypes.NETWORK_ERROR:
                l.info('hlsjsplugin - Fatal network error encountered, try to recover'),
                  o.startLoad(),
                  A(t);
                break;
              case i().ErrorTypes.MEDIA_ERROR:
                l.info('hlsjsplugin - Fatal media error encountered, try to recover'),
                  g(t).countedRecoverMediaError ||
                    ((g(t).countedRecoverMediaError = !0), S(t, 'player/hls/recover_media_error')),
                  t.isChangingVideo() || 'bufferStalledError' !== r.details || o.startLoad(),
                  p.error('trying to recover from media error...'),
                  (n = t.getCurrentTime()),
                  o.recoverMediaError(),
                  (a = null == u.bufferStallRecoveryTimeout ? 1e3 : u.bufferStallRecoveryTimeout),
                  s(
                    ''.concat(t.uuid, '.nudge_if_not_playing'),
                    function () {
                      'playing' === t.getPlaybackMode()
                        ? t.getCurrentTime() !== n &&
                          p.error('video is playing; recoverMediaError() succeeded')
                        : (p.error('trying to nudge 0.5 seconds...'),
                          t.seek(t.getCurrentTime() + 0.5).then(function () {
                            t.play();
                          }));
                    },
                    a
                  );
                break;
              default:
                S(t, 'player/hls/fatal', 1, { at: t.getCurrentTime(), data: r }),
                  l.info('hlsjsplugin - Fatal error - cannot recover', e, r),
                  o.destroy();
            }
          },
          E = function (t, e, r) {
            l.info('hlsjsplugin - Non fatal error encountered', r),
              'bufferSeekOverHole' === r.details
                ? L(t, 'player/hls/buffer_seek_over_hole', { hole: r.hole })
                : 'bufferStalledError' === r.details
                ? 0 < t.getCurrentTime() && L(t, 'player/hls/buffer_stalled')
                : 'internalException' === r.details
                ? L(t, 'player/hls/non-fatal/'.concat(r.details), { errorDetails: r })
                : L(t, 'player/hls/non-fatal/'.concat(r.details));
          },
          T = [100, 500, 1500, 3e3, 6e3],
          A = function (t) {
            for (
              var e,
                r = function () {
                  var e = t.hls;
                  e && e.startLoad();
                },
                n = 0;
              n < T.length;
              n++
            )
              (e = T[n]), s(''.concat(t.uuid, '.hls.start_load_on_stall_').concat(e), r, e);
          },
          S = function (t, e, r) {
            (r = w(t, o.merge({ at: t.getCurrentTime() }, r))), u.count(e, 1, r), k(t, e);
          },
          L = function (t, e, r) {
            _(t, e) || S(t, e, r);
          },
          _ = function (t, e) {
            return D(t), !0 === g(t).metricsCounted[e];
          },
          k = function (t, e) {
            D(t), (g(t).metricsCounted[e] = !0);
          },
          D = function (t) {
            null == g(t).metricsCounted && (g(t).metricsCounted = {});
          },
          w = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
              r = { hlsVideo: t.diagnosticData() };
            return (
              (r.locationHref = location.href),
              top !== self && ((r.referrer = document.referrer), (r.inIframe = !0)),
              o.merge(r, e)
            );
          },
          R = function (t) {
            g(t).onError && t.hls && t.hls.off(i().Events.ERROR, g(t).onError),
              g(t).onEmergencyAbortLoad &&
                t.hls &&
                t.hls.off(i().Events.ERROR, g(t).onEmergencyAbortLoad),
              f('error_handling', t);
          };
      },
      350: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            adaptiveAssetUrl: () => d,
            adaptiveAsset: () => f,
            allHlsAssets: () => h,
            allHlsAudioAssets: () => v,
            allMp4VideoAssets: () => g,
            audioTracksForVideo: () => p,
            anyViableAsset: () => m,
            bestAssetForCurrentSize: () => y,
            buildMasterM3u8Asset: () => b,
            filterByQualityAndMaxWidth: () => E,
            masterM3u8ContentFromAssets: () => A,
            masterM3u8DataUri: () => S,
            masterM3u8Url: () => L,
            maxAssetWidthBasedOnVideoWidth: () => _,
            filterAssetsForScreencast: () => k,
            mediumQualityStartingAsset: () => D,
            rejectAudioAsset: () => w,
          });
        var n = r(1),
          i = r(349),
          a = n.default.lib('player/lib/assets'),
          s = n.default.lib('utilities/obj'),
          o = n.default.lib('utilities/core').base64Encode,
          l = n.default.lib('player/lib/hosts'),
          u = l.eV1Protocol,
          c = l.eV1Host,
          d = function (t) {
            if (t.attributes.liveMedia) return t.mediaData.liveStreamEventDetails.manifestUrl;
            var e = g(t.mediaData.assets),
              r = (0, i.filteredHlsAssets)(t, e),
              n = v(t.allAssets);
            return S({ video: r, audio: n }, t.attributes);
          },
          f = function (t) {
            var e = d(t),
              r = b(e);
            return (r.display_name = 'Auto'), (r.slug = 'Auto'), r;
          },
          h = function (t) {
            return a
              .filter(t, {
                container: 'm3u8',
                segment_duration: 3,
                type: 'hls_video',
                status: a.READY,
                metadata: function (t) {
                  return Object(t).max_bitrate;
                },
              })
              .sort(function (t, e) {
                return (t.metadata.max_bitrate || 0) - (e.metadata.max_bitrate || 0);
              });
          },
          v = function (t) {
            return a.filter(t, { type: 'mp4_alternate_audio', status: a.READY });
          },
          g = function (t) {
            return a
              .filter(t, {
                container: 'mp4',
                status: a.READY,
                public: !0,
                metadata: function (t) {
                  return Object(t).max_bitrate;
                },
                type: /\b(?!captioned_video)\S+/,
              })
              .sort(function (t, e) {
                return (t.metadata.max_bitrate || 0) - (e.metadata.max_bitrate || 0);
              });
          },
          p = function (t) {
            var e = [
              {
                audioCodec: void 0,
                autoselect: !0,
                default: !0,
                forced: !1,
                groupId: 'audio',
                id: 0,
                lang: void 0,
                name: 'Off',
                label: 'Off',
                type: 'AUDIO',
                isSelected: !0,
              },
            ];
            return (
              t.forEach(function (t, r) {
                var n, i;
                e.push({
                  audioCodec: void 0,
                  autoselect: !1,
                  default: !1,
                  forced: !1,
                  groupId: 'audio',
                  id: r + 1,
                  lang: void 0,
                  name:
                    (null === (n = t.details) || void 0 === n ? void 0 : n.languageMetadata.name) ||
                    'Alt Audio',
                  label:
                    (null === (i = t.details) || void 0 === i ? void 0 : i.languageMetadata.name) ||
                    'Alt Audio',
                  type: 'AUDIO',
                  isSelected: !1,
                });
              }),
              e
            );
          },
          m = function (t, e) {
            return a.one(e, { sortBy: 'width asc' });
          },
          y = function (t, e) {
            var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
              n = E(t, e, r);
            return n[n.length - 1];
          },
          b = function (t) {
            return {
              bitrate: 'variable',
              ext: 'm3u8',
              height: 'variable',
              public: !0,
              size: 'variable',
              type: 'hls_video',
              url: t,
              width: 'variable',
              slug: 'hls_master_m3u8_seg3s',
            };
          },
          E = function (t, e) {
            var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
              n = t.attributes,
              i = n.qualityMin,
              s = n.qualityMax,
              o = a.withinQualityRange(e, i, s);
            0 === o.length && (o = a.nearestOutsideRange(e, i, s));
            var l = Math.min(r.maxWidth || 8192, _(n.width, n.devicePixelRatio)),
              u = a.filter(o, { width: [0, l] });
            return 0 === u.length ? [o[0]] : u;
          },
          T = function (t) {
            return t.map(function (t) {
              return '#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio",NAME="'
                .concat(
                  t.details.languageMetadata.name,
                  '",AUTOSELECT=NO, DEFAULT=NO, CHARACTERISTICS="public.accessibility.describes-video", URI="'
                )
                .concat(t.url, '"');
            });
          },
          A = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
              r = t.video,
              n = t.audio,
              i = [];
            e.startPosition &&
              i.push('#EXT-X-START:TIME-OFFSET='.concat(e.startPosition, ',PRECISE=YES')),
              i.push(
                '#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio",NAME="Original",AUTOSELECT=YES, DEFAULT=YES'
              ),
              (i = i.concat(T(v(n))));
            for (var a = 0; a < r.length; a++) {
              var s = r[a],
                o = 8 * s.metadata.max_bitrate;
              i.push(
                '#EXT-X-STREAM-INF:PROGRAM-ID=1,CLOSED-CAPTIONS=NONE,AUDIO="audio",BANDWIDTH='
                  .concat(o, ',NAME=')
                  .concat(s.display_name, '\n') + s.url
              );
            }
            return '#EXTM3U\n' + i.join('\n');
          },
          S = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
              r = A(t, e);
            return 'data:application/x-mpegURL;base64,'.concat(o(r));
          },
          L = function (t) {
            var e = !!(1 < arguments.length && void 0 !== arguments[1]) && arguments[1];
            return ''
              .concat(u(), '//')
              .concat(c(), '/embed/medias/')
              .concat(t, '.m3u8?segment_duration=3&exclude_audio=')
              .concat(!e);
          },
          _ = function (t) {
            var e =
                1 < arguments.length && void 0 !== arguments[1]
                  ? arguments[1]
                  : window.devicePixelRatio || 1,
              r = 1.2 * Math.max(1.25, e),
              n = t * r;
            return n;
          },
          k = function (t, e) {
            var r = s.filter(e, function (t) {
              return 640 < t.width;
            });
            return 0 < r.length ? r : e;
          },
          D = function (t, e) {
            return y(t, e, { maxWidth: 1279 });
          },
          w = function (t, e) {
            return s.filter(e, function (t) {
              return 'Audio' != t.display_name;
            });
          };
      },
      349: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            UNOBTAINABLE_BITRATE: () => y,
            arrayBufferToString: () => b,
            assetsSortedByWidth: () => E,
            assetToLevel: () => T,
            averageOrMaxBitrate: () => A,
            bestStartingAsset: () => S,
            bitrateForLevel: () => L,
            bitrateForMetadata: () => _,
            canSupportAsset: () => k,
            cautiousThreshold: () => D,
            determineBitrate: () => w,
            earlyOrMaxBitrate: () => R,
            filteredHlsAssets: () => C,
            hasAnyVeryLargeAssets: () => x,
            highestSupportedHlsAssetLevel: () => I,
            highestSupportedAsset: () => O,
            levelToAsset: () => P,
            isVeryLargeAsset: () => F,
            optimisticThreshold: () => M,
            safeAverageBitrate: () => B,
            startLoadOnce: () => N,
            startingAssetBasedOnBandwidthEstimate: () => U,
            stopLoad: () => j,
            teardown: () => G,
            weightedBwUpEstimate: () => H,
          });
        var n = r(350),
          i = r(1),
          a = r(106),
          s = i.default.lib('player/lib/assets'),
          o = s.one,
          l = s.isScreencast,
          u = i.default.lib('utilities/obj'),
          c = i.default.lib('player/lib/assets'),
          d = c.nearestOutsideRange,
          f = c.withinQualityRange,
          h = i.default.lib('utilities/cacheable'),
          v = h.uncacheNamespace,
          g = h.makeNamespace,
          p = g('asset_to_level'),
          m = g('level_to_asset'),
          y = 99999999999,
          b = function (t) {
            for (
              var e = new Uint8Array(t), r = e.length, n = '', i = Math.pow(2, 16) - 1, a = 0;
              a < r;
              a += i
            )
              a + i > r && (i = r - a),
                (n += String.fromCharCode.apply(null, e.subarray(a, a + i)));
            return n;
          },
          E = function (t, e) {
            return e.sort(function (t, e) {
              return t.width - e.width;
            });
          },
          T = function (t, e) {
            var r;
            if (null != (r = p(t)[e.url])) {
              return r;
            }
            if (!t.hls || !t.hls.levels) {
              return -1;
            }
            var n = u.filter(t.hls.levels, function (t) {
              return t.url[0] === e.url;
            })[0];
            var i = t.hls.levels.indexOf(n);
            return n && (p(t)[n.url[0]] = i), i;
          },
          A = function (t) {
            return null == t.average_bitrate ? t.max_bitrate : t.average_bitrate;
          },
          S = function (t, e, r) {
            if (
              t.attributes.videoQuality &&
              (0, a.parseLegacyVideoQualityWidth)(t.attributes.videoQuality, e)
            ) {
              var i = (0, a.parseLegacyVideoQualityWidth)(t.attributes.videoQuality, s),
                s = f(s, 100, i);
              if (0 < s.length) return s[s.length - 1];
            }
            return (
              U(t, e, r) ||
              n.bestAssetForCurrentSize(t, e, { maxWidth: 1280 }) ||
              n.mediumQualityStartingAsset(t, e) ||
              n.anyViableAsset(t, e)
            );
          },
          L = function (t, e) {
            var r = P(t, e);
            return r ? _(t, r.metadata) : y;
          },
          _ = function (t, e) {
            if (!e || !e.max_bitrate) return y;
            var r = 8 * e.max_bitrate,
              n = 8 * A(e),
              i = 8 * R(e),
              a = t.getPreload(),
              s = t.getCurrentTime(),
              o = t.timeBeforeEndOfBuffer(),
              l = t.getMediaElement() && t.getMediaElement().paused;
            if (s <= D(t) && i < n) return n;
            if (s <= D(t) && 'none' !== a) return 'auto' === a ? n : 0.5 * n + 0.5 * r;
            if (o <= D(t)) return r;
            if (!l && o <= M(t)) {
              var u = M(t) - D(t),
                c = (o - D(t)) / u;
              return c * n + (1 - c) * r;
            }
            return n;
          },
          k = function (t, e) {
            return e && e.metadata && H(t) > 8 * e.metadata.max_bitrate;
          },
          D = function () {
            return 6;
          },
          w = function (t, e, r) {
            if (t.hls) {
              var n = null,
                i = u.getDeep(t.hls.levels, [r, 'details', 'fragments']);
              if (i) n = (8 * i[i.length - 1].byteRangeEndOffset) / t.getDuration() / 1024;
              return n;
            }
          },
          R = function (t) {
            return null == t.early_max_bitrate ? t.max_bitrate : t.early_max_bitrate;
          },
          C = function (t, e) {
            var r = e;
            l(t.allAssets) && (r = n.filterAssetsForScreencast(t, r)),
              0 < t.attributes.qualityMin && (r = n.rejectAudioAsset(t, r));
            var i = t.attributes,
              a = i.qualityMin,
              s = i.qualityMax,
              o = f(r, a, s);
            return (r = 0 < o.length ? o : d(r, a, s));
          },
          x = function (t) {
            return (
              0 <
              t.allAssets.filter(function (e) {
                return F(t, e);
              }).lenth
            );
          },
          I = function (t) {
            return T(t, O(t, t.filteredVideoAssets()));
          },
          O = function (t, e) {
            return (
              E(t, e)
                .filter(function (e) {
                  return k(t, e);
                })
                .pop() || e[0]
            );
          },
          P = function (t, e) {
            var r;
            if (null != (r = m(t)[e])) return r;
            var n = u.getDeep(t.hls.levels, [e, 'url', 0]),
              i = o(t.allAssets, { url: n });
            return i && (i.bitrate = w(i, e)), (m(t)[e] = i), i;
          },
          F = function (t, e) {
            var r = B(e);
            if (r && r < y && 1610612736 < r * t.getDuration()) return !0;
            return !1;
          },
          M = function () {
            return 16;
          },
          B = function (t) {
            return t && t.metadata
              ? t.metadata.real_average_bitrate || t.metadata.average_bitrate
              : null;
          },
          N = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : -1;
            if (!t.attributes.calledStartLoad) {
              t.onReady().then(function () {
                t.hls.startLoad(e);
              });
            }

            t.setAttributes({ calledStartLoad: !0 });
          },
          U = function (t, e) {
            var r =
              2 < arguments.length && void 0 !== arguments[2]
                ? arguments[2]
                : t.attributes.bwEstimateOnInit;
            if (!r) return null;
            var i = n.filterByQualityAndMaxWidth(t, e);
            return o(i, {
              metadata: function (e) {
                if (!e) return !1;
                var n = _(t, e);
                return n < y && n < r * t.abrBandWidthUpFactor();
              },
              sortFn: function (t, e) {
                return e.metadata.max_bitrate - t.metadata.max_bitrate;
              },
            });
          },
          j = function (t) {
            t.hls.stopLoad(), t.setAttributes({ calledStartLoad: !1 });
          },
          G = function (t) {
            v('level_to_asset', t), v('asset_to_level', t);
          },
          H = function (t) {
            return t.hls.abrController.getEstimate() * t.abrBandWidthUpFactor();
          };
      },
      345: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { default: () => F });
        var n = r(346),
          i = r(348),
          a = r(351),
          s = r(350),
          o = r(352),
          l = r(353),
          u = r(355),
          c = r(356),
          d = r.n(c),
          f = r(354),
          h = r(347),
          v = r.n(h),
          g = r(325),
          p = r(1),
          m = r(32),
          y = r(324),
          b = r(334),
          E = r(349),
          T = r(106);
        function A(t, e) {
          if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
        }
        function S(t, e) {
          for (var r, n = 0; n < e.length; n++)
            ((r = e[n]).enumerable = r.enumerable || !1),
              (r.configurable = !0),
              'value' in r && (r.writable = !0),
              Object.defineProperty(t, r.key, r);
        }
        var L = (0, r(20).cachedDetect)(),
          _ = p.default.lib('player/lib/assets'),
          k = p.default.lib('utilities/obj'),
          D = p.default.lib('promiscuous'),
          w = g.default.delegatePublicMethods,
          R = p.default.lib('utilities/wlog').wlog,
          C = R.getPrefixedFunctions('hls_video'),
          x = p.default.lib('utilities/seqid').seqId,
          I = p.default.lib('player/lib/media-data-transforms').convertMp4sToM3u8s,
          O = p.default.lib('utilities/legacyLocalstorage').setOrGet,
          P = (function () {
            function t(e, r) {
              var n = this,
                i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
                a = 3 < arguments.length ? arguments[3] : void 0;
              A(this, t),
                (this.uuid = x('wistia_hls_video_')),
                (this.root = e),
                (this.mediaData = this.prepareMp4sForHlsRepackaging(r)),
                (this.allAssets = this.mediaData.assets),
                (this.attributes = k.assign(this.defaultAttributes(), i)),
                (this._startPosition = this.attributes.startPosition || -1),
                (this.state = {}),
                this.setupProperties(),
                (this.simpleVideo = new g.default(this.root, this.mediaData, this.attributes, a)),
                this.setAttributes({
                  bwEstimateOnInit: O('hls.bandwidth_estimate') || this.attributes.bwEstimateOnInit,
                }),
                (this.bitrateForLevel = function (t) {
                  return (0, E.bitrateForLevel)(n, t);
                }),
                (this.getM3u8FromCache = function (t) {
                  if (n.preloading && n.preloading.m3u8Cache[t]) {
                    var e = n.preloading.m3u8Cache[t];
                    return { event: e.event, stats: e.stats };
                  }
                  return null;
                }),
                (this.popFragFromCache = function (t) {
                  var e = t;
                  if (n.preloading && n.preloading.fragCache[e]) {
                    var r = n.preloading.fragCache[e],
                      i = { event: r.event, stats: k.assign(r.stats, { alreadySampled: !0 }) };
                    return delete n.preloading.fragCache[e], i;
                  }
                  return null;
                }),
                this.setupHls(),
                L.appleSilicon &&
                  (0, m.count)('player/apple-silicon-hlsjs', 1, { hashedId: r.hashedId });
            }
            return (
              (e = t),
              (r = [
                {
                  key: 'abrBandWidthFactor',
                  value: function () {
                    return 1;
                  },
                },
                {
                  key: 'abrBandWidthUpFactor',
                  value: function () {
                    return 0.9;
                  },
                },
                {
                  key: 'adaptiveAsset',
                  value: function () {
                    var t = s.adaptiveAssetUrl(this),
                      e = s.buildMasterM3u8Asset(t);
                    return (e.display_name = 'Auto'), (e.slug = 'Auto'), e;
                  },
                },
                {
                  key: 'assetFromQuality',
                  value: function (t) {
                    var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : t,
                      r = _.withinQualityRange(this.allAssets, t, e);
                    return (
                      0 === r.length && (r = _.nearestOutsideRange(this.allAssets, t, e)), r[0]
                    );
                  },
                },
                {
                  key: 'changeAudioTrack',
                  value: function (t) {
                    var e = this;
                    return new D(function (r) {
                      var n = 'beforeplay' === e.getPlaybackMode(),
                        i = e.getCurrentAudioTrack().id;
                      n ||
                        i === t ||
                        e.hls.once(v().Events.AUDIO_TRACK_SWITCHED, function () {
                          r();
                        }),
                        e.hls.audioTracks[t] && i !== t
                          ? ((e.hls.audioTrack = t), 'beforeplay' === e.getPlaybackMode() && r())
                          : r();
                    });
                  },
                },
                {
                  key: 'changeLevel',
                  value: function (t) {
                    var e = this;
                    this.hls.currentLevel !== t &&
                      this.hls.startLevel !== t &&
                      (this.hls.startLevel = t),
                      'playing' === this.getPlaybackMode() &&
                        -1 !== t &&
                        (this.hls.once(v().Events.LEVEL_SWITCHED, function () {
                          e.play();
                        }),
                        this.pause()),
                      (this.hls.currentLevel = t);
                  },
                },
                {
                  key: 'changeQuality',
                  value: function (t, e, r) {
                    if ('auto' === t.toString().toLowerCase())
                      return this.changeStream('auto', e, r);
                    var n = this.selectableAssets(),
                      i = _.findClosestAssetByQuality(n, t);
                    return 'beforeplay' === this.getPlaybackMode()
                      ? (this.changeStreamWithoutLoad(i), D.resolve())
                      : this.changeStream(i, e, r);
                  },
                },
                {
                  key: 'changeStream',
                  value: function (t) {
                    var e = this,
                      r = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
                    return (
                      (t = this.getAsset(t)),
                      new D(function (n) {
                        e.changeStreamWithoutLoad(t),
                          e.startHlsLoadOnce(),
                          r ? e.play().then(n) : n();
                      })
                    );
                  },
                },
                {
                  key: 'changeStreamWithoutLoad',
                  value: function (t) {
                    var e;
                    (t = this.getAsset(t)) &&
                      (0, E.assetToLevel)(this, t) !== this.hls.currentLevel &&
                      ((e = 'variable' === t.bitrate ? -1 : (0, E.assetToLevel)(this, t)),
                      (0, E.stopLoad)(this),
                      this.changeLevel(e));
                  },
                },
                {
                  key: 'changeVideo',
                  value: function (t, e) {
                    var r = this;
                    return new D(function (n) {
                      (r.mediaData = null),
                        (r.allAssets = []),
                        (r.attributes = {}),
                        (r.state = {}),
                        (r.state.isChangingVideo = !0),
                        (r._bindings = {}),
                        r.destroyHls(),
                        r.setupProperties(),
                        (0, b.teardownBeforeChangeVideo)(r.simpleVideo),
                        (r.mediaData = r.prepareMp4sForHlsRepackaging(t)),
                        (r.allAssets = t.assets),
                        (r.attributes = e),
                        (0, b.initAfterChangeVideo)(r.simpleVideo, t, e),
                        r.setAttributes({ bwEstimateOnInit: O('hls.bandwidth_estimate') }),
                        r.setupHls(),
                        (r.state.isChangingVideo = !1),
                        n();
                    });
                  },
                },
                {
                  key: 'currentLevel',
                  value: function () {
                    return this.hls.currentLevel;
                  },
                },
                {
                  key: 'currentAsset',
                  value: function () {
                    return 0 <= this.hls.currentLevel
                      ? (0, E.levelToAsset)(this, this.hls.currentLevel) || this.adaptiveAsset()
                      : (null != this.hls.startLevel &&
                          0 <= this.hls.startLevel &&
                          (0, E.levelToAsset)(this, this.hls.startLevel)) ||
                          this.adaptiveAsset();
                  },
                },
                {
                  key: 'defaultAttributes',
                  value: function () {
                    return {
                      contentType: 'video/m3u8',
                      qualityMin: 360,
                      qualityMax: 2160,
                      preload: 'metadata',
                    };
                  },
                },
                {
                  key: 'destroy',
                  value: function () {
                    return (this._bindings = {}), this.destroyHls(), this.simpleVideo.destroy();
                  },
                },
                {
                  key: 'destroyHls',
                  value: function () {
                    var t = this,
                      e = function (t) {
                        try {
                          return t();
                        } catch (t) {
                          C.error(t);
                        }
                      };
                    e(function () {
                      a.teardown(t);
                    }),
                      e(function () {
                        n.teardown(t);
                      }),
                      e(function () {
                        i.teardown(t);
                      }),
                      e(function () {
                        u.teardown(t);
                      }),
                      e(function () {
                        l.teardown(t);
                      }),
                      e(function () {
                        o.teardown(t);
                      }),
                      e(function () {
                        (0, E.teardown)(t);
                      }),
                      this.hls && (this.hls.destroy(), (this.hls = null));
                  },
                },
                {
                  key: 'determineMinAutoBitrate',
                  value: function () {
                    var t = this.hlsAssetFromQuality(360, 1080);
                    return t && t.metadata && t.metadata.max_bitrate
                      ? 8 * (t.metadata.max_bitrate - 1)
                      : 6e5;
                  },
                },
                {
                  key: 'diagnosticData',
                  value: function () {
                    var t = this,
                      e = function (t) {
                        try {
                          return t();
                        } catch (t) {
                          return 'ERROR: '.concat(t.message);
                        }
                      },
                      r = {
                        simpleVideo: this.simpleVideo.diagnosticData(),
                        attributes: this.attributes,
                        currentLevel: e(function () {
                          return t.currentLevel();
                        }),
                        startLevel: e(function () {
                          return t.hls.startLevel;
                        }),
                        nextLevel: e(function () {
                          return t.hls.nextLevel;
                        }),
                        loadLevel: e(function () {
                          return t.hls.loadLevel;
                        }),
                        autoLevel: e(function () {
                          return t.hls.autoLevel;
                        }),
                        autoLevelCapping: e(function () {
                          return t.hls.autoLevelCapping;
                        }),
                        nextAutoLevel: e(function () {
                          return t.hls.nextAutoLevel;
                        }),
                        manualLevel: e(function () {
                          return t.hls.manualLevel;
                        }),
                        bandwidthEstimate: e(function () {
                          return t.hls.abrController.getEstimate();
                        }),
                      };
                    return (
                      (r.currentAsset = this.currentAsset()),
                      r.currentAsset &&
                        r.currentAsset.url &&
                        100 < r.currentAsset.url.length &&
                        (r.currentAsset.url = ''.concat(
                          r.currentAsset.url.substring(0, 97),
                          '...'
                        )),
                      (r.selectedAsset = this.selectedAsset()),
                      r.selectedAsset &&
                        r.selectedAsset.url &&
                        100 < r.selectedAsset.url.length &&
                        (r.selectedAsset.url = ''.concat(
                          r.selectedAsset.url.substring(0, 97),
                          '...'
                        )),
                      r
                    );
                  },
                },
                {
                  key: 'filteredVideoAssets',
                  value: function () {
                    var t = s.allMp4VideoAssets(this.allAssets);
                    return (0, E.filteredHlsAssets)(this, t);
                  },
                },
                {
                  key: 'getAsset',
                  value: function (t) {
                    if ('number' == typeof t) return this.assetFromQuality(t);
                    if ('string' == typeof t && 'auto' === t.toLowerCase()) {
                      if ('auto' === t.toLowerCase()) return this.adaptiveAsset();
                      if ('4k' === t.toLowerCase()) return this.assetFromQuality(2160);
                      if (/^\d+/.test(t)) return this.assetFromQuality(parseInt(t));
                    }
                    return t;
                  },
                },
                {
                  key: 'getAudioTracks',
                  value: function () {
                    var t = this,
                      e = this.m3u8AudioAssets();
                    return 0 < this.hls.audioTracks.length
                      ? this.hls.audioTracks.map(function (r, n) {
                          var i = e[n - 1];
                          return (
                            (r.isSelected = n === t.getHlsAudioTrackId()),
                            (r.label = null == i ? void 0 : i.details.languageMetadata.nativeName),
                            0 === n && (r.label = 'Original'),
                            r
                          );
                        })
                      : s.audioTracksForVideo(e);
                  },
                },
                {
                  key: 'getCurrentAudioTrack',
                  value: function () {
                    this.loadForAudioTracks();
                    var t = this.getHlsAudioTrackId(),
                      e = this.hls.audioTracks[t];
                    return (e.isSelected = !0), e;
                  },
                },
                {
                  key: 'getCurrentAudioTrackId',
                  value: function () {
                    return this.getCurrentAudioTrack().id;
                  },
                },
                {
                  key: 'getCurrentQuality',
                  value: function () {
                    var t = this.currentAsset();
                    return t
                      ? 'Auto' === t.slug
                        ? 'auto'
                        : _.numericSizeSnapped(t.width, t.height)
                      : '?';
                  },
                },
                {
                  key: 'getHlsAudioTrackId',
                  value: function () {
                    return -1 === this.hls.audioTrack ? 0 : this.hls.audioTrack;
                  },
                },
                {
                  key: 'getIndexOfStartingAsset',
                  value: function () {
                    for (
                      var t = this.filteredVideoAssets(),
                        e = (0, E.bestStartingAsset)(this, t),
                        r = 0;
                      r < t.length;
                      r++
                    )
                      if (t[r].url === e.url) return r;
                  },
                },
                {
                  key: 'getStartPosition',
                  value: function () {
                    return this._startPosition;
                  },
                },
                {
                  key: 'hlsAssetFromQuality',
                  value: function (t) {
                    var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : t,
                      r = _.withinQualityRange(this.filteredVideoAssets(), t, e);
                    return (
                      0 === r.length &&
                        (r = _.nearestOutsideRange(this.filteredVideoAssets(), t, e)),
                      r[0]
                    );
                  },
                },
                {
                  key: 'isChangingVideo',
                  value: function () {
                    return !!this.state.isChangingVideo;
                  },
                },
                {
                  key: 'loadForAudioTracks',
                  value: function () {
                    0 === this.hls.audioTracks.length && this.startHlsLoadOnce();
                  },
                },
                {
                  key: 'liveConfig',
                  value: function () {
                    return {
                      abrBandWidthFactor: 1,
                      abrBandWidthUpFactor: 0.9,
                      abrEwmaDefaultEstimate: this.attributes.bwEstimateOnInit,
                      testBandwidth: !1,
                      autoStartLoad: !1,
                      debug: {
                        log: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.info.apply(R, ['hlsjs log >'].concat(e));
                        },
                        error: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.notice.apply(R, ['hlsjs error >'].concat(e));
                        },
                        warn: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.notice.apply(R, ['hlsjs warn >'].concat(e));
                        },
                        info: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.info.apply(R, ['hlsjs info >'].concat(e));
                        },
                        debug: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.debug.apply(R, ['hlsjs debug >'].concat(e));
                        },
                      },
                      maxBufferSize: 6e7,
                      maxFragLookUpTolerance: 0.2,
                      maxMaxBufferLength: this.attributes.maxMaxBufferLength || 60,
                      seekHoleNudgeDuration: 0.1,
                    };
                  },
                },
                {
                  key: 'loadSource',
                  value: function () {
                    var t = this.adaptiveAsset();
                    this.hls.loadSource(t.url);
                  },
                },
                {
                  key: 'm3u8AudioAssets',
                  value: function () {
                    return s.allHlsAudioAssets(this.allAssets);
                  },
                },
                {
                  key: 'masterM3u8Content',
                  value: function () {
                    var t = this.filteredVideoAssets();
                    return s.masterM3u8ContentFromAssets({
                      video: t,
                      audio: this.m3u8AudioAssets(),
                    });
                  },
                },
                {
                  key: 'maybeResetCurrentLevel',
                  value: function (t) {
                    if (this.simpleVideo.attributes.width) {
                      var e = this.simpleVideo.attributes.width;
                      if ('auto' === this.selectedQuality() && e !== t) {
                        var r = t - e,
                          n = (0, E.levelToAsset)(this, this.hls.currentLevel),
                          i = n ? n.width : 0,
                          a = n ? n.height : 0,
                          s = _.numericSizeSnapped(i, a);
                        500 <= r && 360 >= s && this.changeLevel(-1);
                      }
                    }
                  },
                },
                {
                  key: 'onEnterFullscreen',
                  value: function () {
                    return (
                      this.simpleVideo.onEnterFullscreen(),
                      'beforeplay' === this.getPlaybackMode()
                        ? void (this.hls.startLevel = (0, E.highestSupportedHlsAssetLevel)(this))
                        : void this.changeLevel(-1)
                    );
                  },
                },
                {
                  key: 'onHeightChange',
                  value: function (t) {
                    this.simpleVideo.onHeightChange(t), this.setAttributes({ height: t });
                  },
                },
                {
                  key: 'onHlsError',
                  value: function (t) {
                    var e = this;
                    this.attributes.liveMedia &&
                      t.details === v().ErrorDetails.MANIFEST_LOAD_ERROR &&
                      404 === t.response.code &&
                      setTimeout(function () {
                        e.loadSource();
                      }, 1e3);
                  },
                },
                {
                  key: 'onMediaDataChanged',
                  value: function (t) {
                    this.mediaData = this.prepareMp4sForHlsRepackaging(t);
                  },
                },
                {
                  key: 'onReady',
                  value: function () {
                    var t = this;

                    if (!this.readyPromise) {
                      this.readyPromise = this.simpleVideo.onReady().then(function () {
                        return D.all([t.mediaAttachedPromise, t.manifestParsedPromise]);
                      });
                    }

                    return this.readyPromise;
                  },
                },
                {
                  key: 'onWidthChange',
                  value: function (t) {
                    var e = this;
                    this.maybeResetCurrentLevel(t),
                      this.simpleVideo.onWidthChange(t),
                      this.setAttributes({ width: t }),
                      this.onReady().then(function () {
                        e.attributes.liveMedia || o.capLevelBasedOnVideoWidth(e);
                      });
                  },
                },
                {
                  key: 'play',
                  value: function (t) {
                    var e = this;
                    console.warn('hls_video play()');

                    this.startHlsLoadOnce();

                    const p = this.simpleVideo.play(t);

                    return p.then(function (t) {
                      console.warn('hls_video play() resolved');

                      var liveMedia = e.attributes.liveMedia;
                      if (liveMedia) {
                        e.setCurrentTimeToLiveEdge();
                      }

                      return t;
                    });

                    // return (
                    //   this.simpleVideo.play(t).then(function (t) {
                    //     return e.attributes.liveMedia && e.setCurrentTimeToLiveEdge(), t;
                    //   })
                    // );
                  },
                },
                {
                  key: 'prepareMp4sForHlsRepackaging',
                  value: function (t) {
                    var e = k.clone(t);
                    return I(e);
                  },
                },
                {
                  key: 'qualityForAsset',
                  value: function (t) {
                    return 'Auto' === t.slug ? 'auto' : _.numericSizeSnapped(t.width, t.height);
                  },
                },
                {
                  key: 'removeSourceElem',
                  value: function () {
                    var t = this.getMediaElement(),
                      e = Array.prototype.slice.call(t.childNodes);
                    0 < e.length &&
                      e.map(function (e) {
                        t.removeChild(e);
                      });
                  },
                },
                {
                  key: 'reset',
                  value: function () {
                    this.simpleVideo.reset();
                  },
                },
                {
                  key: 'seek',
                  value: function (t, e) {
                    return this.startHlsLoadOnce(t), this.simpleVideo.seek(t, e);
                  },
                },
                {
                  key: 'selectableAssets',
                  value: function () {
                    var t = this.filteredVideoAssets().sort(function (t, e) {
                      return t.width - e.width;
                    });
                    return [this.adaptiveAsset()].concat(t);
                  },
                },
                {
                  key: 'selectableQualities',
                  value: function () {
                    var t = this;
                    return this.selectableAssets().map(function (e) {
                      return t.qualityForAsset(e);
                    });
                  },
                },
                {
                  key: 'selectedAsset',
                  value: function () {
                    return 0 <= this.hls.manualLevel ? this.currentAsset() : this.adaptiveAsset();
                  },
                },
                {
                  key: 'selectedQuality',
                  value: function () {
                    return this.qualityForAsset(this.selectedAsset());
                  },
                },
                {
                  key: 'setAttributes',
                  value: function (t) {
                    return k.assign(this.attributes, t), this.simpleVideo.setAttributes(t);
                  },
                },
                {
                  key: 'setCurrentTimeToLiveEdge',
                  value: function () {
                    this.setCurrentTime(this.hls.liveSyncPosition);
                  },
                },
                {
                  key: 'setupEventListeners',
                  value: function () {
                    var t = this;
                    (this.manifestParsedPromise = new D(function (e) {
                      t.hls.on(v().Events.MANIFEST_PARSED, e);
                    })),
                      (this.mediaAttachedPromise = new D(function (e) {
                        t.hls.on(v().Events.MEDIA_ATTACHED, e);
                      })),
                      this.hls.on(v().Events.AUDIO_TRACKS_UPDATED, function () {
                        t.trigger('audiotracksupdated');
                      }),
                      this.hls.on(v().Events.ERROR, function (e, r) {
                        t.onHlsError(r);
                      });
                  },
                },
                {
                  key: 'setupHls',
                  value: function () {
                    this.attributes.liveMedia ? this.setupLiveHls() : this.setupVodHls(),
                      this.trigger('stream-changed', this.currentAsset());
                  },
                },
                {
                  key: 'setupLiveHls',
                  value: function () {
                    var t = this.liveConfig();
                    (this.hls = new (v())(t)),
                      u.setup(this),
                      this.loadSource(),
                      this.setupEventListeners(),
                      this.hls.attachMedia(this.simpleVideo.getMediaElement()),
                      this.removeSourceElem(),
                      n.setup(this),
                      a.setup(this);
                  },
                },
                {
                  key: 'setupVodHls',
                  value: function () {
                    var t = this,
                      e = this.vodConfig();
                    (this.hls = new (v())(e)),
                      o.setup(this),
                      u.setup(this),
                      this.loadSource(),
                      this.setupEventListeners(),
                      this.hls.attachMedia(this.simpleVideo.getMediaElement()),
                      this.removeSourceElem(),
                      i.setup(this),
                      a.setup(this),
                      n.setup(this),
                      l.setup(this),
                      !L.android &&
                        this.attributes.videoQuality &&
                        (0, T.parseLegacyVideoQualityWidth)(
                          this.attributes.videoQuality,
                          this.allAssets
                        ) &&
                        this.hls.once(v().Events.MANIFEST_PARSED, function () {
                          var e = (0, T.parseLegacyVideoQualityWidth)(
                            t.attributes.videoQuality,
                            t.allAssets
                          );
                          t.changeQuality(e);
                        });
                  },
                },
                {
                  key: 'setupProperties',
                  value: function () {
                    null == this.preloading && (this.preloading = {}),
                      null == this.preloading.m3u8Cache && (this.preloading.m3u8Cache = {}),
                      null == this.preloading.fragCache && (this.preloading.fragCache = {});
                  },
                },
                {
                  key: 'showFirstFrame',
                  value: function () {
                    return this.seek(0.01);
                  },
                },
                {
                  key: 'startHlsLoadOnce',
                  value: function () {
                    var t = this._startPosition;
                    (0, E.startLoadOnce)(this, t);
                  },
                },
                {
                  key: 'updateStartPosition',
                  value: function (t) {
                    this._startPosition = t;
                  },
                },
                {
                  key: 'vodConfig',
                  value: function () {
                    return {
                      abrBandWidthFactor: 1,
                      abrBandWidthUpFactor: 0.9,
                      abrController: d(),
                      abrEwmaDefaultEstimate: this.attributes.bwEstimateOnInit,
                      abrEwmaFastVoD: 4,
                      abrEwmaSlowVoD: 15,
                      autoStartLoad: !1,
                      bitrateForLevel: this.bitrateForLevel,
                      debug: {
                        log: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.info.apply(R, ['hlsjs log >'].concat(e));
                        },
                        error: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.notice.apply(R, ['hlsjs error >'].concat(e));
                        },
                        warn: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.notice.apply(R, ['hlsjs warn >'].concat(e));
                        },
                        info: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.info.apply(R, ['hlsjs info >'].concat(e));
                        },
                        debug: function () {
                          for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                            e[r] = arguments[r];
                          R.debug.apply(R, ['hlsjs debug >'].concat(e));
                        },
                      },
                      getFragFromCache: this.popFragFromCache,
                      getM3u8FromCache: this.getM3u8FromCache,
                      loader: f.default,
                      maxBufferSize: 6e7,
                      maxFragLookUpTolerance: 0.2,
                      maxMaxBufferLength: this.attributes.maxMaxBufferLength || 60,
                      minAutoBitrate: this.determineMinAutoBitrate(),
                      seekHoleNudgeDuration: 0.1,
                      startLevel: this.getIndexOfStartingAsset(),
                    };
                  },
                },
              ]) && S(e.prototype, r),
              c && S(e, c),
              t
            );
            var e, r, c;
          })();
        w(P.prototype, function () {
          return this.simpleVideo;
        }),
          (0, y.default)('HlsVideo', P);
        const F = P;
      },
      352: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            capLevelBasedOnExactWidth: () => g,
            capLevelBasedOnVideoWidth: () => p,
            cappedLevelFromWidth: () => m,
            cappedLevelFromVideoWidth: () => y,
            capToLevel: () => b,
            setup: () => E,
            teardown: () => T,
          });
        var n = r(350),
          i = r(347),
          a = r.n(i),
          s = r(1),
          o = r(349),
          l = s.default.lib('player/lib/assets'),
          u = s.default.lib('utilities/wlog').wlog.getPrefixedFunctions('hls_video level_capping'),
          c = s.default.lib('utilities/cacheable'),
          d = c.makeCacheable,
          f = c.uncacheNamespace,
          h = (0, c.makeNamespace)('level_capping'),
          v = d('level_capping'),
          g = function (t, e) {
            var r = m(t, e);
            0 <= r
              ? (u.info('Capping to level', r), b(t.hls, r))
              : u.info('Cannot cap level for width '.concat(e, '; no matching assets found'));
          },
          p = function (t) {
            if (!1 !== t.attributes.capBasedOnVideoWidth) {
              var e = t.hls;
              var r = y(t);
              u.info('capLevelBasedOnVideoWidth', r);
              if (0 <= r) {
                var n = e.currentLevel;
                var i = e.autoLevelCapping;
                b(t, r);
                var a = t.getPlaybackMode();
                if (0 === t.filteredVideoAssets().length) {
                  return;
                }
                if ('beforeplay' === a && r === e.startLevel) {
                  u.info(
                    'Not reevaluating next fragment because starting level is the same as the capped level'
                  );
                } else {
                  var s = (0, o.highestSupportedHlsAssetLevel)(t);
                  var l = e.levels.length - 1;
                  var c = (0, o.levelToAsset)(t, Math.min(n + 1, l));
                  0 <= i && r > i && (0, o.canSupportAsset)(t, c) && (e.nextLoadLevel = s);
                }
              }
            }
          },
          m = function (t, e) {
            var r = t.filteredVideoAssets();
            var i = n.filterByQualityAndMaxWidth(t, r, { maxWidth: e });

            window.m_ran = true;
            var a = l.one(i, {
              width: [0, e],
              sortBy: 'width desc, bitrate desc',
              metadata: function (t) {
                console.warn('t.max_bitrate', t.max_bitrate);
                console.warn('o.UNOBTAINABLE_BITRATE', o.UNOBTAINABLE_BITRATE);
                return t.max_bitrate < o.UNOBTAINABLE_BITRATE;
              },
            });
            if (a) {
              return o.assetToLevel(t, a);
            }
            return -1;
          },
          y = function (t) {
            var maxAssetWidthBasedOnVideoWidth = n.maxAssetWidthBasedOnVideoWidth(
              t.attributes.width,
              t.attributes.devicePixelRatio
            );
            var r = m(t, maxAssetWidthBasedOnVideoWidth);
            return r;
          },
          b = function (t, e) {
            t.onReady().then(function () {
              t.hls.autoLevelCapping = e;
            });
          },
          E = function (t) {
            var e = v(t, 'onManifestParsed', function () {
              return function (e, r) {
                t.onReady(function () {
                  p(t);
                });
              };
            });
            t.hls.off(a().Events.MANIFEST_PARSED, e), t.hls.on(a().Events.MANIFEST_PARSED, e);
          },
          T = function (t) {
            h(t).onManifestParsed &&
              t.hls &&
              t.hls.off(a().Events.MANIFEST_PARSED, h(t).onManifestParsed),
              f('level_capping', t);
          };
      },
      353: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            parseManifestPlaylist: () => A,
            preloadM3u8Level: () => _,
            preloadSegment: () => k,
            preloadStream: () => w,
            setup: () => R,
            teardown: () => C,
          });
        var n = r(1),
          i = r(347),
          a = r.n(i),
          s = r(354),
          o = r(349),
          l = n.default.lib('utilities/detect').cachedDetect,
          u = n.default.lib('player/lib/timeout-utils').doTimeout,
          c = n.default.lib('player/lib/elem').pageLoaded,
          d = n.default.lib('utilities/legacyLocalstorage').setOrGet,
          f = n.default.lib('utilities/wlog').wlog,
          h = n.default.lib('utilities/cacheable'),
          v = h.makeCacheable,
          g = h.uncacheNamespace,
          p = h.makeNamespace,
          m = v('preloading'),
          y = p('preloading'),
          b = f.getPrefixedFunctions('hls preloading'),
          E = l(),
          T = function (t, e) {
            if (-1 === e) {
              var r = t.getIndexOfStartingAsset();
              return t.hls.levels[r].url[0];
            }
            return t.hls.levels[e].url[0];
          },
          A = function (t, e) {
            var r = [];
            return (
              e.replace(/(\/deliveries\/)([a-zA-Z0-9.\-/]+\.ts)/g, function (t, e, n) {
                var i = /seg-(\d+)-/g.exec(n)[1];
                return r.push({ sn: i, url: n }), '';
              }),
              r
            );
          },
          S = function (t, e, r) {
            var n = t.hls;
            n &&
              L(t, n.startLevel, 1, function () {
                var i = (0, o.levelToAsset)(t, n.startLevel),
                  a = (0, o.bestStartingAsset)(
                    t,
                    t.filteredVideoAssets(),
                    (0, o.weightedBwUpEstimate)(t)
                  ),
                  s = n.abrController.getEstimate();
                b.info('bandwidth estimate after 1 fragment', s),
                  b.info('determined best starting asset', a);
                var l = a && a.url,
                  u = i && i.url;
                if (a && u !== l) {
                  var c = (0, o.assetToLevel)(t, o.bestStartingAsset);
                  if (0 > c)
                    return (
                      b.warn('no matching level found, got', c),
                      void ('function' == typeof r && r())
                    );
                  b.info('set startLevel', c),
                    null != c && isNaN(c) && b.error('error: setting startLevel to NaN', c, l),
                    (n.startLevel = c),
                    L(t, c, e, function () {
                      'function' == typeof r && r();
                    });
                } else L(t, n.startLevel, e - 1, r);
              });
          },
          L = function (t, e) {
            var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1,
              n = 3 < arguments.length ? arguments[3] : void 0,
              i = t.getStartPosition(),
              a = 0 < i ? Math.round(i / 3) - 1 : 0,
              s = a + r;
            return D(t, e, a, s, n);
          },
          _ = function (t, e, r) {
            if (t.hls && t.hls.levels) {
              var n = T(t, e),
                i = y(t).m3u8Cache;
              if (i && i[n]) {
                var a = i[n];
                return void u(
                  ''.concat(t.uuid, '.preload_m3u8_level'),
                  function () {
                    r(a);
                  },
                  0
                );
              }
              var o = new s.default(t.hls.config),
                l = {
                  type: 'level',
                  level: e,
                  id: 0,
                  responseType: 'text',
                  loader: s.default,
                  url: n,
                },
                c = {
                  onSuccess: function (e, i) {
                    var a = { event: e, stats: i, url: n, segments: A(t, e.data) };
                    try {
                      (y(t).m3u8Cache[n] = a), r(a);
                    } catch (t) {
                      b.warn(t);
                    }
                  },
                  onError: function () {
                    for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                      e[r] = arguments[r];
                    b.error.apply(b, ['Failed to fetch data for m3u8 '.concat(n)].concat(e));
                  },
                  onTimeout: function () {
                    for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                      e[r] = arguments[r];
                    b.error.apply(b, ['Timeout fetching data for m3u8 '.concat(n)].concat(e));
                  },
                };
              o.load(l, { timeout: 6e3, maxRetry: 3, retryDelay: 500, maxRetryDelay: 3e3 }, c);
            }
          },
          k = function (t, e, r, n) {
            if (t.hls && t.hls.levels) {
              var i = T(t, e);
              _(t, e, function () {
                var o,
                  l = y(t).m3u8Cache[i].segments[r];
                if (l) {
                  var u,
                    c = l.url,
                    f = y(t).m3u8Cache[i].url;
                  u = /^https?:\/\//.test(c)
                    ? c
                    : f.substring(0, f.lastIndexOf('deliveries/') + 11) + c;
                  var h = new s.default(t.hls.config),
                    v = {
                      onSuccess: function (e, r) {
                        var i = u,
                          a = { event: e, stats: r },
                          s = Math.max(50, performance.now() - r.loading.start),
                          o = r.loaded;
                        d('hls.bandwidth_estimate', (8e3 * o) / s),
                          t.hls &&
                            (t.hls.abrController.sample(s, o),
                            (y(t).fragCache[i] = a),
                            'function' == typeof n && n(a));
                      },
                      onError: function () {
                        for (var t = arguments.length, e = Array(t), n = 0; n < t; n++)
                          e[n] = arguments[n];
                        b.warn.apply(b, ['failed to preload segment', u, r].concat(e));
                      },
                      onTimeout: function () {
                        for (var t = arguments.length, e = Array(t), n = 0; n < t; n++)
                          e[n] = arguments[n];
                        b.warn.apply(b, ['timed out preloading segment', u, r].concat(e));
                      },
                      onProgress: function (e) {
                        t.hls.trigger(a().Events.FRAG_LOAD_PROGRESS, { stats: e });
                      },
                    },
                    g = {
                      id: 0,
                      level: (o = { level: e, url: u, segment: l }).level,
                      loader: s.default,
                      responseType: 'arraybuffer',
                      type: 'level',
                      url: o.url,
                      sn: o.segment.sn,
                    };
                  h.load(g, { timeout: 6e3, maxRetry: 3, retryDelay: 500, maxRetryDelay: 3e3 }, v);
                }
              });
            }
          },
          D = function t(e, r, n, i, a) {
            n >= i
              ? 'function' == typeof a && a()
              : k(e, r, n, function () {
                  'beforeplay' !== e.getPlaybackMode() || t(e, r, n + 1, i, a);
                });
          },
          w = function (t, e) {
            var r = E.edge && 17 > parseInt(E.browser.version);
            E.trident ||
              r ||
              c(function () {
                'beforeplay' === t.getPlaybackMode() &&
                  ('auto' === t.getPreload()
                    ? S(t, 9, e)
                    : 'metadata' === t.getPreload() && S(t, 1, e));
              });
          },
          R = function (t) {
            var e = t.hls,
              r = m(t, 'onMediaAttached', function () {
                return function () {
                  w(t, function () {
                    t.trigger('stream-changed', (0, o.levelToAsset)(t, e.startLevel));
                  });
                };
              });
            e.off(a().Events.MEDIA_ATTACHED, r), e.on(a().Events.MEDIA_ATTACHED, r);
          },
          C = function (t) {
            y(t).onMediaAttached &&
              t.hls &&
              t.hls.off(a().Events.MEDIA_ATTACHED, y(t).onMediaAttached),
              g('preloading', t);
          };
      },
      355: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { setup: () => v, teardown: () => g });
        var n = r(347),
          i = r.n(n),
          a = r(349),
          s = r(1),
          o = s.default.lib('utilities/wlog').wlog.getPrefixedFunctions('hls_video'),
          l = s.default.lib('utilities/cacheable'),
          u = l.makeCacheable,
          c = l.uncacheNamespace,
          d = l.makeNamespace,
          f = u('track_stream_changes'),
          h = d('track_stream_changes'),
          v = function (t) {
            var e = t.hls;
            (h(t).lastLevel = null), (h(t).lastAutoLevel = null), (h(t).substreamIndex = 0);
            var r = f(t, 'onFragChanged', function () {
              return function (e, r) {
                if (r.frag.level !== t._lastLevel || r.frag.autoLevel != t._lastAutoLevel) {
                  var n = (0, a.levelToAsset)(t, r.frag.level);
                  t.trigger('stream-changed', n || r.frag),
                    (h(t).lastLevel = r.frag.level),
                    (h(t).lastAutoLevel = r.frag.autoLevel),
                    (h(t).substreamIndex += 1),
                    0 <= r.frag.level
                      ? o.notice('frag switch to', n || r.frag.level, 'at', t.getCurrentTime())
                      : o.notice('frag switch to Auto at', t.getCurrentTime());
                }
              };
            });
            e.off(i().Events.FRAG_CHANGED, r), e.on(i().Events.FRAG_CHANGED, r);
            var n = f(t, 'onAudioSwitching', function () {
              return function (e, r) {
                t.trigger('audiostreamchange'),
                  0 < r.id
                    ? o.notice('audio asset switch to track: ', r.id, 'at', t.lastBufferedTime())
                    : o.notice('level switch to original encoded audio at', t.lastBufferedTime());
              };
            });
            e.off(i().Events.AUDIO_TRACK_SWITCHING, n), e.on(i().Events.AUDIO_TRACK_SWITCHING, n);
            var s = f(t, 'onLevelSwitching', function () {
              return function (e, r) {
                if (0 <= r.level) {
                  var n = (0, a.levelToAsset)(t, r.level);
                  o.notice('level switch to', n || r.level, 'at', t.lastBufferedTime());
                } else o.notice('level switch to Auto at', t.lastBufferedTime());
              };
            });
            e.off(i().Events.LEVEL_SWITCHING, s), e.on(i().Events.LEVEL_SWITCHING, s);
          },
          g = function (t) {
            h(t).onFragChanged && t.hls && t.hls.off(i().Events.FRAG_CHANGED, h(t).onFragChanged),
              h(t).onLevelSwitch &&
                t.hls &&
                t.hls.off(i().Events.LEVEL_SWITCHING, h(t).onLevelSwitching),
              c('track_stream_changes', t);
          };
      },
      342: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            PUBLIC_METHODS: () => n,
            delegateMethods: () => i,
            delegatePublicMethods: () => a,
          });
        var n = [
            'activeBufferRange',
            'anyBuffered',
            'bind',
            'bindNamed',
            'bufferInfo',
            'canDownloadMedia',
            'cancelFullscreen',
            'captureCurrentFrame',
            'changeQuality',
            'changeStream',
            'changeStreamWithoutLoad',
            'changeVideo',
            'currentAsset',
            'defaultAsset',
            'destroy',
            'diagnosticData',
            'eventContext',
            'fit',
            'getAudioTracks',
            'getCurrentQuality',
            'getCurrentTime',
            'getCuts',
            'getDuration',
            'getDurationBeforeCuts',
            'getMediaElement',
            'getMediaType',
            'getPlaybackMode',
            'getPlaybackRate',
            'getPreload',
            'getState',
            'getTimeAfterCuts',
            'getTimeBeforeCuts',
            'getTrim',
            'getVolume',
            'hasIssuedPlay',
            'isChangingVideo',
            'isInitializingFromUnmuted',
            'isInFullscreen',
            'isMuted',
            'isSeeking',
            'isSourceOfBrowserEvent',
            'lastBufferedTime',
            'mute',
            'onEnterFullscreen',
            'onHeightChange',
            'onLeaveFullscreen',
            'onMediaDataChanged',
            'onPlayed',
            'onReady',
            'onWidthChange',
            'pause',
            'play',
            'playType',
            'requestFullscreen',
            'reset',
            'seek',
            'seekOnPlay',
            'selectedAsset',
            'selectableAssets',
            'selectableQualities',
            'selectedQuality',
            'sequentialBufferedRange',
            'setAttributes',
            'setCurrentTime',
            'setPlaybackRate',
            'setCuts',
            'setTrim',
            'setVolume',
            'showFirstFrame',
            'stopStreaming',
            'timeBeforeEndOfBuffer',
            'totalBuffered',
            'totalPlayed',
            'trigger',
            'unbind',
            'unbindNamed',
            'unbindAllInNamespace',
            'unmute',
            'updateStartPosition',
          ],
          i = function (t, e, r) {
            for (var n, i = 0; i < t.length; i++)
              (n = t[i]),
                e[n] ||
                  (function (t) {
                    e[t] = function () {
                      var e = r.call(this);
                      return e ? e[t].apply(e, arguments) : null;
                    };
                  })(n);
          },
          a = function (t, e) {
            i(n, t, e);
          };
      },
      327: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            anyBuffered: () => s,
            activeBufferRange: () => o,
            totalBuffered: () => l,
            sequentialBufferedRange: () => u,
            bufferInfo: () => c,
            lastBufferedTime: () => d,
            timeBeforeEndOfBuffer: () => f,
          });
        var n = r(1),
          i = r(326),
          a = n.default.lib('utilities/wlog').wlog.getPrefixedFunctions('buffering'),
          s = function (t) {
            var e = t.video;
            return 0 < e.buffered.length && 0 < e.buffered.end(0);
          },
          o = function (t) {
            for (var e = t.video, r = e.currentTime, n = 0; n < e.buffered.length; n++) {
              var i = e.buffered.start(n),
                a = e.buffered.end(n);
              if (i <= r && r < a) return [i, a];
            }
            return null;
          },
          l = function (t) {
            return i.sumTimeRanges(t.video.buffered);
          },
          u = function (t) {
            var e = t.video,
              r = e.buffered,
              n = null;
            try {
              for (var i = 0; i < r.length; i++) {
                var s = r.start(i) - 0.5,
                  o = r.end(i) + 0.5;
                if (s <= e.currentTime && e.currentTime < o) {
                  n = i;
                  break;
                }
              }
              if (null != n) {
                for (var l = n, u = n; u < r.length; u++) {
                  if (!(r.start(u) - 0.5 <= r.end(l) + 0.5)) break;
                  l = u;
                }
                return [r.start(n), r.end(l)];
              }
              return null;
            } catch (t) {
              return a.error(t), null;
            }
          },
          c = function (t, e, r) {
            var n = t.video;
            if (n) {
              var a,
                s = n.buffered,
                o = [];
              for (a = 0; a < s.length; a++) o.push({ start: s.start(a), end: s.end(a) });
              return i.bufferedInfo(o, e, r);
            }
            return { len: 0, start: 0, end: 0, nextStart: void 0 };
          },
          d = function (t, e) {
            return c(t, t.getCurrentTime(), e).end;
          },
          f = function (t, e) {
            return d(t, e) - t.getCurrentTime();
          };
      },
      336: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { setup: () => o, teardown: () => l });
        var n = r(1),
          i = n.default.lib('utilities/obj'),
          a = n.default.lib('utilities/event_loop').globalEventLoop,
          s = function (t) {
            var e = t.attributes;
            return (null == e.eventLoopDuration ? 300 : e.eventLoopDuration) / t.getPlaybackRate();
          },
          o = function (t) {
            null == t.state && (t.state = {}),
              'playing' === t.getPlaybackMode() && (t.state.hasPlayed = !0),
              t.bind('playing', function () {
                t.state.hasPlayed = !0;
              }),
              t.bind('waiting', function () {
                t.state.gotWaiting = !0;
              }),
              t.bind('loadedmetadata', function () {
                t.state.loadedMetadata = !0;
              }),
              i.assign(t.state, {
                lastPlaybackMode: t.getPlaybackMode(),
                lastTimePosition: t.getCurrentTime(),
                lastEventLoopDuration: s(t),
              });
            var e = ''.concat(t.uuid, '.custom_state_and_events');
            a.add(e, s(t), function () {
              i.assign(t.state, {
                lastTimePosition: t.getCurrentTime(),
                lastPlaybackMode: t.getPlaybackMode(),
                lastEventLoopDuration: s(t),
              }),
                a.interval(e, s(t));
            });
          },
          l = function (t) {
            var e = ''.concat(t.uuid, '.custom_state_and_events');
            a.remove(e);
          };
      },
      331: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            getCurrentTimeAfterCuts: () => n.getCurrentTimeAfterCuts,
            getCuts: () => n.getCuts,
            getDurationAfterCuts: () => n.getDurationAfterCuts,
            getTimeAfterCuts: () => n.getTimeAfterCuts,
            getTimeBeforeCuts: () => n.getTimeBeforeCuts,
            trimStartFromCuts: () => a,
            trimEndFromCuts: () => s,
            getTrim: () => o,
            setCuts: () => l,
            enforceCuts: () => c,
            teardownCuts: () => d,
            enforceCutsNow: () => f,
            setTrim: () => h,
            getEffectiveEnd: () => v,
          });
        var n = r(332),
          i = r(328),
          a = function (t) {
            var e = (0, n.getCuts)(t);
            return 1 > e.length || 0 < e[0].start ? 0 : e[0].end;
          },
          s = function (t) {
            var e = (0, n.getCuts)(t),
              r = (0, n.getDurationBeforeCuts)(t);
            return 1 > e.length || e[e.length - 1].end < r ? -1 : e[e.length - 1].start;
          },
          o = function (t) {
            return { start: a(t), end: s(t) };
          },
          l = function (t, e) {
            (t.attributes.cuts = e),
              e !== t._rawCuts && ((t._cuts = void 0), (t._rawCuts = void 0)),
              c(t);
          },
          u = function t(e, r) {
            return (
              r || (r = { current: null }),
              (r.current = requestAnimationFrame(function () {
                !1 !== e() && t(e, r);
              })),
              function () {
                cancelAnimationFrame(r.current);
              }
            );
          },
          c = function (t) {
            if (!t._stopEnforcingCuts && 0 !== (0, n.getCuts)(t).length) {
              var e = function () {
                  t._stopEnforcingCutsViaRafLoop &&
                    (t._stopEnforcingCutsViaRafLoop(), (t._stopEnforcingCutsViaRafLoop = void 0));
                },
                r = [
                  t.on('playing', function () {
                    e(),
                      (t._stopEnforcingCutsViaRafLoop = u(function () {
                        if (
                          !t.state.seeking &&
                          !t.video.seeking &&
                          (f(t), !t._stopEnforcingCutsViaRafLoop)
                        )
                          return !1;
                      }));
                  }),
                  t.on('pause', e),
                  t.on('ended', e),
                  t.on('beforeplay', e),
                  t.on('timeupdate', function () {
                    f(t);
                  }),
                ];
              t._stopEnforcingCuts = function () {
                e(),
                  r.forEach(function (t) {
                    return t();
                  }),
                  (t._stopEnforcingCuts = void 0);
              };
            }
          },
          d = function (t) {
            t._stopEnforcingCuts && (t._stopEnforcingCuts(), (t._stopEnforcingCuts = void 0));
          },
          f = function (t) {
            if ('beforeplay' !== t.getPlaybackMode()) {
              var e = t.video.currentTime,
                r = (0, n.getCuts)(t),
                a = -1,
                s = r.filter(function (t, r) {
                  if (t.start <= e && e < t.end) return 0 > a && (a = r), t;
                })[0],
                o = (0, n.getDurationBeforeCuts)(t);
              if (
                (t.state.fakeEnded &&
                  (0, n.getTimeAfterCuts)(t, e) < (0, n.getDurationAfterCuts)(t) - 0.1 &&
                  (t.state.fakeEnded = !1),
                s)
              ) {
                var l = v(r, a);
                l < o - 0.1
                  ? (0, i.seekWithoutCuts)(t, l + 1e-6)
                  : !t.state.fakeEnded &&
                    ((t.state.fakeEnded = !0),
                    t.attributes.loop
                      ? (t.trigger('ended'),
                        t.seek(0).then(function () {
                          return t.play();
                        }))
                      : (t.pause(), t.trigger('ended')));
              }
            }
          },
          h = function (t, e) {
            var r = e.start,
              n = e.end;
            null != r &&
              (0 <= r ? (t.attributes.trimStart = e.start) : delete t.attributes.trimStart),
              null != n && (0 <= n ? (t.attributes.trimEnd = e.end) : delete t.attributes.trimEnd),
              (t._cuts = void 0),
              f(t),
              c(t);
          },
          v = function (t, e) {
            if (e >= t.length) return -1;
            for (var r, n = t[e].end, i = e; i < t.length && !((r = t[i]).start > n); i += 1)
              r.start === n && (n = r.end);
            return n;
          };
      },
      332: (t, e, r) => {
        'use strict';
        function n(t) {
          return (
            (function (t) {
              if (Array.isArray(t)) return i(t);
            })(t) ||
            (function (t) {
              if ('undefined' != typeof Symbol && Symbol.iterator in Object(t))
                return Array.from(t);
            })(t) ||
            (function (t, e) {
              if (t) {
                if ('string' == typeof t) return i(t, e);
                var r = Object.prototype.toString.call(t).slice(8, -1);
                return (
                  'Object' === r && t.constructor && (r = t.constructor.name),
                  'Map' === r || 'Set' === r
                    ? Array.from(t)
                    : 'Arguments' === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                    ? i(t, e)
                    : void 0
                );
              }
            })(t) ||
            (function () {
              throw new TypeError(
                'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
              );
            })()
          );
        }
        function i(t, e) {
          (null == e || e > t.length) && (e = t.length);
          for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
          return n;
        }
        r.r(e),
          r.d(e, {
            getDurationBeforeCuts: () => a,
            getDurationAfterCuts: () => s,
            getTimeBeforeCuts: () => o,
            getTimeAfterCuts: () => l,
            getCurrentTimeAfterCuts: () => u,
            getCuts: () => d,
          });
        var a = function (t) {
            var e = t.attributes;
            return null != e.duration
              ? e.duration
              : 2 <= t.video.readyState
              ? t.video.duration
              : void 0;
          },
          s = function (t) {
            var e = d(t),
              r = a(t);
            if (1 > e.length) return r;
            var n = r;
            return (
              e.forEach(function (t) {
                n -= t.end - t.start;
              }),
              n
            );
          },
          o = function (t, e) {
            var r = a(t),
              n = d(t),
              i = 0,
              s = 0,
              o = 0;
            return (
              n.forEach(function (t) {
                var r = t.start - s;
                if ((o += r) <= e + i) {
                  var n = t.end - t.start;
                  (i += n), (o += n);
                }
                s = t.end;
              }),
              Math.min(r, e + i)
            );
          },
          l = function (t, e) {
            var r = d(t);
            if (1 > r.length) return e;
            var n = e;
            return (
              r.forEach(function (t) {
                t.start <= e && (n -= Math.min(e, t.end) - t.start);
              }),
              Math.max(0, n)
            );
          },
          u = function (t) {
            return l(t, t.video.currentTime);
          },
          c = Object.freeze([]),
          d = function (t) {
            var e = t.attributes,
              r = e.cuts,
              n = e.trimStart,
              i = e.trimEnd;
            if (t._cuts && r === t._rawCuts) return t._cuts;
            if (!r && null == n && null == i) return c;
            (t._rawCuts = r), (t._cuts = f(t));
            var a = { start: t.attributes.trimStart, end: t.attributes.trimEnd };
            return (t._cuts = h(t, a, t._cuts)), Object.freeze(t._cuts), t._cuts;
          },
          f = function (t) {
            var e = a(t),
              r = t.attributes,
              n = r.cuts,
              i = r.trimStart,
              s = r.trimEnd;
            if (!n) return [];
            var o = n
              .map(function (r) {
                var n = null == r.start ? 0 : v(t, r.start),
                  i = null != r.end && -1 !== r.end ? v(t, r.end) : e;
                return i > n ? { start: n, end: i } : null;
              })
              .filter(Boolean);
            null != i && o.push({ start: 0, end: i }),
              null != s && o.push({ start: s, end: e }),
              (o = o.sort(function (t, e) {
                return t.start - e.start;
              }));
            var l = { start: 0, end: 0 };
            return (o = o
              .map(function (t) {
                return t.end < l.end ? null : (t.start < l.end && (t.start = l.end), (l = t), t);
              })
              .filter(Boolean));
          },
          h = function (t, e, r) {
            var i = n(r),
              s = a(t),
              o = e.start,
              l = e.end,
              u = i[0],
              c = i[i.length - 1],
              d = u && (0 === u.start || 0 > u.start) ? u : void 0,
              f = c && (c.end >= s || 0 > c.end) ? c : void 0;
            if (null != o)
              if (0 <= o) {
                var h = { start: 0, end: o };
                d ? i.splice(0, 1, h) : i.unshift(h);
              } else d && i.shift();
            if (null != l)
              if (0 <= l) {
                var v = { start: l, end: s };
                f ? i.splice(i.length - 1, 1, v) : i.push(v);
              } else f && i.pop();
            return i;
          },
          v = function (t, e) {
            var r = a(t);
            return Math.min(r, Math.max(0, e));
          };
      },
      341: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { getDiagnosticData: () => i });
        var n = function (t) {
            try {
              return t();
            } catch (t) {
              return 'ERROR: '.concat(t.message);
            }
          },
          i = function (t) {
            var e = {};
            return (
              (e.state = t.state),
              (e.attributes = t.attributes),
              (e.currentAsset = t.currentAsset()),
              e.currentAsset &&
                e.currentAsset.url &&
                100 < e.currentAsset.url.length &&
                (e.currentAsset.url = ''.concat(e.currentAsset.url.substring(0, 97), '...')),
              (e.selectedAsset = t.selectedAsset()),
              e.selectedAsset &&
                e.selectedAsset.url &&
                100 < e.selectedAsset.url.length &&
                (e.selectedAsset.url = ''.concat(e.selectedAsset.url.substring(0, 97), '...')),
              (e.getState = n(function () {
                return t.getState();
              })),
              (e.getDuration = n(function () {
                return t.getDuration();
              })),
              (e.getPlaybackRate = n(function () {
                return t.getPlaybackRate();
              })),
              (e.getPlaybackMode = n(function () {
                return t.getPlaybackMode();
              })),
              (e.isSeeking = n(function () {
                return t.isSeeking();
              })),
              (e.getCurrentTime = n(function () {
                return t.getCurrentTime();
              })),
              (e.activeBufferRange = n(function () {
                return t.activeBufferRange();
              })),
              (e.sequentialBufferedRange = n(function () {
                return t.sequentialBufferedRange();
              })),
              (e.getVolume = n(function () {
                return t.getVolume();
              })),
              (e.timeBeforeEndOfBuffer = n(function () {
                return t.timeBeforeEndOfBuffer();
              })),
              (e.lastBufferedTime = n(function () {
                return t.lastBufferedTime();
              })),
              (e.totalBuffered = n(function () {
                return t.totalBuffered();
              })),
              (e.anyBuffered = n(function () {
                return t.anyBuffered();
              })),
              (e.getPreload = n(function () {
                return t.getPreload();
              })),
              (e.rawVideoProps = n(function () {
                return s(t);
              })),
              e
            );
          },
          a = [
            'autoplay',
            'controls',
            'crossOrigin',
            'currentSrc',
            'currentTime',
            'defaultMuted',
            'defaultPlaybackRate',
            'duration',
            'ended',
            'error',
            'loop',
            'muted',
            'networkState',
            'paused',
            'playbackRate',
            'preload',
            'readyState',
            'seeking',
            'src',
            'startDate',
            'volume',
          ],
          s = function (t) {
            for (var e = t.video, r = {}, n = 0; n < a.length; n++) {
              var i = a[n],
                s = e[i];
              r[i] = s;
            }
            return r;
          };
      },
      339: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { fixWebkitControlsBug: () => l });
        var n = r(1),
          i = n.default.lib('utilities/detect').cachedDetect,
          a = n.default.lib('utilities/wlog').wlog,
          s = i(),
          o = a.getPrefixedFunctions('SimpleVideo'),
          l = function (t) {
            var e = t.video;
            if (s.browser.webkit) {
              o.info('fixWebkitControlsBug');
              var r = e.getAttribute('controls');
              e.setAttribute('controls', 'controls'),
                e.removeAttribute('controls'),
                null != r && e.setAttribute('controls', r);
            }
          };
      },
      326: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            createElement: () => v,
            setupVideoElemAttributes: () => p,
            inferTypeAttribute: () => m,
            srcProtocolAndHost: () => y,
            tinyMp4Url: () => b,
            sumTimeRanges: () => E,
            bufferedInfo: () => T,
            properAssetUrl: () => A,
          });
        var n = r(1),
          i = n.default.lib('utilities/detect').cachedDetect,
          a = n.default.lib('player/lib/elem').elemFromObject,
          s = n.default.lib('utilities/url').Url,
          o = n.default.lib('player/lib/assets').isBakeryUrl,
          l = n.default.lib('player/lib/hosts'),
          u = l.eV1Protocol,
          c = l.eV1Host,
          d = l.deliveryHost,
          f = i(),
          h = ''.concat(u(), '//').concat(c(), '/assets/images/blank.gif'),
          v = function (t, e, r) {
            var n = {
              tagName: 'video',
              id: t,
              crossorigin: 'anonymous',
              style: {
                background: 'transparent',
                display: 'block',
                height: '100%',
                maxHeight: 'none',
                maxWidth: 'none',
                position: 'static',
                visibility: 'visible',
                width: '100%',
              },
            };
            (f.browser.msie || f.trident) &&
              ((n.style.minWidth = '10px'), (n.style.minHeight = '10px'));
            var i = { tagName: 'source', src: A(e.url), type: m(e, r) };
            return r.excludeSourceElem || (n.childNodes = [i]), p(a(n), e, r);
          },
          g = function (t, e, r) {
            null != r && !1 !== r
              ? !0 === r
                ? ((t[e] = !0), t.setAttribute(e, ''))
                : ((t[e] = r), t.setAttribute(e, r))
              : ((t[e] = !1), t.removeAttribute(e));
          },
          p = function (t, e, r) {
            return (
              r.poster
                ? ((t.poster = r.poster), t.setAttribute('poster', r.poster))
                : ((t.poster = h), t.setAttribute('poster', h)),
              g(t, 'aria-label', 'Video'),
              g(t, 'src', A(e.url)),
              g(t, 'controlslist', r.controlslist || 'nodownload'),
              g(t, 'playsinline', r.playsinline),
              g(t, 'muted', r.muted),
              g(t, 'loop', r.loop),
              g(t, 'controls', null != r.controls && r.controls),
              g(t, 'preload', r.preload || 'none'),
              g(t, 'type', m(e, r)),
              g(t, 'x-webkit-airplay', null == r.webkitAirplay ? 'allow' : r.webkitAirplay),
              null != r.volume && (t.volume = r.volume),
              r.disablePictureInPicture &&
                g(t, 'disablePictureInPicture', r.disablePictureInPicture),
              t
            );
          },
          m = function (t, e) {
            if (null != e.contentType) return e.contentType;
            var r = 'video/'.concat(t.ext);
            return e.spherical && (r += ';dimension=360;'), r;
          },
          y = function (t) {
            if (o(t)) {
              var e = new s(t);
              if (e.protocol) return ''.concat(e.protocol, '//').concat(e.host);
            }
            return ''.concat(u(), '//').concat(d(u()));
          },
          b = function (t) {
            return ''.concat(y(t), '/tiny.mp4');
          },
          E = function (t) {
            if (null == t) return null;
            for (var e = 0, r = 0; r < t.length; r++) e += t.end(r) - t.start(r);
            return e;
          },
          T = function (t, e, r) {
            var n,
              i,
              a,
              s,
              o,
              l = [];
            for (
              t.sort(function (t, e) {
                var r = t.start - e.start;
                return r || e.end - t.end;
              }),
                o = 0;
              o < t.length;
              o++
            ) {
              var u = l.length;
              if (u) {
                var c = l[u - 1].end;
                t[o].start - c < r ? t[o].end > c && (l[u - 1].end = t[o].end) : l.push(t[o]);
              } else l.push(t[o]);
            }
            for (o = 0, n = 0, i = a = e; o < l.length; o++) {
              var d = l[o].start,
                f = l[o].end;
              if (e + r >= d && e < f) (i = d), (n = (a = f) - e);
              else if (e + r < d) {
                s = d;
                break;
              }
            }
            return { len: n, start: i, end: a, nextStart: s };
          },
          A = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'mp4';
            return o(t) && /\.bin$/.test(t) ? t.replace(/\.bin$/, '') + '/file.'.concat(e) : t;
          };
      },
      325: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { default: () => D });
        var n = r(1),
          i = r(326),
          a = r(327),
          s = r(328),
          o = r(333),
          l = r(334),
          u = r(330),
          c = r(339),
          d = r(329),
          f = r(340),
          h = r(341),
          v = r(335),
          g = r(342),
          p = r(331),
          m = r(324),
          y = r(332);
        function b(t, e) {
          if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
        }
        function E(t, e) {
          for (var r, n = 0; n < e.length; n++)
            ((r = e[n]).enumerable = r.enumerable || !1),
              (r.configurable = !0),
              'value' in r && (r.writable = !0),
              Object.defineProperty(t, r.key, r);
        }
        var T = n.default.lib('utilities/bindify').bindify,
          A = n.default.lib('utilities/obj'),
          S = n.default.lib('player/lib/assets'),
          L = n.default.lib('utilities/seqid').seqId,
          _ = n.default.lib('promiscuous'),
          k = (function () {
            function t(e, r) {
              var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
                i = 3 < arguments.length ? arguments[3] : void 0;
              b(this, t),
                (this.uuid = L('wistia_simple_video_')),
                (this.root = e),
                (this.state = {}),
                v.setupProperties(this, r, n),
                i ? v.fromOtherEngine(this, i) : v.injectVideo(this),
                c.fixWebkitControlsBug(this),
                v.setupBindingsAndLoops(this),
                f.fit(this);
            }
            return (
              (e = t),
              (r = [
                {
                  key: 'activeBufferRange',
                  value: function () {
                    return a.activeBufferRange(this);
                  },
                },
                {
                  key: 'anyBuffered',
                  value: function () {
                    return a.anyBuffered(this);
                  },
                },
                {
                  key: 'cancelFullscreen',
                  value: function () {
                    return u.cancelFullscreen(this);
                  },
                },
                {
                  key: 'captureCurrentFrame',
                  value: function () {
                    for (var t = arguments.length, e = Array(t), r = 0; r < t; r++)
                      e[r] = arguments[r];
                    return u.captureCurrentFrame.apply(u, [this].concat(e));
                  },
                },
                {
                  key: 'changeQuality',
                  value: function (t) {
                    return l.changeQuality(this, t);
                  },
                },
                {
                  key: 'changeStream',
                  value: function (t) {
                    return l.changeStream(this, t);
                  },
                },
                {
                  key: 'changeStreamWithoutLoad',
                  value: function (t) {
                    return l.changeStreamWithoutLoad(this, t);
                  },
                },
                {
                  key: 'changeVideo',
                  value: function (t, e) {
                    return l.changeVideo(this, t, e);
                  },
                },
                {
                  key: 'currentAsset',
                  value: function () {
                    return this._currentAsset;
                  },
                },
                {
                  key: 'defaultAsset',
                  value: function () {
                    return this.selectableAssets()[0];
                  },
                },
                {
                  key: 'destroy',
                  value: function () {
                    var t = this.state || {};
                    (this.state = {
                      eventContext: t.eventContext,
                      destroyed: !0,
                      issuedPlay: t.issuedPlay,
                    }),
                      v.killBindingsAndStopLoops(this),
                      (this._bindings = {});
                  },
                },
                {
                  key: 'diagnosticData',
                  value: function () {
                    return h.getDiagnosticData(this);
                  },
                },
                {
                  key: 'eventContext',
                  value: function () {
                    return this.state.eventContext;
                  },
                },
                {
                  key: 'fit',
                  value: function () {
                    return f.fit(this);
                  },
                },
                {
                  key: 'hasIssuedPlay',
                  value: function () {
                    return !!this.state.issuedPlay;
                  },
                },
                {
                  key: 'getAudioTracks',
                  value: function () {
                    return [];
                  },
                },
                {
                  key: 'getCurrentQuality',
                  value: function () {
                    var t = this.currentAsset();
                    if (t) return S.numericSizeSnapped(t.width, t.height);
                    var e = this.selectedAsset();
                    return e ? S.numericSizeSnapped(e.width, e.height) : '?';
                  },
                },
                {
                  key: 'getCurrentTime',
                  value: function () {
                    return u.getCurrentTime(this);
                  },
                },
                {
                  key: 'getCuts',
                  value: function () {
                    return (0, y.getCuts)(this);
                  },
                },
                {
                  key: 'getDuration',
                  value: function () {
                    return u.getDuration(this);
                  },
                },
                {
                  key: 'getMediaElement',
                  value: function () {
                    return this.video;
                  },
                },
                {
                  key: 'getMediaType',
                  value: function () {
                    return this.mediaData.mediaType;
                  },
                },
                {
                  key: 'getPlaybackMode',
                  value: function () {
                    return d.getPlaybackMode(this);
                  },
                },
                {
                  key: 'getPlaybackRate',
                  value: function () {
                    return u.getPlaybackRate(this);
                  },
                },
                {
                  key: 'getPreload',
                  value: function () {
                    return u.getPreload(this);
                  },
                },
                {
                  key: 'getState',
                  value: function () {
                    return u.getState(this);
                  },
                },
                {
                  key: 'getDurationBeforeCuts',
                  value: function () {
                    return (0, y.getDurationBeforeCuts)(this);
                  },
                },
                {
                  key: 'getTimeAfterCuts',
                  value: function (t) {
                    return (0, y.getTimeAfterCuts)(this, t);
                  },
                },
                {
                  key: 'getTimeBeforeCuts',
                  value: function (t) {
                    return (0, y.getTimeBeforeCuts)(this, t);
                  },
                },
                {
                  key: 'getTrim',
                  value: function () {
                    return (0, p.getTrim)(this);
                  },
                },
                {
                  key: 'getVolume',
                  value: function () {
                    return u.getVolume(this);
                  },
                },
                {
                  key: 'isChangingVideo',
                  value: function () {
                    return l.isChangingVideo(this);
                  },
                },
                {
                  key: 'isInFullscreen',
                  value: function () {
                    return u.isInFullscreen(this);
                  },
                },
                {
                  key: 'isInitializingFromUnmuted',
                  value: function () {
                    return u.isInitializingFromUnmuted(this);
                  },
                },
                {
                  key: 'isMuted',
                  value: function () {
                    return u.isMuted(this);
                  },
                },
                {
                  key: 'isSeeking',
                  value: function () {
                    return s.isSeeking(this);
                  },
                },
                {
                  key: 'isSourceOfBrowserEvent',
                  value: function (t) {
                    return u.isSourceOfBrowserEvent(this, t);
                  },
                },
                {
                  key: 'lastBufferedTime',
                  value: function (t) {
                    return a.lastBufferedTime(this, t);
                  },
                },
                {
                  key: 'mute',
                  value: function () {
                    return u.mute(this);
                  },
                },
                {
                  key: 'onEnterFullscreen',
                  value: function () {
                    return u.onEnterFullscreen(this);
                  },
                },
                {
                  key: 'onHeightChange',
                  value: function (t) {
                    return f.onHeightChange(this, t);
                  },
                },
                {
                  key: 'onLeaveFullscreen',
                  value: function () {
                    return u.onLeaveFullscreen(this);
                  },
                },
                {
                  key: 'onReady',
                  value: function () {
                    return o.onReady(this);
                  },
                },
                {
                  key: 'onWidthChange',
                  value: function (t) {
                    return f.onWidthChange(this, t);
                  },
                },
                {
                  key: 'pause',
                  value: function () {
                    return u.pause(this);
                  },
                },
                {
                  key: 'play',
                  value: function (t) {
                    console.warn('hls_video simple play()');
                    var r = u.play(this, t);
                    return r;
                  },
                },
                {
                  key: 'playType',
                  value: function () {
                    return u.playType(this);
                  },
                },
                {
                  key: 'requestFullscreen',
                  value: function () {
                    return u.requestFullscreen(this);
                  },
                },
                {
                  key: 'reset',
                  value: function () {
                    this.state = {};
                  },
                },
                {
                  key: 'seek',
                  value: function (t, e) {
                    return s.seek(this, t, e);
                  },
                },
                {
                  key: 'seekOnPlay',
                  value: function (t) {
                    return s.seekOnPlay(this, t);
                  },
                },
                {
                  key: 'selectedAsset',
                  value: function () {
                    return this._currentAsset;
                  },
                },
                {
                  key: 'selectableAssets',
                  value: function () {
                    return this.allAssets;
                  },
                },
                {
                  key: 'selectableQualities',
                  value: function () {
                    return this.selectableAssets()
                      .map(function (t) {
                        return 'variable' === t.width
                          ? t.slug
                          : S.numericSizeSnapped(t.width, t.height);
                      })
                      .sort(function (t, e) {
                        return ('auto' === t ? -1 : t) - ('auto' === e ? -1 : e);
                      });
                  },
                },
                {
                  key: 'selectedQuality',
                  value: function () {
                    var t = this.selectedAsset();
                    return t ? S.numericSizeSnapped(t.width, t.height) : '?';
                  },
                },
                {
                  key: 'sequentialBufferedRange',
                  value: function () {
                    return a.sequentialBufferedRange(this);
                  },
                },
                {
                  key: 'setAttributes',
                  value: function (t) {
                    A.assign(this.attributes, t);
                  },
                },
                { key: 'onMediaDataChanged', value: function () {} },
                {
                  key: 'onPlayed',
                  value: function () {
                    var t = this,
                      e = this.state;
                    return e && e.hasPlayed
                      ? _.resolve()
                      : new _(function (e) {
                          t.bind('playing', function r() {
                            t.unbind('playing', r), e();
                          });
                        });
                  },
                },
                {
                  key: 'setCurrentTime',
                  value: function (t) {
                    return u.setCurrentTime(this, t);
                  },
                },
                {
                  key: 'setCuts',
                  value: function (t) {
                    return (0, p.setCuts)(this, t);
                  },
                },
                {
                  key: 'setPlaybackRate',
                  value: function (t) {
                    return u.setPlaybackRate(this, t);
                  },
                },
                {
                  key: 'setTrim',
                  value: function (t) {
                    return (0, p.setTrim)(this, t);
                  },
                },
                {
                  key: 'setVolume',
                  value: function (t) {
                    return u.setVolume(this, t);
                  },
                },
                {
                  key: 'showFirstFrame',
                  value: function () {
                    return s.seek(this, 0.01);
                  },
                },
                {
                  key: 'canDownloadMedia',
                  value: function () {
                    return !0;
                  },
                },
                {
                  key: 'stopStreaming',
                  value: function () {
                    return l.stopStreaming(this);
                  },
                },
                {
                  key: 'timeBeforeEndOfBuffer',
                  value: function (t) {
                    return a.timeBeforeEndOfBuffer(this, t);
                  },
                },
                {
                  key: 'totalBuffered',
                  value: function () {
                    return a.totalBuffered(this);
                  },
                },
                {
                  key: 'totalPlayed',
                  value: function () {
                    return i.sumTimeRanges(this.video.played);
                  },
                },
                {
                  key: 'unmute',
                  value: function () {
                    return u.unmute(this);
                  },
                },
                { key: 'updateStartPosition', value: function () {} },
              ]) && E(e.prototype, r),
              n && E(e, n),
              t
            );
            var e, r, n;
          })();
        T(k.prototype),
          (k.delegatePublicMethods = g.delegatePublicMethods),
          (k.PUBLIC_METHODS = g.PUBLIC_METHODS),
          (k.mediaDataWithAssets = function (t, e) {
            var r = A.clone(t);
            return (r.assets = A.clone(e)), r;
          }),
          (0, m.default)('SimpleVideo', k),
          n.default.define('player/engines/simple_video/index.js', k);
        const D = k;
      },
      335: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            setupProperties: () => u,
            injectVideo: () => c,
            fromOtherEngine: () => d,
            setupBindingsAndLoops: () => f,
            killBindingsAndStopLoops: () => h,
          });
        var n = r(326),
          i = r(336),
          a = r(337),
          s = r(338),
          o = r(331),
          l = r(1).default.lib('player/lib/elem').elemAppend,
          u = function (t, e, r) {
            var n = e.assets;
            0 === n.length && (n = [{}]), (t.mediaData = e), (t.allAssets = n), (t.attributes = r);
          },
          c = function (t) {
            (t._currentAsset = t.defaultAsset()),
              (t.video = n.createElement(t.uuid, t._currentAsset, t.attributes)),
              t.onReady(),
              l(t.root, t.video);
          },
          d = function (t, e) {
            var r = e.isMuted(),
              i = e.hasIssuedPlay();
            'Audio' === e.mediaData.mediaType ? c(t) : (t.video = e.getMediaElement()),
              t.onReady(),
              t.bind('loadstart', function () {
                return (
                  setTimeout(function () {
                    t.state.isInitializingFromOtherEngine = !1;
                  }, 0),
                  t.unbind
                );
              }),
              n.setupVideoElemAttributes(t.video, t.defaultAsset(), t.attributes),
              (t.state.eventContext = e.eventContext()),
              t.root.appendChild(t.video),
              (t._currentAsset = t.defaultAsset()),
              t.changeStreamWithoutLoad(t.defaultAsset()),
              (t.state.isInitializingFromOtherEngine = !0),
              (t.state.otherEngineWasMuted = r),
              (t.state.otherEnginePlayed = i),
              t.video.load();
          },
          f = function (t) {
            a.setup(t), (0, o.enforceCuts)(t), s.setup(t), i.setup(t);
          },
          h = function (t) {
            s.teardown(t), (0, o.teardownCuts)(t), i.teardown(t), a.teardown(t);
          };
      },
      340: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { onWidthChange: () => c, onHeightChange: () => d, fit: () => v });
        var n = r(1),
          i = n.default.lib('player/lib/elem'),
          a = i.elemStyle,
          s = i.elemWidth,
          o = i.elemHeight,
          l = n.default.lib('player/lib/assets'),
          u = (0, n.default.lib('utilities/detect').cachedDetect)(),
          c = function (t, e) {
            return t.setAttributes({ width: e }), v(t);
          },
          d = function (t, e) {
            return t.setAttributes({ height: e }), v(t);
          },
          f = 'contain',
          h = 'fill',
          v = function (t) {
            var e = t.attributes.fitStrategy || g(t);
            return e === f ? m(t) : 'cover' === e ? p(t) : e === h ? y(t) : m(t);
          },
          g = function (t) {
            var e = t.attributes.height,
              r = t.attributes.width,
              n = l.originalAspect(t.allAssets),
              i = e * n,
              a = 2 * Math.floor(r / n / 2),
              s = Math.abs(a - e),
              o = Math.abs(i - r),
              c = u.firefox && u.browser.mozilla && 36 <= u.browser.version;
            return (u.browser.webkit || c) && 0 < s && 10 >= s && 0 < o && 10 >= o ? h : f;
          },
          p = function (t) {
            var e = t.video,
              r = l.videoAspect(t.allAssets),
              n = s(t.root) / o(t.root);
            u.trident || u.edge || u.browser.msie
              ? a(
                  e,
                  n <= r
                    ? {
                        height: '100%',
                        left: '50%',
                        objectFit: 'contain',
                        position: 'relative',
                        top: '50%',
                        transform: 'translate(-50%,-50%)',
                        width: '1920px',
                      }
                    : {
                        height: '1088px',
                        left: '50%',
                        objectFit: 'contain',
                        position: 'relative',
                        top: '50%',
                        transform: 'translate(-50%,-50%)',
                        width: '100%',
                      }
                )
              : a(e, { objectFit: 'cover' });
          },
          m = function (t) {
            var e = t.video;
            a(e, { objectFit: 'contain', height: '100%', width: '100%' });
          },
          y = function (t) {
            var e = t.video;
            a(e, { objectFit: 'fill', height: '100%', width: '100%' });
          };
      },
      333: (t, e, r) => {
        'use strict';
        r.r(e);
        r.d(e, { onReady: () => s });
        var n = r(1);
        var i = n.default.lib('promiscuous');
        var a = n.default.lib('utilities/wlog').wlog.getPrefixedFunctions('SimpleVideo');
        var s = function (t) {
          var e = t.video;
          if (null == t.state) {
            t.state = {};
          }
          var r = t.state;

          return (
            r.onReadyPromise ||
              (r.onReadyPromise = new i(function (n) {
                if (r.hasBeenReady) {
                  n();
                } else if (2 <= e.readyState) {
                  a.info('ready readyState', e.src, e.readyState), (r.hasBeenReady = !0), n();
                } else {
                  t.bind('loadstart', function () {
                    a.info('ready loadstart'), (r.hasBeenReady = !0), n();
                  });
                }
              })),
            r.onReadyPromise
          );
        };
      },
      329: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            BEFORE_PLAY: () => i,
            ENDED: () => a,
            PAUSED: () => s,
            PLAYING: () => o,
            UNKNOWN: () => l,
            getPlaybackMode: () => u,
          });
        var n = r(1).default.lib('utilities/wlog').wlog.getPrefixedFunctions('SimpleVideo'),
          i = 'beforeplay',
          a = 'ended',
          s = 'paused',
          o = 'playing',
          l = 'unknown',
          u = function (t) {
            var e = t.video;
            try {
              return t.state.hasPlayed ? (t.state.fakeEnded || e.ended ? a : e.paused ? s : o) : i;
            } catch (t) {
              return n.warn(t), l;
            }
          };
      },
      338: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { setup: () => o, teardown: () => l });
        var n = r(1).default.lib('player/lib/elem'),
          i = n.elemBind,
          a = n.elemUnbind,
          s = [
            'beforeplay',
            'ended',
            'error',
            'loadeddata',
            'loadedmetadata',
            'loadstart',
            'pause',
            'playing',
            'progress',
            'ratechange',
            'seeked',
            'volumechange',
            'timeupdate',
            'waiting',
            'webkitbeginfullscreen',
            'webkitendfullscreen',
            'webkitplaybacktargetavailabilitychanged',
          ],
          o = function (t) {
            for (var e, r = 0; r < s.length; r++)
              (e = s[r]),
                (function (e, r) {
                  var n = '_marshalEvent_'.concat(r);
                  (t[n] =
                    t[n] ||
                    function (n) {
                      null == t.state && (t.state = {}),
                        ('playing' === r && ('playing' !== r || e.paused)) ||
                          ((t.state.eventContext = n),
                          t.trigger(r, n),
                          (t.state.eventContext = null));
                    }),
                    i(e, r, t[n]);
                })(t.video, e);
          },
          l = function (t) {
            for (var e = 0; e < s.length; e++) {
              var r = s[e],
                n = '_marshalEvent_'.concat(r);
              a(t.video, r, t[n]);
            }
          };
      },
      328: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            seek: () => h,
            seekWithoutCuts: () => v,
            seekOnPlay: () => m,
            isSeeking: () => b,
          });
        var n = r(329),
          i = r(1),
          a = r(330),
          s = r(332),
          o = i.default.lib('promiscuous'),
          l = i.default.lib('utilities/obj').assign,
          u = i.default.lib('player/lib/elem'),
          c = u.elemBind,
          d = u.elemUnbind,
          f = i.default.lib('utilities/wlog').wlog.getPrefixedFunctions('SimpleVideo'),
          h = function (t, e, r) {
            var n = (0, s.getTimeBeforeCuts)(t, e);
            return v(t, n, r);
          },
          v = function (t, e, r) {
            return (
              f.info('seek', e), t.getPlaybackMode() === n.BEFORE_PLAY ? g(t, e, r) : p(t, e, r)
            );
          },
          g = function (t, e) {
            var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
              n = t.video;
            return (
              f.info('seekBeforePlay', e),
              new o(function (i, s) {
                f.info('time '.concat(e, ': seek beforeplay'));
                var u = 'playing' === t.getPlaybackMode();
                (n.style.visibility = 'hidden'),
                  l(t.state, { seeking: !0 }),
                  f.info('time '.concat(e, ': start stream by calling play')),
                  (0, a.playWithoutCuts)(t)
                    .then(function (s) {
                      f.info('time '.concat(e, ': jump to time after playing')),
                        (n.currentTime = e);
                      var c = new o(function (n) {
                        u || !1 === r.pause
                          ? (f.info('time: '.concat(e, ': play after seek')), n())
                          : (f.info('time: '.concat(e, ': pause after seek')),
                            (0, a.pause)(t).then(n));
                      });
                      y(t).then(function () {
                        c.then(function () {
                          (n.style.visibility = 'inherit'), l(t.state, { seeking: !1 }), i(s);
                        });
                      });
                    })
                    .catch(function (e) {
                      (n.style.visibility = 'inherit'), l(t.state, { seeking: !1 }), s(e);
                    });
              })
            );
          },
          p = function (t, e) {
            return (
              f.info('seekNow', e),
              new o(function (r) {
                f.info('seekNow: start', e),
                  (t.video.currentTime = e),
                  l(t.state, { seeking: !0 }),
                  y(t).then(function () {
                    l(t.state, { seeking: !1 }), f.info('seekNow: resolve', e), r();
                  });
              })
            );
          },
          m = function (t, e) {
            return new o(function (r) {
              'playing' === t.getPlaybackMode()
                ? p(t, e).then(r)
                : t.bind('playing', function () {
                    return p(t, e).then(r), t.unbind;
                  });
            });
          },
          y = function (t) {
            var e = t.video;
            return new o(function (t) {
              e.seeking
                ? (f.info('waiting for seek'),
                  c(e, 'seeked', function () {
                    return f.info('seeked'), t(), d;
                  }))
                : (f.info('no wait for seek'), t());
            });
          },
          b = function (t) {
            var e = t.state,
              r = t.video;
            return !(!e.seeking && !r.seeking);
          };
      },
      330: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            play: () => A,
            playWithoutCuts: () => S,
            playType: () => L,
            pause: () => _,
            setCurrentTime: () => k,
            setCurrentTimeWithoutCuts: () => D,
            getCurrentTime: () => w,
            getState: () => R,
            setVolume: () => C,
            getVolume: () => x,
            supportsPlaybackRate: () => I,
            setPlaybackRate: () => O,
            getPlaybackRate: () => P,
            getDuration: () => F,
            isSourceOfBrowserEvent: () => M,
            isMuted: () => B,
            getPreload: () => N,
            mute: () => U,
            unmute: () => j,
            onEnterFullscreen: () => G,
            onLeaveFullscreen: () => H,
            isInitializingFromUnmuted: () => V,
            isInFullscreen: () => W,
            onWidthChange: () => K,
            onHeightChange: () => q,
            requestFullscreen: () => z,
            cancelFullscreen: () => Y,
            captureCurrentFrame: () => X,
          });
        var n = r(331),
          i = r(1),
          a = r(332),
          s = i.default.lib('promiscuous'),
          o = i.default.lib('player/lib/elem'),
          l = o.elemUnbind,
          u = o.safeRequestAnimationFrame,
          c = o.elemRequestFullscreen,
          d = o.elemCancelFullscreen,
          f = o.inUserEventContext,
          h = i.default.lib('utilities/wlog').wlog,
          v = i.default.lib('utilities/detect').cachedDetect,
          g = i.default.lib('utilities/obj').merge,
          p = h.getPrefixedFunctions('SimpleVideo'),
          m = v(),
          y = 'play',
          b = 'play-silently',
          E = 'cannot-play',
          T = function () {
            return m.chrome || m.firefox || m.edge || m.trident
              ? 'probably'
              : !!(m.safari || (m.ios.version && 12 <= m.ios.version)) && 'maybe';
          },
          A = function (t, e) {
            var r = (0, n.trimStartFromCuts)(t);

            if (t.state.fakeEnded || t.video.currentTime < r) {
              return new s(function (r, n) {
                t.seek(0, { pause: !1 })
                  .then(function (i) {
                    S(t, g({}, e, { playType: y }))
                      .then(function () {
                        r(i);
                      })
                      .catch(n);
                  })
                  .catch(n);
              });
            }

            return S(t, e);

            // return t.state.fakeEnded || t.video.currentTime < r
            //   ? new s(function (r, n) {
            //       t.seek(0, { pause: !1 })
            //         .then(function (i) {
            //           S(t, g({}, e, { playType: y }))
            //             .then(function () {
            //               r(i);
            //             })
            //             .catch(n);
            //         })
            //         .catch(n);
            //     })
            //   : S(t, e);
          },
          S = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
            var r = t.video;
            var n = e.playType || L(t, e);

            if (null == t.state.issuedPlay && n !== E) {
              t.state.issuedPlay = !0;
            }

            return (
              // null == t.state.issuedPlay && n !== E && (t.state.issuedPlay = !0),
              new s(function (i, a) {
                t.state.lastPlayRejected = !1;
                var s = t.getPlaybackMode();

                console.warn('play: start', n, s);

                if ('playing' === s) {
                  console.warn('play: already playing, resolve'), i(y);
                } else if (n === E) {
                  a(new Error('Cannot issue play.'));
                  console.error('Cannot issue play');
                } else {
                  if (n === b) {
                    t.mute();
                  }
                  // n === b && t.mute(),
                  t.trigger('beforeplay');
                  // 'ended' === s && 0 < m.ios.version && r.load();
                  if ('ended' === s && 0 < m.ios.version) {
                    r.load();
                  }

                  console.warn('video.play()-------------------------', r.src);

                  var o = r.play();

                  if (o && o.then && o.catch) {
                    o.then(function () {
                      p.info('play: got', n, 'resolve'), i(n);
                    }).catch(function (s) {
                      p.notice(s), (t.state.lastPlayRejected = !0);
                      var o =
                        null == e.silentAutoPlay ? t.attributes.silentAutoPlay : e.silentAutoPlay;
                      n !== y || t.isMuted() || ('allow' !== o && null != o)
                        ? (p.notice('play: rejected'), a(s))
                        : (t.mute(),
                          r
                            .play()
                            .then(function () {
                              p.info('play: got silent fallback, resolve'), i(b);
                            })
                            .catch(function (e) {
                              t.unmute(), a(e);
                            }));
                    });
                  } else {
                    setTimeout(function () {
                      m.ios.version &&
                        10.1 > m.ios.version &&
                        r.paused &&
                        a(new Error('Video still paused after play issued.'));
                    }, 10);
                    t.bind('playing', function () {
                      return p.info('play: got playing, resolve'), i(n), l;
                    });
                  }
                }
              })
            );
          },
          L = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
            if ('playing' === t.getPlaybackMode()) return y;
            if (t.isInitializingFromUnmuted()) return y;
            if (f()) return y;
            var r = t.attributes,
              n = null == e.silentAutoPlay ? r.silentAutoPlay : e.silentAutoPlay;
            return !0 === n
              ? t.isMuted()
                ? y
                : b
              : !1 === n
              ? y
              : 'allow' === n || null == n
              ? T() || t.isMuted()
                ? y
                : b
              : y;
          },
          _ = function (t) {
            var e = t.video;
            return (
              p.info('pause'),
              new s(function (t) {
                p.info('pause: start'),
                  e.pause(),
                  u(function () {
                    p.info('pause: resolve'), t();
                  });
              })
            );
          },
          k = function (t, e) {
            var r = (0, a.getTimeBeforeCuts)(t, e);
            return D(t, r);
          },
          D = function (t, e) {
            p.info('setCurrentTime', e), (t.video.currentTime = e);
          },
          w = function (t) {
            return (0, n.getCurrentTimeAfterCuts)(t);
          },
          R = function (t) {
            return {
              playbackMode: t.getPlaybackMode(),
              currentTime: t.getCurrentTime(),
              volume: t.getVolume(),
              playbackRate: t.getPlaybackRate(),
            };
          },
          C = function (t, e) {
            p.info('setVolume', e), (t.video.volume = e);
          },
          x = function (t) {
            return t.video.volume;
          },
          I = function (t) {
            return null != t.video.playbackRate;
          },
          O = function (t, e) {
            p.info('setPlaybackRate', e),
              I(t)
                ? (t.video.playbackRate = e)
                : p.info('playbackRate is not supported on', t.video);
          },
          P = function (t) {
            return I(t) ? t.video.playbackRate : 1;
          },
          F = function (t) {
            return (0, n.getDurationAfterCuts)(t);
          },
          M = function (t, e) {
            return e.target == t.video;
          },
          B = function (t) {
            var e = t.video;
            return !!(
              e.muted ||
              (t.state.loadedMetadata && 0 === e.volume) ||
              (t.state.hasPlayed && e.audioTracks && 0 === e.audioTracks.length)
            );
          },
          N = function (t) {
            return t.video.getAttribute('preload');
          },
          U = function (t) {
            (t.video.muted = !0), t.video.setAttribute('muted', 'muted');
          },
          j = function (t) {
            (t.video.muted = !1), t.video.removeAttribute('muted');
          },
          G = function (t) {
            t.state.isInFullscreen = !0;
            var e = t.attributes.backgroundColor || '#000';
            t.video.style.backgroundColor = e;
          },
          H = function (t) {
            (t.state.isInFullscreen = !1), (t.video.style.backgroundColor = 'transparent');
          },
          V = function (t) {
            var e = t.state;
            return e.isInitializingFromOtherEngine && e.otherEnginePlayed && !e.otherEngineWasMuted;
          },
          W = function (t) {
            return !!t.state.isInFullscreen;
          },
          K = function (t) {},
          q = function (t) {},
          z = function (t) {
            t.setAttributes({ fitStrategy: 'contain' }), t.fit(), c(t.video);
          },
          Y = function (t) {
            t.setAttributes({ fitStrategy: 'auto' }), t.fit(), d(t.video);
          },
          X = function (t) {
            var e = t.video,
              r = document.createElement('canvas');
            (r.width = e.videoWidth),
              (r.height = e.videoHeight),
              r.getContext('2d').drawImage(e, 0, 0, r.width, r.height);
            for (var n = arguments.length, i = Array(1 < n ? n - 1 : 0), a = 1; a < n; a++)
              i[a - 1] = arguments[a];
            return r.toDataURL.apply(r, i);
          };
      },
      334: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            stopStreaming: () => v,
            changeQuality: () => g,
            changeStreamWithoutLoad: () => p,
            changeStream: () => m,
            changeVideo: () => b,
            initAfterChangeVideo: () => T,
            isChangingVideo: () => y,
            teardownBeforeChangeVideo: () => E,
          });
        var n = r(326),
          i = r(335),
          a = r(1),
          s = a.default.lib('promiscuous'),
          o = a.default.lib('utilities/wlog').wlog,
          l = a.default.lib('player/lib/elem'),
          u = l.elemInDom,
          c = l.elemBind,
          d = l.elemUnbind,
          f = a.default.lib('player/lib/assets'),
          h = o.getPrefixedFunctions('SimpleVideo'),
          v = function (t) {
            try {
              if (t.state.destroyed) return;
              h.info('stopStreaming');
              var e = t.video;
              (e.src = ''.concat(n.srcProtocolAndHost(e.getAttribute('src')), '/tiny.mp4')),
                e.load();
            } catch (t) {
              h.notice(t);
            }
          },
          g = function (t, e, r, n) {
            var i = t.selectableAssets(),
              a = f.findClosestAssetByQuality(i, e);
            return 'beforeplay' === t.getPlaybackMode() ? (p(t, a), s.resolve()) : m(t, a, r, n);
          },
          p = function (t, e) {
            h.info('changeStreamWithoutLoad', e && e.slug, e);
            var r = t.video;
            if (u(r)) {
              var i = n.properAssetUrl(e.url, e.container);
              (t.state = { eventContext: t.state.eventContext }),
                (t._currentAsset = e),
                (r.src = i);
              var a = (function (t) {
                for (var e, r = t.video, n = [], i = 0; i < r.childNodes.length; i++)
                  1 === (e = r.childNodes[i]).nodeType &&
                    'source' === e.tagName.toLowerCase() &&
                    n.push(e);
                return n;
              })(t);
              0 < a.length && (a[0].src = i), t.trigger('stream-changed', t._currentAsset);
            }
          },
          m = function (t, e) {
            var r = !(2 < arguments.length && void 0 !== arguments[2]) || arguments[2],
              i = !!(3 < arguments.length && void 0 !== arguments[3]) && arguments[3];
            h.info('changeStream', r, i, e && e.slug, e);
            var a = t.video;
            return (
              (t.asset = e),
              new s(function (s) {
                var o = n.properAssetUrl(e.url, e.container);
                if (i || o !== a.getAttribute('src')) {
                  var l = t.getState();
                  (t.state.seeking = !0),
                    c(a, 'loadstart', function () {
                      return (
                        i
                          ? ((a.style.visibility = 'visible'), (t.state.seeking = !1), s())
                          : 2 < l.currentTime
                          ? t.seek(l.currentTime).then(function () {
                              'playing' === l.playbackMode
                                ? t.play().then(function () {
                                    (t.state.seeking = !1), (a.style.visibility = 'visible'), s();
                                  })
                                : t.pause().then(function () {
                                    (a.style.visibility = 'visible'), (t.state.seeking = !1), s();
                                  });
                            })
                          : ('playing' === l.playbackMode && t.play(),
                            (a.style.visibility = 'visible'),
                            (t.state.seeking = !1),
                            s()),
                        t.setPlaybackRate(l.playbackRate),
                        d
                      );
                    }),
                    (a.style.visibility = 'hidden'),
                    p(t, e, i),
                    'beforeplay' === l.playbackMode || r || t.play();
                } else s();
              })
            );
          },
          y = function (t) {
            return !!t.state.isChangingVideo;
          },
          b = function (t, e, r) {
            return (
              E(t),
              (t.state.isChangingVideo = !0),
              T(t, e, r),
              new s(function (e) {
                m(t, t.defaultAsset()).then(function () {
                  (t.state.isChangingVideo = !1), e();
                });
              })
            );
          },
          E = function (t) {
            var e = t.state.eventContext;
            t.destroy(), (t.state.eventContext = e);
          },
          T = function (t, e, r) {
            i.setupProperties(t, e, r), i.setupBindingsAndLoops(t, t.allAssets, r);
          };
      },
      337: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { maybeTriggerWaiting: () => f, setup: () => c, teardown: () => d });
        var n = r(1),
          i = n.default.lib('utilities/obj'),
          a = n.default.lib('player/lib/elem'),
          s = a.elemBind,
          o = a.elemUnbind,
          l = n.default.lib('utilities/event_loop').globalEventLoop,
          u = function (t) {
            var e = t.attributes;
            return (null == e.eventLoopDuration ? 300 : e.eventLoopDuration) / t.getPlaybackRate();
          },
          c = function (t) {
            null == t.state && (t.state = {}), (t.state.waiting = -1);
            var e = ''.concat(t.uuid, '.waiting_events');
            l.add(e, u(t), function () {
              f(t), l.interval(e, u(t));
            });
          },
          d = function (t) {
            var e = ''.concat(t.uuid, '.waiting_events');
            l.remove(e);
          },
          f = function (t) {
            var e = t.video,
              r = t.state,
              n = r.lastPlaybackMode,
              a =
                (r.gotWaiting && 'beforeplay' === t.getPlaybackMode()) ||
                'playing' === t.getPlaybackMode(),
              l = 'playing' === n || ('beforeplay' === n && !r.lastPlayRejected),
              c = r.lastEventLoopDuration || u(t);
            if (a && l)
              if (t.getCurrentTime() === r.lastTimePosition) {
                var d = r.startedWaitingAt;
                d
                  ? ((r.waiting = (new Date().getTime() - d) / 1e3),
                    t.trigger('custom-waiting', r.waiting))
                  : (i.assign(r, { startedWaitingAt: new Date().getTime() - c, waiting: c / 1e3 }),
                    t.trigger('custom-waiting', c / 1e3),
                    s(e, 'timeupdate', function () {
                      return h(t), o;
                    }));
              } else h(t);
            else h(t);
          },
          h = function (t) {
            var e = t.state.waiting;
            i.assign(t.state, { waiting: -1, startedWaitingAt: null }),
              null != e && 0 <= e && t.trigger('custom-done-waiting', e);
          };
      },
      45: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            FAILED: () => h,
            QUEUED: () => v,
            PROCESSING: () => g,
            READY: () => p,
            filter: () => y,
            one: () => b,
            readyPublicMp3s: () => E,
            readyPublicMp4s: () => T,
            readyPublicM3u8s: () => A,
            readyPublicFlvs: () => S,
            readyPublicMp4sAndFlvs: () => L,
            filterOver400: () => _,
            readyPublicOver400: () => k,
            nonfailedPublicOver400: () => D,
            withinQualityRange: () => w,
            numericSizeSnapped: () => R,
            findClosestAssetByQuality: () => C,
            still: () => x,
            channelArtworkStill: () => I,
            thumbnailAssets: () => O,
            stillUrl: () => F,
            getStillWidth: () => M,
            BAKERY_HOSTS: () => B,
            isBakeryUrl: () => N,
            onePublicReadyWithContainer: () => U,
            mp4: () => j,
            webm: () => G,
            m3u8: () => H,
            flv: () => V,
            original: () => W,
            playable: () => K,
            isScreencast: () => q,
            videoAspect: () => z,
            originalAspect: () => Y,
            iphone: () => X,
            smallestNormalMp4: () => Q,
            urlWithCorrectHost: () => $,
            nearestOutsideRange: () => J,
            moveToFront: () => Z,
          });
        var n = r(17),
          i = r(15),
          a = r.n(i),
          s = r(16),
          o = r(20),
          l = r(14),
          u = r(19);
        function c(t, e) {
          return (
            (function (t) {
              if (Array.isArray(t)) return t;
            })(t) ||
            (function (t, e) {
              if ('undefined' != typeof Symbol && Symbol.iterator in Object(t)) {
                var r = [],
                  n = !0,
                  i = !1,
                  a = void 0;
                try {
                  for (
                    var s, o = t[Symbol.iterator]();
                    !(n = (s = o.next()).done) && (r.push(s.value), !e || r.length !== e);
                    n = !0
                  );
                } catch (t) {
                  (i = !0), (a = t);
                } finally {
                  try {
                    n || null == o.return || o.return();
                  } finally {
                    if (i) throw a;
                  }
                }
                return r;
              }
            })(t, e) ||
            (function (t, e) {
              if (t) {
                if ('string' == typeof t) return d(t, e);
                var r = Object.prototype.toString.call(t).slice(8, -1);
                return (
                  'Object' === r && t.constructor && (r = t.constructor.name),
                  'Map' === r || 'Set' === r
                    ? Array.from(t)
                    : 'Arguments' === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                    ? d(t, e)
                    : void 0
                );
              }
            })(t, e) ||
            (function () {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
              );
            })()
          );
        }
        function d(t, e) {
          (null == e || e > t.length) && (e = t.length);
          for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
          return n;
        }
        var f = Array.prototype.slice,
          h = -1,
          v = 0,
          g = 1,
          p = 2,
          m = ['select', 'sortFn', 'sortBy', 'unique'],
          y = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
            if (!t) return [];
            t.assets && (t = t.assets),
              (null != e.qualityMin || null != e.qualityMax) &&
                ((t = w(t, e.qualityMin, e.qualityMax)),
                (e = n.except(e, ['qualityMin', 'qualityMax'])));
            var r = n.only(e, m),
              i = r.select || n.except(e, m);
            i && (r.select = i);
            var a = r.select ? n.select(t, r.select) : n.clone(t);
            if (((r.sortFn || r.sortBy) && (a = n.sort(a, r.sortFn || r.sortBy)), r.unique)) {
              for (var s = {}, o = 0; o < a.length; o++) {
                var l = a[o],
                  u = l['' + r.unique] || '__undefined__';
                s[u] || (s[u] = l);
              }
              for (var c in ((a = []), s)) a.push(s[c]);
            }
            return a;
          },
          b = function (t, e) {
            return y(t, e)[0] || null;
          },
          E = function (t) {
            return y(t, { ext: 'mp3', status: p, public: !0 });
          },
          T = function (t) {
            return y(t, { container: 'mp4', status: p, public: !0 });
          },
          A = function (t) {
            return y(t, { container: 'm3u8', status: p, public: !0 });
          },
          S = function (t) {
            return y(t, { container: 'flv', status: p, public: !0 });
          },
          L = function (t) {
            return y(t, { container: /mp4|flv/, status: p, public: !0 });
          },
          _ = function (t) {
            for (var e = [], r = 0; r < t.length; r++) {
              var n = t[r],
                i = null != n.opt_vbitrate && 500 <= n.opt_vbitrate && 1e5 >= n.opt_vbitrate,
                a = null != n.width && 400 < n.width;
              (i || a) && e.push(n);
            }
            return e;
          },
          k = function (t) {
            return _(y(t, { container: /mp4|flv/, public: !0, status: p }));
          },
          D = function (t) {
            return _(
              y(t, {
                container: /mp4|flv/,
                public: !0,
                status: function (t) {
                  return t !== h;
                },
              })
            );
          },
          w = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 100,
              r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1e4;
            return y(t, {
              select: function (t) {
                var n = R(t.width, t.height);
                return e <= n && n <= r;
              },
            });
          },
          R = function (t, e) {
            if (e > t) {
              var r = t;
              (t = e), (e = r);
            }
            var n = t / e,
              i = t * e + 1;
            return i >= (3840 / n) * 3840
              ? 2160
              : i >= (2560 / n) * 2560
              ? 1440
              : i >= (1920 / n) * 1920
              ? 1080
              : i >= (1280 / n) * 1280
              ? 720
              : i >= (960 / n) * 960
              ? 540
              : i >= (640 / n) * 640
              ? 360
              : e;
          },
          C = function (t, e) {
            var r;
            r = '4k' === e ? 2160 : parseInt(e, 10);
            var n = w(t, r, r)[0];
            if (n) return n;
            var i = J(t, r, r);
            if (1 === i.length) return i[0];
            var a = z(t),
              s = Math.round(a * r),
              o = c(i, 2),
              l = o[0],
              u = o[1];
            return Math.abs(l.width - s) < Math.abs(u.width - s) ? l : u;
          },
          x = function (t) {
            var e = b(t, { type: /^still_image$/, sortBy: 'created_at desc' });
            return e || (e = I(t)), e || (e = b(t, { container: /mp4/, sortBy: 'width desc' })), e;
          },
          I = function (t) {
            return b(t, { type: /^channel_still_image$/, sortBy: 'created_at desc' });
          },
          O = function (t, e) {
            if (e.stillUrl) return [{ height: null, url: e.stillUrl, width: null }];
            var r = x(t),
              n = r.width / r.height;
            return [320, 640, 960, 1280, 1920, 3840].map(function (e) {
              var r = Math.round(e / n);
              return {
                height: r,
                url: F(t, { videoWidth: e, videoHeight: r, playButton: !1 }),
                width: e,
              };
            });
          },
          P = a()('fast'),
          F = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
              r = x(t);
            if (r) {
              if (r.status !== p) {
                var i = I();
                if (!i || i.status !== p) return '//'.concat(P, '/assets/images/blank.gif');
                i.url;
              }
              var a = (e = n.merge(
                  {
                    aspect: r.width / r.height || 1,
                    stillUrl: r.url,
                    playButton: !1,
                    playerColor: e.playerColor || '636155',
                    videoWidth: r.width || 640,
                    videoHeight: r.height || 360,
                    stillSnap: !0,
                  },
                  e
                )).videoWidth,
                o = e.videoHeight,
                l = new s.Url(e.stillUrl);
              return (
                e.retina && ((l.params.image_play_button_size = '2x'), (a *= 2), (o *= 2)),
                e.stillSnap &&
                  ((a = M({ videoWidth: a, stillAssetWidth: r.width || 640 })),
                  (o = Math.round(a / e.aspect))),
                N(e.stillUrl)
                  ? ('https:' === e.protocol &&
                      ((l.protocol = 'https:'),
                      (l.host =
                        ('fast.wistia.com' === e.embedHost || e.embedHost,
                        'embed-ssl.wistia.com'))),
                    (l.params.image_crop_resized = ''.concat(a, 'x').concat(o)),
                    (null == e.playButton || e.playButton) &&
                      ((l.params.image_play_button = 1),
                      (l.params.image_play_button_color = ''.concat(
                        ('' + e.playerColor).replace(/^#+/, ''),
                        'e0'
                      ))),
                    e.ext && l.ext(e.ext),
                    'bin' === l.ext() && l.ext('jpg'),
                    l.absolute())
                  : e.stillUrl
              );
            }
          },
          M = function (t) {
            var e = [640, 960, 1280, 1920, 3840];
            3840 > t.stillAssetWidth && e.push(t.stillAssetWidth);
            for (var r, n = [], i = 0; i < e.length; i++)
              (r = e[i]) <= t.stillAssetWidth && n.push(r);
            n.sort(function (t, e) {
              return t - e;
            });
            for (var a, s = 0; s < n.length; s++) if (((a = n[s]), t.videoWidth <= a)) return a;
            return Math.max.apply(Math, n);
          },
          B = [
            'embed.wistia.com',
            'embed-ssl.wistia.com',
            a()('embed'),
            a()('prime'),
            a()('mixergy-cdn'),
            'embed-a.wistia.com',
            a()('embed-fastly'),
            'embedwistia-a.akamaihd.net',
            'embed.wistia.com',
            'embed-ssl.wistia.com',
            'embed-a.wistia.com',
            'embedwistia-a.akamaihd.net',
            'embed-fastly.wistia.com',
          ],
          N = function (t) {
            if (null == t) return !1;
            var e = new s.Url(t);
            return !!e.host && 0 <= B.join(',').indexOf(e.host);
          },
          U = function (t, e, r) {
            return (r = n.merge({ container: e, public: !0, status: p }, r)), b(t, r);
          },
          j = function (t, e) {
            return U(t, 'mp4', e);
          },
          G = function (t, e) {
            return U(t, 'webm', e);
          },
          H = function (t, e) {
            return U(t, 'm3u8', e);
          },
          V = function (t, e) {
            return U(t, 'flv', e);
          },
          W = function (t) {
            return b(t, { type: 'original' });
          },
          K = function (t, e) {
            var r =
              2 < arguments.length && void 0 !== arguments[2]
                ? arguments[2]
                : (0, o.cachedDetect)();
            return (r.video.webm && G(t, e)) || j(t, e);
          },
          q = function (t) {
            var e = W(t);
            return e && 640 < e.width && 1200 > e.bitrate;
          },
          z = function (t) {
            var e = j(t) || V(t) || H(t) || G(t) || W(t);
            return e && e.height ? e.width / e.height : 640 / 360;
          },
          Y = function (t) {
            var e = z(t),
              r = W(t);
            if (r && r.width && r.height) {
              var n = r.width / r.height;
              return (1 < n && 1 > e) || (1 > n && 1 < e) ? 1 / n : n;
            }
            return e;
          },
          X = function (t, e) {
            if (1 < z(t)) return (e = n.merge({ width: 640 }, e)), j(t, e) || Q(t, e);
            var r = n.merge({ width: 320 }, e),
              i = n.merge({ width: 640 }, e);
            return j(t, r) || j(t, i) || Q(t, e);
          },
          Q = function (t, e) {
            return (e = n.merge({ sortBy: 'width asc', width: [640, 1920] }, e)), j(t, e);
          },
          $ = function (t) {
            var e =
                1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : l.eV1Protocol(),
              r = new s.Url(t);
            return (
              N(t) &&
                ('https:' === e
                  ? ((r.host = l.deliveryHost(location.protocol)), (r.protocol = 'https:'))
                  : ((r.host = l.deliveryHost(location.protocol)), (r.protocol = 'http:'))),
              r.absolute()
            );
          },
          J = function (t, e, r) {
            if (0 === t.length) return [];
            for (
              var n,
                i,
                a = f.call(t).sort(function (t, e) {
                  return R(t.width, t.height) - R(e.width, e.height);
                }),
                s = 0;
              s < a.length;
              s++
            ) {
              var o = a[s],
                l = R(o.width, o.height);
              if ((l < e && (n = o), l >= r)) {
                i = o;
                break;
              }
            }
            var c = [];
            return (
              n && c.push(n),
              i && c.push(i),
              0 === c.length &&
                (u.wlog.error(
                  'nearestOutsideRange: no nearby assets found, using first in list',
                  a[0]
                ),
                c.push(a[0])),
              c
            );
          },
          Z = function (t, e) {
            if (!e) return t;
            for (var r = -1, n = 0; n < t.length; n++)
              if (t[n].url === e.url) {
                r = n;
                break;
              }
            return 0 < r && (t.splice(r, 1), t.unshift(e)), t;
          };
      },
      34: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            isDocReady: () => a.isDocReady,
            onDocReady: () => a.onDocReady,
            pageLoaded: () => s.default,
            execScriptTags: () => c.execScriptTags,
            getScriptTags: () => c.getScriptTags,
            removeScriptTags: () => c.removeScriptTags,
            elemOffset: () => u.elemOffset,
            elemZoom: () => u.elemZoom,
            isBoxModel: () => u.isBoxModel,
            elemHtml: () => v,
            getCssTags: () => g,
            execCssTags: () => p,
            removeCssTags: () => m,
            addInlineCss: () => y,
            elemFromObject: () => b,
            elemToObject: () => E,
            elemClone: () => T,
            elemAppend: () => A,
            elemPrepend: () => S,
            elemBefore: () => L,
            elemAfter: () => _,
            elemRemove: () => k,
            elemRemoveClass: () => D,
            elemAddClass: () => w,
            elemHasClass: () => R,
            elemClasses: () => I,
            elemStyle: () => P,
            propsWithVendorPrefixes: () => B,
            getComputedStyle: () => N,
            elemWidth: () => U,
            elemHeight: () => j,
            elemContainsOffset: () => G,
            elemScrollOffset: () => H,
            elemIsHidden: () => V,
            elemInDom: () => W,
            elemIsDescendantOf: () => K,
            elemAncestorWithClass: () => q,
            elemAncestorHasClass: () => z,
            elemAncestors: () => Y,
            elemIsInside: () => X,
            elemAnimate: () => $,
            elemBind: () => J,
            elemUnbind: () => Z,
            elemUnbindAll: () => tt,
            elemUnbindAllInside: () => et,
            elemBindKey: () => rt,
            elemRebind: () => nt,
            elemBindOnce: () => it,
            elemTrigger: () => at,
            fullscreenElement: () => st,
            elemRequestFullscreen: () => ot,
            elemCancelFullscreen: () => lt,
            elemStripEventAttributes: () => ut,
            elemMutationObserver: () => ct,
            docScrollTop: () => dt,
            docScrollLeft: () => ft,
            safeRequestAnimationFrame: () => ht,
            formInputIsFocused: () => vt,
            inUserEventContext: () => gt,
            getLastActiveEventAt: () => pt,
          });
        var n,
          i = r(17),
          a = r(35),
          s = r(36),
          o = r(20),
          l = r(19),
          u = r(37),
          c = r(38),
          d = r(8),
          f = r(1).default,
          h = (0, o.cachedDetect)(),
          v = function (t, e) {
            var r = g(e),
              n = (0, c.getScriptTags)(e);
            return (
              (e = m(e)),
              (e = (0, c.removeScriptTags)(e)),
              (t.innerHTML = e),
              p(r, t),
              (0, c.execScriptTags)(n)
            );
          },
          g = function (t) {
            return t.match(/<link.*?rel=['"]stylesheet['"][^>]*>|<style>[\s\S]+?<\/style>/gi) || [];
          },
          p = function (t, e) {
            if (!t) return null;
            (0, i.isArray)(t) || (t = g(t));
            for (var r, n = [], a = 0; a < t.length; a++)
              if (((r = t[a]), /<link.*?rel=['"]stylesheet['"][^>]*>/.test(r))) {
                var s = r.match(/href=['"](.*?)['"]/i);
                if (s) {
                  var o = document.createElement('link');
                  o.setAttribute('rel', 'stylesheet'),
                    o.setAttribute('href', s[1]),
                    (o.className = 'wistia_injected_style'),
                    (e || document.body || document.head).appendChild(o),
                    n.push(o);
                }
              } else if (/<style>[\s\S]+?<\/style>/gi.test(r)) {
                var l = r.match(/<style>([\s\S]+?)<\/style>/i);
                if (l) {
                  var u = y(e || document.body || document.head, l[1]);
                  n.push(u);
                }
              }
            return n;
          },
          m = function (t) {
            return t.replace(/<link.*?rel=['"]stylesheet['"][^>]*>|<style>[\s\S]+?<\/style>/gi, '');
          },
          y = function (t, e) {
            var r = t || document.body || document.head,
              n = document.createElement('style');
            return (
              (n.id = (0, d.seqId)('wistia_', '_style')),
              n.setAttribute('type', 'text/css'),
              (n.className = 'wistia_injected_style'),
              r.appendChild(n, r.nextSibling),
              n.styleSheet ? (n.styleSheet.cssText = e) : n.appendChild(document.createTextNode(e)),
              n
            );
          },
          b = function t(e) {
            if ((0, i.isArray)(e)) {
              for (var r = [], n = 0; n < e.length; n++) r.push(t(e[n]));
              return r;
            }
            var a = e.tagName || 'div',
              s = e.childNodes || [];
            (0, i.isArray)(s) || (s = [s]);
            var o = document.createElement(a);
            for (var l in e)
              if (e.hasOwnProperty(l)) {
                var u = e[l];
                if ('childNodes' === l || 'tagName' === l || 'ref' === l) continue;
                var c = l.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                if ('style' === l)
                  if ((0, i.isObject)(u)) for (var d in u) o.style[d] = u[d];
                  else
                    for (var f = u.split(';'), h = 0; h < f.length; h++) {
                      var v = f[h].split(/\s*:\s*/),
                        g = v[0],
                        p = v[1];
                      g && p && (o.style[g] = p);
                    }
                else if ('events' === l)
                  for (var m in u) {
                    var y = u[m];
                    J(o, m, y);
                  }
                else
                  'className' === l || 'class' === l
                    ? (o.className = u)
                    : 'innerHTML' === l
                    ? (o.innerHTML = u)
                    : 'innerText' === l
                    ? (o.innerText = u)
                    : null != u &&
                      'function' == typeof u.toString &&
                      o.setAttribute(c, u.toString());
              }
            for (var b, E = 0; E < s.length; E++)
              if (((b = s[E]), (0, i.isObject)(b))) {
                var T = t(b);
                A(o, T);
              } else {
                var S = document.createTextNode(b.toString());
                A(o, S);
              }
            return 'function' == typeof e.ref && e.ref(o), o;
          },
          E = function t(e) {
            if ((0, i.isArray)(e)) for (var r = [], n = 0; n < e.length; n++) r.push(t(e[n]));
            for (
              var a, s = { tagName: e.tagName.toLowerCase() }, o = Object.keys(e), l = 0;
              l < o.length;
              l++
            ) {
              if (
                'tagName' === (a = o[l]) ||
                'childNodes' === a ||
                'nodeType' === a ||
                'nodeValue' === a
              )
                continue;
              if ('style' === a) {
                s.style = {};
                for (var u = Object.keys(e.style), c = 0; c < u.length; c++) {
                  var d = u[c],
                    f = e.style[d];
                  f && !/^\d/.test(d) && 'length' !== d && (s.style[d] = f);
                }
              } else {
                var h = e.getAttribute(a);
                null != h && (s[a] = h);
              }
            }
            for (var v, g = [], p = 0; p < e.childNodes.length; p++)
              1 === (v = e.childNodes[p]).nodeType
                ? g.push(t(v))
                : 3 === v.nodeType && g.push(v.nodeValue);
            return 0 < g.length && (s.childNodes = g), s;
          },
          T = function (t) {
            var e = E(t);
            return b(e);
          },
          A = function t(e, r) {
            if ((0, i.isArray)(r)) for (var n = 0; n < r.length; n++) t(e, r[n]);
            else e.appendChild(r, { wistiaGridCaller: !0 });
          },
          S = function t(e, r) {
            if (!(0, i.isArray)(r))
              return 0 === e.childNodes.length ? A(e, r) : e.insertBefore(r, e.childNodes[0]);
            for (var n = 0; n < r.length; n++) t(e, r[n]);
          },
          L = function t(e, r) {
            if (!(0, i.isArray)(r)) return e.parentNode.insertBefore(r, e);
            r = r.reverse();
            for (var n = 0; n < r.length; n++) t(e, r[n]);
          },
          _ = function t(e, r) {
            if (!(0, i.isArray)(r)) return e.parentNode.insertBefore(r, e.nextSibling);
            r = r.reverse();
            for (var n = 0; n < r.length; n++) t(e, r[n]);
          },
          k = function t(e) {
            var r;
            if ((0, i.isArray)(e) || (window.NodeList && e instanceof NodeList))
              for (var n = 0; n < e.length; n++) t(e[n]);
            else
              null != e &&
                (1 === e.nodeType || 3 === e.nodeType) &&
                (r = e.parentNode) &&
                (r.removeChild(e), (e = null));
          },
          D = function t(e, r) {
            if ((0, i.isArray)(e) || (window.NodeList && e instanceof NodeList))
              for (var n = 0; n < e.length; n++) t(e[n], r);
            else if (R(e, r)) {
              var a = e.getAttribute('class');
              if (a) {
                var s = new RegExp('\\b'.concat(r, '\\b'), 'g'),
                  o = O(a.replace(s, ''));
                e.setAttribute('class', o);
              }
            }
          },
          w = function t(e, r) {
            if ((0, i.isArray)(e) || (window.NodeList && e instanceof NodeList))
              for (var n = 0; n < e.length; n++) t(e[n], r);
            else if (!R(e, r)) {
              var a,
                s = e.getAttribute('class');
              s ? (D(e, r), (a = O(''.concat(s, ' ').concat(r)))) : (a = r),
                e.setAttribute('class', a);
            }
          },
          R = function (t, e) {
            var r = null != t && 'function' == typeof t.getAttribute && t.getAttribute('class');
            if ((!r && t && 'string' == typeof t.className && (r = t.className), !r)) return !1;
            var n = !1;
            return (
              x(r, e, function (t) {
                var i = 0 === t || ' ' === r.charAt(t - 1),
                  a = t + e.length === r.length,
                  s = ' ' === r.charAt(t + e.length);
                if (i && (a || s)) return (n = !0), C;
              }),
              n
            );
          },
          C = {},
          x = function (t, e, r) {
            for (var n = -1; -1 != (n = t.indexOf(e, n + 1)) && r(n) !== C; );
          },
          I = function (t) {
            return t && 'string' != typeof t.className
              ? ['']
              : ((t && t.className) || '').split(/\s+/);
          },
          O = function (t) {
            return t.replace(/^\s+/g, '').replace(/\s+$/g, '').replace(/\s+/g, ' ');
          },
          P = function t(e) {
            for (var r = arguments.length, n = Array(1 < r ? r - 1 : 0), a = 1; a < r; a++)
              n[a - 1] = arguments[a];
            if ((0, i.isArray)(e) || (window.NodeList && e instanceof NodeList)) {
              for (var s, o = [], u = 0; u < e.length; u++)
                1 === (s = e[u]).nodeType && o.push(t.apply(void 0, [s].concat(n)));
              return o;
            }
            if (2 === n.length) {
              var c = n[0],
                d = n[1];
              e.style[c] = d;
            } else if (1 !== n.length) l.wlog.apply(void 0, ['Unexpected args', e].concat(n));
            else if ('string' == typeof n[0]) {
              var f = n[0];
              try {
                return e.currentStyle
                  ? e.currentStyle[f]
                  : window.getComputedStyle
                  ? window.getComputedStyle(e, null).getPropertyValue(f)
                  : null;
              } catch (t) {
                l.wlog.notice(t);
              }
            } else {
              var h = B(n[0]);
              for (var v in h) {
                var g = h[v];
                e.style[v] = g;
              }
            }
          },
          F = {
            borderImage: !0,
            mixBlendMode: !0,
            transform: !0,
            transition: !0,
            transitionDuration: !0,
          },
          M = ['webkit', 'moz', 'o', 'ms'],
          B = function (t) {
            if (h.chrome) return t;
            var e = {};
            for (var r in t) {
              var n = t[r];
              if (((e[r] = n), F[r]))
                for (var i = M, a = 0; a < i.length; a++) {
                  var s = i[a] + r.charAt(0).toUpperCase() + r.slice(1);
                  r[s] || (e[s] = n);
                }
            }
            return e;
          },
          N = function (t, e) {
            if (!window.getComputedStyle) return null;
            var r = window.getComputedStyle(t, null);
            return null == r ? null : null == e ? r : r[e];
          },
          U = function (t) {
            if (t === window)
              return window.innerWidth
                ? window.innerWidth
                : document.documentElement
                ? document.documentElement.offsetWidth
                : document.body.offsetWidth;
            if (t === document) {
              var e = document.body,
                r = document.documentElement;
              return Math.max(
                e.scrollWidth,
                e.offsetWidth,
                r.clientWidth,
                r.scrollWidth,
                r.offsetWidth
              );
            }
            var n;
            return h.browser.quirks
              ? parseInt(t.offsetWidth, 10)
              : (n = N(t, 'width')) && null != n
              ? parseFloat(n)
              : t.currentStyle
              ? t.offsetWidth
              : -1;
          },
          j = function (t) {
            if (t === window)
              return window.innerHeight
                ? window.innerHeight
                : document.documentElement
                ? document.documentElement.offsetHeight
                : document.body.offsetHeight;
            if (t === document) {
              var e = document.body,
                r = document.documentElement;
              return Math.max(
                e.scrollHeight,
                e.offsetHeight,
                r.clientHeight,
                r.scrollHeight,
                r.offsetHeight
              );
            }
            var n;
            return h.browser.quirks
              ? parseInt(t.offsetHeight, 10)
              : (n = N(t, 'height')) && null != n
              ? parseFloat(n)
              : t.currentStyle
              ? t.offsetHeight
              : -1;
          },
          G = function (t, e, r) {
            var n = (0, u.elemOffset)(t);
            return (
              (n.right = n.left + U(t)),
              (n.bottom = n.top + j(t)),
              n.left <= e && e < n.right && n.top <= r && r < n.bottom
            );
          },
          H = function (t) {
            var e = 0,
              r = 0;
            if (t.parentNode)
              for (; t && t.offsetParent; )
                (r += t.scrollTop), (e += t.scrollLeft), (t = t.parentNode);
            return { left: e, top: r };
          },
          V = function (t) {
            for (; t && 1 === t.nodeType; ) {
              if ('none' === P(t, 'display')) return !0;
              t = t.parentNode;
            }
            return !1;
          },
          W = function (t) {
            for (; (t = t.parentNode); ) if (t === document) return !0;
            return !1;
          },
          K = function (t, e) {
            for (var r = Y(t), n = 0; n < r.length; n++) if (r[n] === e) return !0;
            return !1;
          },
          q = function (t, e) {
            for (var r = Y(t), n = 0; n < r.length; n++) if (R(r[n], e)) return r[n];
            return null;
          },
          z = function (t, e) {
            return !!q(t, e);
          },
          Y = function (t) {
            for (var e = t, r = []; (e = e.parentNode); ) r.push(e);
            return r;
          },
          X = function (t, e) {
            return t === e || K(t, e);
          },
          Q = function (t, e, r) {
            var n = [];
            for (var i in t) n.push(''.concat(i, ' ').concat(e, 'ms ').concat(r));
            return n.join(',');
          },
          $ = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
              r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
            r = (0, i.merge)({ time: 400, easing: 'ease' }, r);
            var n = Q(e, r.time, r.easing);
            P(t, { transition: n }),
              ht(function () {
                P(t, e),
                  setTimeout(function () {
                    P(t, { transition: '' }), 'function' == typeof r.callback && r.callback();
                  }, r.time);
              });
          },
          J = function (t, e, r) {
            var n = !!(3 < arguments.length && void 0 !== arguments[3]) && arguments[3],
              i = function (n) {
                !(n = n || window.event).pageX &&
                  !n.pageY &&
                  (n.clientX || n.clientY) &&
                  ((n.pageX = n.clientX + ft()), (n.pageY = n.clientY + dt())),
                  n.preventDefault ||
                    (n.preventDefault = function () {
                      n.returnValue = !1;
                    }),
                  n.stopPropagation ||
                    (n.stopPropagation = function () {
                      n.cancelBubble = !0;
                    }),
                  null == n.which && (n.which = null == n.charCode ? n.keyCode : n.charCode),
                  null == n.which &&
                    null != n.button &&
                    (1 & n.button
                      ? (n.which = 1)
                      : 2 & n.button
                      ? (n.which = 3)
                      : 4 & n.button
                      ? (n.which = 2)
                      : h.browser.msie && 0 === n.button
                      ? (n.which = 1)
                      : (n.which = 0)),
                  n.target || (n.srcElement && (n.target = n.srcElement)),
                  n.target && 3 === n.target.nodeType && (n.target = n.target.parentNode);
                for (var i = arguments.length, a = Array(1 < i ? i - 1 : 0), s = 1; s < i; s++)
                  a[s - 1] = arguments[s];
                var o = r.apply(n.target, [n].concat(a));
                return o === Z && Z(t, e, r), o;
              };
            f._elemBind = f._elemBind || {};
            var a = rt(t, e, r);
            return (
              (f._elemBind[a] = i),
              (i.elem = t),
              (i.event = e),
              h.browser.msie && 9 > h.browser.version
                ? t.attachEvent('on'.concat(e), i)
                : t.addEventListener(e, i, n),
              function () {
                Z(t, e, r, n);
              }
            );
          },
          Z = function (t, e, r) {
            var n = !!(3 < arguments.length && void 0 !== arguments[3]) && arguments[3];
            if (null != t && null != t._wistiaElemId && null != r && r._wistiaBindId) {
              var i = rt(t, e, r),
                a = f._elemBind[i];
              return (
                a &&
                  (h.browser.msie && 9 > h.browser.version
                    ? t.detachEvent('on'.concat(e), a)
                    : t.removeEventListener(e, a, n),
                  (a.elem = null),
                  (a.event = null)),
                delete f._elemBind[i]
              );
            }
          },
          tt = function (t) {
            for (var e in f._elemBind) {
              var r = f._elemBind[e];
              if (r && t === r.elem) {
                var n = r.event;
                h.browser.msie && 9 > h.browser.version
                  ? r.elem.detachEvent('on'.concat(n), r)
                  : r.elem.removeEventListener(n, r, !1),
                  (r.elem = null),
                  (r.event = null),
                  delete f._elemBind[e];
              }
            }
          },
          et = function (t) {
            var e = 0;
            for (var r in f._elemBind) {
              var n = f._elemBind[r];
              if (n && X(n.elem, t)) {
                var i = n.event;
                h.browser.msie && 9 > h.browser.version
                  ? n.elem.detachEvent('on'.concat(i), n)
                  : n.elem.removeEventListener(i, n, !1),
                  (n.elem = null),
                  (n.event = null),
                  delete f._elemBind[r],
                  (e += 1);
              }
            }
            return e;
          },
          rt = function (t, e, r) {
            return (
              (t._wistiaElemId = t._wistiaElemId || (0, d.seqId)('wistia_elem_')),
              (r._wistiaBindId = r._wistiaBindId || (0, d.seqId)('wistia_bind_')),
              ''.concat(t._wistiaElemId, '.').concat(e, '.').concat(r._wistiaBindId)
            );
          },
          nt = function (t, e, r) {
            if (r) return Z(t, e, r), J(t, e, r);
          },
          it = function (t, e, r) {
            return J(t, e, function () {
              for (var t = arguments.length, e = Array(t), n = 0; n < t; n++) e[n] = arguments[n];
              return r.apply(this, e), Z;
            });
          },
          at = function (t, e) {
            for (var r = arguments.length, n = Array(2 < r ? r - 2 : 0), i = 2; i < r; i++)
              n[i - 2] = arguments[i];
            if (t.dispatchEvent) {
              var a = document.createEvent('Events');
              return (
                a.initEvent(e, !0, !1),
                'click' === e || 'doubleclick' === e
                  ? (a.which = 1)
                  : 'rightclick' === e && (a.which = 2),
                (a.customArguments = n),
                t.dispatchEvent(a)
              );
            }
            if (t.fireEvent) {
              var s = { customArguments: n };
              return t.fireEvent('on' + e, s);
            }
            l.wlog.error('neither dispatchEvent nor fireEvent is defined for', t, e);
          },
          st = function () {
            return (
              document.fullscreenElement ||
              document.mozFullScreenElement ||
              document.webkitFullscreenElement ||
              document.msFullscreenElement
            );
          },
          ot = function (t) {
            return t.requestFullscreen
              ? t.requestFullscreen()
              : t.mozRequestFullScreen
              ? t.mozRequestFullScreen()
              : t.webkitRequestFullscreen
              ? t.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)
              : t.msRequestFullscreen
              ? t.msRequestFullscreen()
              : t.webkitEnterFullscreen
              ? t.webkitEnterFullscreen()
              : (l.wlog.notice('no requestFullscreen functionality detected'), null);
          },
          lt = function (t) {
            return document.cancelFullscreen
              ? document.cancelFullscreen()
              : document.mozCancelFullScreen
              ? document.mozCancelFullScreen()
              : document.webkitCancelFullScreen
              ? document.webkitCancelFullScreen()
              : document.msExitFullscreen
              ? document.msExitFullscreen()
              : t && t.webkitExitFullscreen
              ? t.webkitExitFullscreen()
              : (l.wlog.notice('no cancelFullscreen functionality detected'), null);
          },
          ut = function t(e) {
            var r = (e && e.attributes) || [];
            try {
              for (var n, i = 0; i < r.length; i++)
                (n = r[i]),
                  /^on.+/i.test(n.name) && ((e[n.name] = null), e.removeAttribute(n.name));
            } catch (t) {
              l.wlog.error(t);
            }
            if (e.childNodes)
              for (var a, s = 0; s < e.childNodes.length; s++)
                1 === (a = e.childNodes[s]).nodeType && t(a);
          },
          ct = function (t) {
            var e = h.mutationObserver;
            return e ? new window[e](t) : null;
          },
          dt = function (t) {
            var e = document.body,
              r = document.documentElement;
            return null == t
              ? (r && r.scrollTop) || (e && e.scrollTop) || 0
              : (e && (e.scrollTop = t), void (r && (r.scrollTop = t)));
          },
          ft = function (t) {
            var e = document.body,
              r = document.documentElement;
            return null == t
              ? (r && r.scrollLeft) || (e && e.scrollLeft) || 0
              : (e && (e.scrollLeft = t), void (r && (r.scrollLeft = t)));
          },
          ht = function (t) {
            return (
              window.requestAnimationFrame ||
              window.webkitRequestAnimationFrame ||
              window.mozRequestAnimationFrame ||
              function (t) {
                return setTimeout(t, 1e3 / 60);
              }
            )(t);
          },
          vt = function () {
            return /^textarea|input|select$/i.test(document.activeElement.tagName);
          },
          gt = function () {
            return !!n;
          },
          pt = function () {
            return mt;
          },
          mt = -1;
        [
          'auxclick',
          'click',
          'contextmenu',
          'dblclick',
          'focus',
          'keydown',
          'keypress',
          'keyup',
          'mousedown',
          'mouseup',
          'reset',
          'submit',
          'touchend',
          'touchstart',
        ].forEach(function (t) {
          J(
            document,
            t,
            function (t) {
              (n = t),
                (mt = Date.now()),
                setTimeout(function () {
                  n === t && (n = void 0);
                }, 0);
            },
            !h.passiveSupported || { capture: !0, passive: !0 }
          );
        });
      },
      37: (t, e, r) => {
        'use strict';
        var n;
        r.r(e), r.d(e, { isBoxModel: () => i, elemOffset: () => a, elemZoom: () => s });
        var i = function () {
            if (null != n) return n;
            var t = document.createElement('div');
            return (
              (t.style.paddingLeft = t.style.width = '1px'),
              document.body.appendChild(t),
              (n = 2 === t.offsetWidth),
              document.body.removeChild(t),
              n
            );
          },
          a = function (t) {
            var e,
              r,
              n = document.body,
              a = document.defaultView,
              o = document.documentElement,
              l = t.getBoundingClientRect(),
              u = o.clientTop || n.clientTop || 0,
              c = o.clientLeft || n.clientLeft || 0;
            (e =
              a && null != a.pageYOffset
                ? a.pageYOffset
                : i() && o && null != o.scrollTop
                ? o.scrollTop
                : n.scrollTop),
              (r =
                a && null != a.pageXOffset
                  ? a.pageXOffset
                  : i() && o && null != o.scrollLeft
                  ? o.scrollLeft
                  : n.scrollLeft);
            var d = s(t);
            return {
              height: l.height * d,
              top: l.top * d + e - u,
              left: l.left * d + r - c,
              width: l.width * d,
              zoom: d,
            };
          },
          s = function t(e) {
            return e && e !== document.documentElement
              ? t(e.parentElement) * (getComputedStyle(e).zoom || 1)
              : 1;
          };
      },
      14: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            deliveryHost: () => T,
            akamaiHost: () => A,
            prodAkamaiHost: () => S,
            fastlyHost: () => L,
            appHost: () => _,
            cdnFastWistiaComHost: () => k,
            cdnFastWistiaNetHost: () => D,
            eV1Url: () => w,
            eV1Host: () => R,
            eV1Protocol: () => C,
            mediaDataHost: () => x,
            metricsHost: () => I,
            VALID_PRODUCTION_HOSTS: () => O,
            forceValidFastWistiaHost: () => F,
          });
        var n = r(15),
          i = r.n(n),
          a = r(2),
          s = r(16),
          o = i()('app'),
          l = i()('fast'),
          u = 'fast.wistia.net',
          c = 'fast.wistia.com',
          d = 'embed.wistia.com',
          f = 'embed-ssl.wistia.com',
          h = 'embed-a.wistia.com',
          v = 'embed-a.wistia.com',
          g = 'embedwistia-a.akamaihd.net',
          p = 'embedwistia-a.akamaihd.net',
          m = 'embed-fastly.wistia.com',
          y = 'embed-fastly.wistia.com',
          b =
            'undefined' != typeof window && a.default === window && a.default.location
              ? a.default.location.protocol
              : 'https:',
          E = function (t, e, r) {
            return 'https:' === t ? e : r;
          },
          T = function () {
            var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : b;
            return E(t, f, d);
          },
          A = function () {
            var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : b,
              e = 1 < arguments.length ? arguments[1] : void 0;
            return e === c || e === u ? S(t) : E(t, g, h);
          },
          S = function () {
            var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : b;
            return E(t, p, v);
          },
          L = function () {
            var t = 1 < arguments.length ? arguments[1] : void 0;
            return t === c || t === u ? y : m;
          },
          _ = function () {
            return o;
          },
          k = function () {
            return l;
          },
          D = function () {
            return 'fast.wistia.net';
          },
          w = (function () {
            for (var t, e = document.getElementsByTagName('script'), r = 0; r < e.length; r++)
              if ((t = e[r]).src) {
                var n = new s.Url(t.src),
                  i = /\/assets\/external\/E-v1(-with-vulcan-v2)?\.js$/.test(n.rawPath),
                  a = n.host === k() || n.host === D(),
                  o = 'https:' === location.protocol && 'https:' === n.protocol,
                  l = '' === n.protocol || null == n.protocol,
                  u = o || l || 'http:' === location.protocol,
                  c = !t.readyState || /loaded|complete/.test(t.readyState);
                if (i && a && u && c) return n;
              }
            return new s.Url(''.concat((0, s.proto)(), '//').concat(D(), '/E-v1.js'));
          })(),
          R = function () {
            return w.host;
          },
          C = function () {
            return w.protocol;
          },
          x = function () {
            var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
            return t.embedHost ? F(t.embedHost) : R();
          },
          I = function () {
            return 'pipedream.wistia.com';
          },
          O = ['wistia.net', 'wistia.com', 'wistia.st'],
          P = new RegExp(
            '(' +
              O.map(function (t) {
                return '\\.' + t.replace('.', '\\.');
              }).join('|') +
              ')$'
          ),
          F = function (t) {
            return t && P.test(t) ? t : R();
          };
      },
      38: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
        'use strict';
        __webpack_require__.r(__webpack_exports__),
          __webpack_require__.d(__webpack_exports__, {
            getScriptTags: () => getScriptTags,
            scriptTagsToRunScriptsInput: () => scriptTagsToRunScriptsInput,
            execScriptTags: () => execScriptTags,
            removeScriptTags: () => removeScriptTags,
          });
        var player_lib_script_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39),
          getScriptTags = function (t) {
            return (
              t.match(/<script.*?src[^>]*>\s*<\/script>|<script.*?>[\s\S]+?<\/script>/gi) || []
            );
          },
          scriptTagsToRunScriptsInput = function scriptTagsToRunScriptsInput(scriptTags) {
            if (!scriptTags) return [];
            scriptTags instanceof Array || (scriptTags = getScriptTags(scriptTags));
            for (var hashes = [], i = 0; i < scriptTags.length; i++) {
              var scriptTag = scriptTags[i],
                hash = {},
                matches = scriptTag.match(/<script.*?>/i);
              matches &&
                ((matches = matches[0].match(/src="([^"]+)"/i)),
                matches &&
                  ((hash.src = matches[1]),
                  (hash.async = /async/i.test(scriptTag.replace(hash.src, ''))))),
                matches ||
                  ((matches = scriptTag.match(/<script>([\s\S]+?)<\/script>/i)),
                  matches &&
                    (function () {
                      var src = matches[1];
                      hash.fn = function () {
                        return eval(src);
                      };
                    })()),
                hashes.push(hash);
            }
            return hashes;
          },
          execScriptTags = function (t, e) {
            if (!t) return null;
            var r = scriptTagsToRunScriptsInput(t);
            return (0, player_lib_script_utils__WEBPACK_IMPORTED_MODULE_0__.runScripts)(r).then(e);
          },
          removeScriptTags = function (t) {
            return t.replace(/<script.*?src[^>]*>\s*<\/script>|<script>[\s\S]+?<\/script>/g, '');
          };
      },
      39: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            findScriptInDomBySrc: () => d,
            removeScriptsBySrc: () => f,
            runScript: () => h,
            runScripts: () => v,
            scriptInputsToHash: () => g,
          });
        var n = r(19),
          i = r(17),
          a = r(26),
          s = r.n(a),
          o = r(40);
        function l(t, e) {
          var r = Object.keys(t);
          if (Object.getOwnPropertySymbols) {
            var n = Object.getOwnPropertySymbols(t);
            e &&
              (n = n.filter(function (e) {
                return Object.getOwnPropertyDescriptor(t, e).enumerable;
              })),
              r.push.apply(r, n);
          }
          return r;
        }
        function u(t) {
          for (var e, r = 1; r < arguments.length; r++)
            (e = null == arguments[r] ? {} : arguments[r]),
              r % 2
                ? l(Object(e), !0).forEach(function (r) {
                    c(t, r, e[r]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(e))
                : l(Object(e)).forEach(function (r) {
                    Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(e, r));
                  });
          return t;
        }
        function c(t, e, r) {
          return (
            e in t
              ? Object.defineProperty(t, e, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (t[e] = r),
            t
          );
        }
        var d = function (t) {
            for (
              var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
                r = document.getElementsByTagName('script'),
                n = 0;
              n < r.length;
              n++
            ) {
              var i = r[n],
                a = i.getAttribute('src') || '';
              if (e.ignoreQueryParams) {
                var s = a.split('?'),
                  o = s[0];
                a = o;
              }
              if (
                (!e.scriptRegex &&
                  e.ignoreProtocol &&
                  ((a = a.replace(/^https?:/, '')), (t = t.replace(/^https?:/, ''))),
                e.scriptRegex && e.scriptRegex.test(a))
              )
                return i;
              if (e.testStartsWith && 0 === a.indexOf(t)) return i;
              if (a === t) return i;
            }
            return null;
          },
          f = function (t) {
            for (
              var e, r = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
              (e = d(t, r));

            )
              if (
                e &&
                ((e.onload = e.onreadystatechange = e.onerror = null),
                e.parentNode && (e.parentNode.removeChild, 1))
              )
                try {
                  e.parentNode.removeChild(e);
                } catch (t) {
                  setTimeout(function () {
                    throw t;
                  }, 0);
                }
          },
          h = function (t) {
            var e,
              r,
              n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 8e3,
              i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
            return (
              null == n && (n = 8e3),
              null == i && (i = {}),
              new (s())(function (a) {
                return (
                  !0 === i.once && (e = d(t)) && (r = !0),
                  i.once && r
                    ? void (
                        (!e.readyState || /loaded|complete/.test(e.readyState)) &&
                        setTimeout(function () {
                          a();
                        }, 1)
                      )
                    : (0, o.default)(t, n)
                        .then(a)
                        .catch(function (t) {
                          a(t),
                            setTimeout(function () {
                              console.error(t);
                            }, 1);
                        })
                );
              })
            );
          },
          v = function () {
            for (var t, e = arguments.length, r = Array(e), i = 0; i < e; i++) r[i] = arguments[i];
            (t = r[0] instanceof Array ? r[0] : r), (t = g(t));
            var a = [],
              o = [],
              l = [];
            return (
              t.forEach(function (t) {
                var e = u({}, t),
                  r = new (s())(function (t) {
                    e.resolve = t;
                  });
                (e.promise = r), l.push(e.promise), t.async ? a.push(e) : o.push(e);
              }),
              o.reduce(function (t, e) {
                if (e.fn)
                  try {
                    e.fn();
                  } catch (t) {
                    n.wlog.error(t);
                  } finally {
                    e.resolve();
                  }
                else e.src && h(e.src, null, e).then(e.resolve);
                return t.then(e.promise);
              }, s().resolve()),
              setTimeout(function () {
                a.forEach(function (t) {
                  if (t.fn)
                    try {
                      t.fn();
                    } catch (t) {
                      n.wlog.error(t);
                    } finally {
                      t.resolve();
                    }
                  else t.src && h(t.src, null, t).then(t.resolve);
                });
              }, 1),
              s().all(l)
            );
          },
          g = function (t) {
            for (var e, r = [], n = 0; n < t.length; n++)
              'string' == typeof (e = t[n])
                ? r.push({ src: e, async: !1 })
                : (0, i.isObject)(e)
                ? r.push(e)
                : r.push({ fn: e, async: !1 });
            return r;
          };
      },
      33: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { doTimeout: () => s, clearTimeouts: () => o });
        var n = r(1),
          i = r(17),
          a = n.default;
        null == a._timeouts && (a._timeouts = {});
        var s = function (t, e) {
            var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1;
            (0, i.isArray)(t) && (t = t.join('.'));
            var n = u(t);
            if ((o(t, n), e)) {
              var s = a._timeouts[n];
              null == s && (s = a._timeouts[n] = {});
              var l = setTimeout(function () {
                delete s[t], e();
              }, r);
              return (s[t] = l), l;
            }
            return a._timeouts[n][t];
          },
          o = function (t) {
            var e,
              r = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null;
            if (
              ((0, i.isArray)(t) && (t = t.join('.')),
              '__global__' === (r = r || u(t)) && (e = a._timeouts[t]))
            )
              for (var n in e) {
                var s = e[n];
                clearTimeout(s), delete e[n];
              }
            if ((e = a._timeouts[r]))
              for (var o in e) {
                var c = e[o];
                o.indexOf &&
                  0 === o.indexOf(t) &&
                  (o.length === t.length || '.' === o.charAt(t.length)) &&
                  (clearTimeout(c), delete e[o]);
              }
            a.blockSweepTimeouts ||
              ((a.blockSweepTimeouts = !0),
              setTimeout(l, 0),
              setTimeout(function () {
                a.blockSweepTimeouts = !1;
              }, 5e3));
          },
          l = function () {
            for (var t in a._timeouts) {
              var e = a._timeouts[t];
              (0, i.isEmpty)(e) && delete a._timeouts[t];
            }
          },
          u = function (t) {
            var e = t.indexOf('.');
            return 0 < e ? t.substring(0, e) : '__global__';
          };
      },
      18: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { default: () => i });
        var n = function (t, e) {
          for (var r in e) e.hasOwnProperty(r) && (t[r] = e[r]);
          return t;
        };
        const i = function (t) {
          for (var e = arguments.length, r = Array(1 < e ? e - 1 : 0), i = 1; i < e; i++)
            r[i - 1] = arguments[i];
          if (Object.assign) return Object.assign.apply(Object, [t].concat(r));
          for (var a = 0; a < r.length; a++) n(t, r[a]);
          return t;
        };
      },
      23: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            bind: () => o,
            unbind: () => l,
            rebind: () => u,
            trigger: () => c,
            once: () => f,
            initNamespace: () => h,
            bindNamed: () => v,
            unbindNamed: () => g,
            unbindAllInNamespace: () => p,
            bindify: () => y,
            Bindings: () => b,
          });
        var n = r(1);
        function i(t) {
          return (
            (function (t) {
              if (Array.isArray(t)) return a(t);
            })(t) ||
            (function (t) {
              if ('undefined' != typeof Symbol && Symbol.iterator in Object(t))
                return Array.from(t);
            })(t) ||
            (function (t, e) {
              if (t) {
                if ('string' == typeof t) return a(t, e);
                var r = Object.prototype.toString.call(t).slice(8, -1);
                return (
                  'Object' === r && t.constructor && (r = t.constructor.name),
                  'Map' === r || 'Set' === r
                    ? Array.from(t)
                    : 'Arguments' === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                    ? a(t, e)
                    : void 0
                );
              }
            })(t) ||
            (function () {
              throw new TypeError(
                'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
              );
            })()
          );
        }
        function a(t, e) {
          (null == e || e > t.length) && (e = t.length);
          for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
          return n;
        }
        var s = Array.prototype.slice,
          o = function (t, e) {
            var r = this;
            return (
              r._bindings || (r._bindings = {}),
              r._bindings[t] || (r._bindings[t] = []),
              r._bindings[t].push(e),
              function () {
                r.unbind(t, e);
              }
            );
          },
          l = function (t, e) {
            if (!this._bindings) return this;
            if (!this._bindings[t]) return this;
            for (var r, n = [], i = 0; i < this._bindings[t].length; i++)
              (r = this._bindings[t][i]) !== e && n.push(r);
            this._bindings[t] = n;
          },
          u = function (t, e) {
            return this.unbind(t, e), this.bind(t, e), { event: t, fn: e };
          },
          c = function (t) {
            for (var e = arguments.length, r = Array(1 < e ? e - 1 : 0), n = 1; n < e; n++)
              r[n - 1] = arguments[n];
            return (
              this._bindings && null != this._bindings.all && d.apply(this, ['all', t].concat(r)),
              d.apply(this, [t].concat(r))
            );
          },
          d = function (t) {
            if (!this._bindings) return this;
            if (!this._bindings[t]) return this;
            for (
              var e, r, a = s.call(arguments, 1), o = i(this._bindings[t]), l = 0;
              l < o.length;
              l++
            ) {
              r = o[l];
              try {
                var u = r.apply(this, a);
                u === this.unbind && (null == e && (e = []), e.push({ event: t, fn: r }));
              } catch (t) {
                if (this._throwTriggerErrors) throw t;
                n.default.error && n.default.error(t);
              }
            }
            if (e) for (var c, d = 0; d < e.length; d++) (c = e[d]), this.unbind(c.event, c.fn);
            return this;
          },
          f = function (t, e) {
            return o(t, function () {
              return e.apply(this, s.call(arguments, 0)), l;
            });
          },
          h = function (t, e) {
            null == t._namedBindings && (t._namedBindings = {}),
              null == t._namedBindings[e] && (t._namedBindings[e] = {});
          },
          v = function (t, e, r, n) {
            return (
              this.unbindNamed(t, e),
              (function (t, e, r, n, i) {
                h(t, e), (t._namedBindings[e][r] = { event: n, fn: i });
              })(this, t, e, r, n),
              this.bind(r, n),
              function () {
                this.unbindNamed(t, e);
              }
            );
          },
          g = function (t, e) {
            h(this, t);
            var r = (function (t, e, r) {
              return h(t, e), t._namedBindings[e][r];
            })(this, t, e);
            if (r) {
              var n = r.event,
                i = r.fn;
              this.unbind(n, i);
            }
            var a = this._namedBindings;
            return delete a[t][e], m(a[t]) && delete a[t], this;
          },
          p = function (t) {
            var e = this._namedBindings && this._namedBindings[t];
            if (null == e) return this;
            for (var r in e) e.hasOwnProperty(r) && this.unbindNamed(t, r);
          },
          m = function (t) {
            for (var e in t) if (t.hasOwnProperty(e)) return !1;
            return !0;
          },
          y = function (t) {
            return (
              (t.bind = o),
              (t.unbind = l),
              (t.on = o),
              (t.off = l),
              (t.rebind = u),
              (t.trigger = c),
              (t.bindNamed = v),
              (t.unbindNamed = g),
              (t.unbindAllInNamespace = p),
              t
            );
          },
          b = function () {};
        y(b.prototype);
      },
      20: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            callingPlayRequiresEventContext: () => z,
            webp: () => Y,
            cachedDetect: () => X,
            uncachedDetect: () => Q,
            clearDetectCache: () => $,
          });
        var n,
          i,
          a = r(1),
          s = r(2),
          o = navigator.userAgent,
          l = /(webkit)[ /]([^\s]+)/i,
          u = /OPR\/([^\s]+)/i,
          c = /(msie) ([^\s;]+)/i,
          d = /(trident)\/\s*([^;]+)/i,
          f = /(edge)\/(\d+(?:\.\d+)?)/i,
          h = /(mozilla)(?:.*? rv:([^\s)]+))?/i,
          v = /(android) ([^;]+)/i,
          g = /(iphone)/i,
          p = /(ipad)/i,
          m = /(Windows Phone OS (\d+(?:\.\d+)?))/,
          y = /OS (\d+)_(\d+)/i,
          b = /(playstation 3)/i,
          E = /BlackBerry|BB10/i,
          T = /(firefox)/i,
          A = /Mobile VR/i,
          S = /Version\/([^\s]+)/i,
          L = function () {
            return (k()[1] || 'webkit').toLowerCase();
          },
          _ = function () {
            return k()[2];
          },
          k = function () {
            var t;
            return (
              (t = o.match(f)) ||
              (t = o.match(l)) ||
              (t = o.match(u)) ||
              ((t = o.match(c))
                ? (null != document.documentMode && (t[2] = document.documentMode), t)
                : (t = o.match(h)) || [])
            );
          },
          D = function () {
            var t = o.match(v);
            return null != t && { version: t[2] };
          },
          w = function () {
            return g.test(o);
          },
          R = function () {
            return 0 < B() || D();
          },
          C = function () {
            try {
              var t = matchMedia('(hover:hover)');
              if ('not all' !== t.media) return t.matches;
            } catch (t) {}
            return !R();
          },
          x = function () {
            return E.test(o);
          },
          I = function () {
            return (
              !!(
                'MacIntel' === navigator.platform &&
                0 <= navigator.userAgent.indexOf('Mac') &&
                1 < navigator.maxTouchPoints
              ) || p.test(o)
            );
          },
          O = function () {
            return l.test(o) && !/chrome/i.test(o) && !I() && !w();
          },
          P = function () {
            return !(!/Chrome/.test(o) || !/Google Inc/.test(navigator.vendor)) && { version: F() };
          },
          F = function () {
            var t = o.match(/\bChrome\/([^\s]+)/);
            return t && t[1];
          },
          M = function () {
            return u.test(o);
          },
          B = function () {
            var t = o.match(y),
              e = o.match(S);
            return null == t
              ? null != e && e[1] && I()
                ? parseFloat(e[1])
                : 0
              : parseFloat(''.concat(t[1], '.').concat(t[2]));
          },
          N = function () {
            return d.test(o);
          },
          U = function () {
            return f.test(o);
          },
          j = function () {
            return T.test(o);
          },
          G = function () {
            try {
              try {
                var t = new ActiveXObject('ShockwaveFlash.ShockwaveFlash.6');
                try {
                  t.AllowScriptAccess = 'always';
                } catch (t) {
                  return [6, 0, 0];
                }
              } catch (t) {}
              return new ActiveXObject('ShockwaveFlash.ShockwaveFlash')
                .GetVariable('$version')
                .replace(/\D+/g, ',')
                .match(/^,?(.+),?$/)[1]
                .split(',');
            } catch (t) {
              try {
                if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin)
                  return (
                    navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']
                  ).description
                    .replace(/\D+/g, ',')
                    .match(/^,?(.+),?$/)[1]
                    .split(',');
              } catch (t) {}
            }
            return [0, 0, 0];
          },
          H = function () {
            var t = document.createElement('video'),
              e = !1;
            try {
              if (t.canPlayType) {
                ((e = {}).h264 =
                  !!t.canPlayType('video/mp4; codecs="avc1.42E01E"') ||
                  !!t.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"')),
                  (e.webm = !!t.canPlayType('video/webm; codecs="vp9, vorbis"')),
                  (e.nativeHls = !!t.canPlayType('application/vnd.apple.mpegURL'));
              }
            } catch (t) {
              e = { ogg: !1, h264: !1, webm: !1, nativeHls: !1 };
            }
            return e;
          },
          V = function () {
            try {
              return 'localStorage' in s.default && null != s.default.localStorage;
            } catch (t) {
              return !1;
            }
          },
          W = ['WebKit', 'Moz', 'O', 'Ms', ''],
          K = function () {
            for (var t = 0; t < W.length; t++) {
              var e = W[t] + 'MutationObserver';
              if (s.default[e]) return e;
            }
            return null;
          },
          q = function () {
            if (null != i) return i;
            try {
              var t = Object.defineProperty({}, 'passive', {
                get: function () {
                  i = !0;
                },
              });
              window.addEventListener('test', null, t);
            } catch (t) {
              i = !1;
            }
            return i;
          },
          z = function () {
            return 0 < B() || D() || O();
          },
          Y = function () {
            var t = P(),
              e = j(),
              r = U(),
              n = M(),
              i = t && 32 <= _(),
              a = t && 75 <= _() && D(),
              s = e && 65 <= _(),
              o = e && 67 <= _() && D(),
              l = r && 18 <= _(),
              u = n && 19 <= _();
            return i || a || s || o || l || u;
          },
          X = function () {
            return a.default._detectCache || (a.default._detectCache = Q()), a.default._detectCache;
          },
          Q = function () {
            var t,
              e,
              r,
              i,
              a,
              l,
              u,
              c = {
                appleSilicon:
                  (n || (n = document.createElement('canvas')),
                  (a = n.getContext('webgl') || n.getContext('experimental-webgl')) &&
                    ((l = a.getExtension('WEBGL_debug_renderer_info')),
                    (u = a.getParameter(l.UNMASKED_RENDERER_WEBGL))),
                  !(!u || -1 === u.indexOf('Apple M1'))),
                browser: {
                  version: _(),
                  quirks: 'msie' === L() && 'BackCompat' === document.compatMode,
                  old: 'msie' === L() && ('BackCompat' === document.compatMode || 7 > _()),
                  ltie8: 'msie' === L() && ('BackCompat' === document.compatMode || 8 > _()),
                },
                trident: N(),
                edge: U(),
                firefox: j(),
                gearvr: A.test(o),
                android: D(),
                oldandroid: D() && 4.1 > parseFloat(D().version) && !N(),
                iphone: w(),
                ipad: I(),
                blackberry: x(),
                safari: O(),
                chrome: P(),
                opera: M(),
                winphone: { version: m.test(o)[2] },
                ios: { version: B() },
                windows: /win/i.test(navigator.platform),
                mac: /mac/i.test(navigator.platform),
                linux: /linux/i.test(navigator.platform),
                retina: null != s.default.devicePixelRatio && 1 < s.default.devicePixelRatio,
                hoverIsNatural: C(),
                touchScreen: R(),
                ps3: b.test(o),
                flash:
                  ((i = G()),
                  {
                    version: parseFloat(i[0] + '.' + i[1]),
                    major: parseInt(i[0]),
                    minor: parseInt(i[1]),
                    rev: parseInt(i[2]),
                  }),
                video: H(),
                mediaSource:
                  s.default.MediaSource &&
                  s.default.MediaSource.isTypeSupported(
                    'video/mp4; codecs="avc1.42E01E, mp4a.40.2"'
                  ),
                nativeHls: (w() || I() || O()) && !N() && H().nativeHls,
                localstorage: V(),
                json: !(!s.default.JSON || 'function' != typeof JSON.parse),
                backgroundSize:
                  ((r = document.createElement('div')),
                  '' === r.style.backgroundSize ||
                    '' === r.style.webkitBackgroundSize ||
                    '' === r.style.mozBackgroundSize ||
                    '' === r.style.oBackgroundSize),
                fullscreenEnabled:
                  document.fullscreenEnabled ||
                  document.mozFullScreenEnabled ||
                  document.webkitFullscreenEnabled ||
                  document.msFullscreenEnabled,
                vulcanSupport:
                  ((t = /webkit|mozilla|edge/.test(L())),
                  (e = 'msie' === L() && 11 <= _()),
                  !(
                    w() ||
                    I() ||
                    D() ||
                    x() ||
                    (!t && !e) ||
                    !H().h264 ||
                    !Object.defineProperties
                  )),
                mutationObserver: K(),
                callingPlayRequiresEventContext: z(),
                passiveSupported: q(),
                webp: Y(),
              };
            return (c.browser[L()] = !0), c;
          },
          $ = function () {
            a.default._detectCache = null;
          };
      },
      35: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { isDocReady: () => i, onDocReady: () => a, default: () => s });
        var n = r(28),
          i = function () {
            return /loaded|complete/.test(document.readyState);
          },
          a = function () {
            var t, e;
            if (
              (1 < arguments.length
                ? ((t = arguments[0]), (e = arguments[1]))
                : ((t = 1e4), (e = arguments[0])),
              i())
            )
              e();
            else if (top === self && document.documentElement.doScroll) {
              var r = function () {
                try {
                  return document.documentElement.doScroll('left'), !0;
                } catch (t) {
                  return !1;
                }
              };
              (0, n.default)(r, e, 50, t, e);
            } else {
              var a = function () {
                  i() && (clearTimeout(u), o(), e());
                },
                s = function () {
                  document.addEventListener('DOMContentLoaded', a, !1),
                    document.addEventListener('readystatechange', a, !1),
                    window.addEventListener('load', a, !1);
                },
                o = function () {
                  document.removeEventListener('DOMContentLoaded', a, !1),
                    document.removeEventListener('readystatechange', a, !1),
                    window.removeEventListener('load', a, !1);
                },
                l = function () {
                  o(), e();
                },
                u = setTimeout(l, t);
              s();
            }
          };
        const s = a;
      },
      21: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            globalBind: () => i,
            globalOn: () => a,
            globalOff: () => s,
            globalRebind: () => o,
            globalTrigger: () => l,
            globalUnbind: () => u,
          });
        var n = r(1);
        (0, r(22).makeWbindable)(n.default);
        var i = n.default.bind.bind(n.default),
          a = n.default.on.bind(n.default),
          s = n.default.off.bind(n.default),
          o = n.default.rebind.bind(n.default),
          l = n.default.trigger.bind(n.default),
          u = n.default.unbind.bind(n.default);
      },
      106: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, { parseLegacyVideoQualityWidth: () => l, inferQualityRangeFromOpts: () => u });
        var n = r(45);
        function i(t, e) {
          return (
            (function (t) {
              if (Array.isArray(t)) return t;
            })(t) ||
            (function (t, e) {
              if ('undefined' != typeof Symbol && Symbol.iterator in Object(t)) {
                var r = [],
                  n = !0,
                  i = !1,
                  a = void 0;
                try {
                  for (
                    var s, o = t[Symbol.iterator]();
                    !(n = (s = o.next()).done) && (r.push(s.value), !e || r.length !== e);
                    n = !0
                  );
                } catch (t) {
                  (i = !0), (a = t);
                } finally {
                  try {
                    n || null == o.return || o.return();
                  } finally {
                    if (i) throw a;
                  }
                }
                return r;
              }
            })(t, e) ||
            (function (t, e) {
              if (t) {
                if ('string' == typeof t) return a(t, e);
                var r = Object.prototype.toString.call(t).slice(8, -1);
                return (
                  'Object' === r && t.constructor && (r = t.constructor.name),
                  'Map' === r || 'Set' === r
                    ? Array.from(t)
                    : 'Arguments' === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                    ? a(t, e)
                    : void 0
                );
              }
            })(t, e) ||
            (function () {
              throw new TypeError(
                'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
              );
            })()
          );
        }
        function a(t, e) {
          (null == e || e > t.length) && (e = t.length);
          for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
          return n;
        }
        var s = 2160,
          o = function (t) {
            return '4k' === t ? 2160 : parseInt(t, 10);
          },
          l = function (t, e) {
            var r = (0, n.filter)(e, { container: /mp4|flv/, status: n.READY, public: !0 })[0];
            if (/width:/.test(t) && r) {
              var a = i(t.match(/width:(\d+)/i), 2),
                s = (a[0], a[1]),
                o = parseInt(s, 10),
                l = r.width / r.height;
              return Math.round(o / l);
            }
          },
          u = function (t) {
            return t.videoQuality && 'auto' !== t.videoQuality
              ? 'sd-only' === t.videoQuality
                ? [200, 360]
                : 'md' === t.videoQuality
                ? [540, s]
                : 'hd-only' === t.videoQuality
                ? [720, s]
                : [360, s]
              : [t.qualityMin ? o(t.qualityMin) : 360, t.qualityMax ? o(t.qualityMax) : s];
          };
      },
      32: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { send: () => g, msend: () => p, count: () => m, sample: () => y });
        var n = r(1),
          i = r(33),
          a = r(19),
          s = r(17),
          o = r(34),
          l = r(16),
          u = r(14),
          c = r(25),
          d = r(41),
          f = void 0,
          h = n.default;
        null == h._metricsCache && (h._metricsCache = {});
        var v = h._metricsCache,
          g = function (t, e, r) {
            var n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {};
            try {
              null == v.toMput && (v.toMput = []), null == v.requestId && (v.requestId = 0);
              var l = s.merge(
                  { type: t, key: e, value: null == r ? null : r, request_id: v.requestId },
                  n
                ),
                u = JSON.stringify(l);
              a.wlog.debug('send metrics', u),
                v.toMput.push(u),
                (0, i.doTimeout)(
                  'metrics.debounce',
                  function () {
                    (0, o.pageLoaded)(function () {
                      p.apply(f, v.toMput), (v.toMput = []), (v.requestId += 1);
                    });
                  },
                  500
                );
            } catch (t) {
              a.wlog.error(t);
            }
          },
          p = function () {
            if ((0, d.isVisitorTrackingEnabled)()) {
              for (
                var t = ''
                    .concat((0, l.proto)(), '//')
                    .concat((0, u.metricsHost)(), '/mput?topic=metrics'),
                  e = arguments.length,
                  r = Array(e),
                  n = 0;
                n < e;
                n++
              )
                r[n] = arguments[n];
              return (0, c.xhrPost)(t, r.join('\n'));
            }
          },
          m = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1,
              r = 2 < arguments.length ? arguments[2] : void 0;
            return g('count', t, e, r);
          },
          y = function (t, e, r) {
            return g('sample', t, e, r);
          };
      },
      43: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            getLocalStorage: () => l,
            removeLocalStorage: () => u,
            setLocalStorage: () => c,
            updateLocalStorage: () => d,
          });
        var n = r(1),
          i = function (t) {
            setTimeout(function () {
              throw t;
            }, 0);
          },
          a = '_namespacedLocalStorage',
          s = function (t) {
            if (null != n.default._localStorageWorks) return n.default._localStorageWorks;
            try {
              var e = localStorage.getItem(t);
              localStorage.removeItem(t),
                localStorage.setItem(t, e),
                (n.default._localStorageWorks = !0);
            } catch (t) {
              n.default._localStorageWorks = !1;
            }
            return n.default._localStorageWorks;
          },
          o = function () {
            return null == n.default[a] && (n.default[a] = {}), n.default[a];
          },
          l = function (t) {
            if (!s()) return o()[t] || {};
            if (localStorage[t])
              try {
                return 'null' === localStorage[t] ? {} : JSON.parse(localStorage[t]);
              } catch (t) {
                i(t);
              }
            return {};
          },
          u = function (t) {
            if (s())
              try {
                localStorage.removeItem(t);
              } catch (t) {
                i(t);
              }
            else o()[t] = {};
          },
          c = function (t, e) {
            if (!s()) return null != e && 'object' == typeof e && (o()[t] = e), e;
            try {
              (o()[t] = e), (localStorage[t] = JSON.stringify(e));
            } catch (t) {
              i(t);
            }
            return e;
          },
          d = function (t, e) {
            var r = l(t);
            try {
              e(r);
            } catch (t) {
              i(t);
            }
            return c(t, r);
          };
      },
      17: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            merge: () => a,
            mergeOne: () => s,
            identityFunc: () => o,
            legacyShouldDeleteFromMerge: () => l,
            clone: () => u,
            getDeep: () => c,
            setDeep: () => d,
            setAndPreserveUndefined: () => f,
            unsetDeep: () => v,
            exists: () => g,
            assign: () => n.default,
            cast: () => p,
            castDeep: () => y,
            only: () => b,
            except: () => E,
            select: () => T,
            filter: () => _,
            values: () => S,
            sort: () => L,
            isArray: () => D,
            isObject: () => R,
            isFunction: () => C,
            isRegExp: () => I,
            isBasicType: () => P,
            isEmpty: () => F,
            isSubsetDeep: () => M,
            equalsDeep: () => B,
            eachDeep: () => N,
            eachLeaf: () => U,
            pick: () => j,
            indexOf: () => G,
            keys: () => H,
          });
        var n = r(18),
          i = Array.prototype.slice,
          a = function (t) {
            if (0 == (1 >= arguments.length ? 0 : arguments.length - 1)) return t;
            for (var e = 0; e < (1 >= arguments.length ? 0 : arguments.length - 1); e++)
              s(t, 1 > e + 1 || arguments.length <= e + 1 ? void 0 : arguments[e + 1]);
            return t;
          },
          s = function t(e, r) {
            var n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : o,
              i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : l;
            if (D(r)) {
              D(e) || (e = []);
              for (var a, s = 0; s < r.length; s++) {
                (a = r[s]), null == e[s] && null != a && (D(a) ? (e[s] = []) : R(a) && (e[s] = {}));
                var u = t(e[s], a, n);
                i(r, s, u) ? delete e[s] : (e[s] = u);
              }
              return n(e);
            }
            if (R(r)) {
              for (var c in r)
                if (r.hasOwnProperty(c) && (e.hasOwnProperty(c) || null == e[c])) {
                  var d = r[c];
                  D(d)
                    ? (!D(e[c]) && (e[c] = []), t(e[c], d, n), (e[c] = n(e[c])))
                    : R(d)
                    ? (!R(e[c]) && (e[c] = {}), t(e[c], d, n), (e[c] = n(e[c])))
                    : null == e
                    ? ((e = {}), !i(r, c, d) && (e[c] = n(d)))
                    : i(r, c, d)
                    ? delete e[c]
                    : (e[c] = n(d));
                }
              return n(e);
            }
            return n(r);
          },
          o = function (t) {
            return t;
          },
          l = function (t, e, r) {
            return null == r;
          },
          u = function (t, e) {
            return D(t) ? s([], t, e) : s({}, t, e);
          },
          c = function (t, e, r) {
            e = 'string' == typeof e ? e.split('.') : i.call(e);
            for (var n, a = t; null != t && e.length; ) {
              var s = e.shift();
              (void 0 !== t[s] && (R(t[s]) || D(t[s]))) ||
                !r ||
                (0 === s ? ((t = a[n] = [])[s] = {}) : (t[s] = {})),
                (a = t),
                (n = s),
                (t = t.hasOwnProperty(s) ? t[s] : void 0);
            }
            return t;
          },
          d = function (t, e, r) {
            return h(t, e, r, !0);
          },
          f = function (t, e, r) {
            return h(t, e, r, !1);
          },
          h = function (t, e, r) {
            var n = !(3 < arguments.length && void 0 !== arguments[3]) || arguments[3],
              a = (e = 'string' == typeof e ? e.split('.') : i.call(e)).pop();
            null != (t = c(t, e, !0)) &&
              (R(t) || D(t)) &&
              null != a &&
              (n && null == r ? delete t[a] : (t[a] = r));
          },
          v = function (t, e) {
            return d(t, e);
          },
          g = function (t, e) {
            return void 0 !== c(t, e);
          },
          p = function (t) {
            return null == t ? t : R(t) || D(t) ? y(t) : m('' + t, t);
          },
          m = function (t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : t;
            return /^-?[1-9]\d*?$/.test(t)
              ? parseInt(t, 10)
              : '0' === t || '-0' === t
              ? 0
              : /^-?\d*\.\d+$/.test(t)
              ? parseFloat(t)
              : !!/^true$/i.test(t) || (!/^false$/i.test(t) && e);
          },
          y = function (t) {
            return s(
              t,
              t,
              function (t) {
                return 'string' == typeof t ? m(t) : t;
              },
              function () {
                return !1;
              }
            );
          },
          b = function (t, e) {
            for (var r = {}, n = {}, i = 0; i < e.length; i++) n[e[i]] = !0;
            for (var a in t) n[a] && (r[a] = t[a]);
            return r;
          },
          E = function (t, e) {
            for (var r = {}, n = {}, i = 0; i < e.length; i++) n[e[i]] = !0;
            for (var a in t) n[a] || (r[a] = t[a]);
            return r;
          },
          T = function (t, e) {
            for (
              var r, n = [], i = 'function' == typeof e, a = i ? e : null, s = 0;
              s < t.length;
              s++
            )
              if (((r = t[s]), i)) a(r) && n.push(r);
              else {
                var o = !0;
                for (var l in e) {
                  var u = e[l];
                  if (u instanceof Array) {
                    if (!r[l] || r[l] < u[0] || r[l] > u[1]) {
                      o = !1;
                      break;
                    }
                  } else if (u instanceof RegExp) {
                    if (!u.test(r[l])) {
                      o = !1;
                      break;
                    }
                  } else if (u instanceof A) {
                    for (var c, d = !1, f = 0; f < u.values.length; f++)
                      if (((c = u.values[f]), r[l] === c)) {
                        d = !0;
                        break;
                      }
                    if (!d) {
                      o = !1;
                      break;
                    }
                  } else if ('function' == typeof u) {
                    if (null == r[l] || !u(r[l])) {
                      o = !1;
                      break;
                    }
                  } else if (r[l] !== u) {
                    o = !1;
                    break;
                  }
                }
                o && n.push(r);
              }
            return n;
          },
          A = function (t) {
            var e = this;
            return (e.values = t), e;
          },
          S = function () {
            for (var t = arguments.length, e = Array(t), r = 0; r < t; r++) e[r] = arguments[r];
            return new A(e);
          },
          L = function (t, e) {
            var r = 'function' == typeof e,
              n = r ? e : null,
              a = i.call(t);
            return (
              r
                ? a.sort(n)
                : a.sort(function (t, r) {
                    var n;
                    n = e instanceof Array ? u(e) : e.split(/\s*,\s*/);
                    for (var i = 0; 0 === i && 0 < n.length; ) {
                      var a = n.shift().split(/\s+/),
                        s = a[0],
                        o = a[1];
                      if (((o = 'desc' === o ? -1 : 1), t[s] < r[s])) {
                        i = -1 * o;
                        break;
                      }
                      if (t[s] !== r[s]) {
                        i = 1 * o;
                        break;
                      }
                      i = 0;
                    }
                    return i;
                  }),
              a
            );
          },
          _ = function (t, e, r) {
            for (var n = void 0 === r ? undefined : r, i = [], a = 0; a < t.length; a++)
              e.call(n, t[a], a, t) && i.push(t[a]);
            return i;
          },
          k = /^\s*function Array()/,
          D = function (t) {
            return null != t && t.push && k.test(t.constructor);
          },
          w = /^\s*function Object()/,
          R = function (t) {
            return null != t && 'object' == typeof t && w.test(t.constructor);
          },
          C = function (t) {
            return null != t && 'function' == typeof t;
          },
          x = /^\s*function RegExp()/,
          I = function (t) {
            return null != t && x.test(t.constructor);
          },
          O = /^string|number|boolean|function$/i,
          P = function (t) {
            return null != t && (O.test(typeof t) || I(t));
          },
          F = function (t) {
            if (null == t) return !0;
            if (D(t) && !t.length) return !0;
            if (R(t)) {
              for (var e in t) return !1;
              return !0;
            }
            return !1;
          },
          M = function (t, e) {
            if (t === e) return !0;
            if ((null != t && null == e) || (null == t && null != e)) return !1;
            var r = !0;
            return (
              U(t, function (t, n) {
                t !== c(e, n) && (r = !1);
              }),
              r
            );
          },
          B = function (t, e) {
            return M(t, e) && M(e, t);
          },
          N = function t(e, r, n, a, s) {
            if ((null == n && (n = []), P(e))) r(e, n, a, s);
            else if (R(e) || D(e)) {
              for (var o in (r(e, n, a, s), e))
                if (e.hasOwnProperty(o)) {
                  var l = i.call(n);
                  l.push(o), t(e[o], r, l, e, o);
                }
            } else r(e, n, a, s);
          },
          U = function (t, e) {
            N(t, function (t, r, n, i) {
              D(t) || R(t) || e(t, r, n, i);
            });
          },
          j = function (t, e) {
            for (var r, n = {}, i = 0; i < e.length; i++) t[(r = e[i])] && (n[r] = t[r]);
            return n;
          },
          G = function (t, e) {
            for (var r = 0; r < t.length; r++) if (t[r] === e) return r;
            return -1;
          },
          H = function (t) {
            if (Object.keys) return Object.keys(t);
            var e = [];
            for (var r in t) t.hasOwnProperty(r) && e.push(r);
            return e;
          };
      },
      36: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { default: () => n });
        const n = function (t) {
          var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 4e3,
            r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : document,
            n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : window;
          if (/loaded|complete/.test(r.readyState)) setTimeout(t, 0);
          else {
            var i = function () {
                n.removeEventListener('load', a, !1);
              },
              a = function () {
                clearTimeout(s), i(), t();
              };
            n.addEventListener('load', a, !1);
            var s = setTimeout(function () {
              i(), t();
            }, e);
          }
        };
      },
      28: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { default: () => n });
        const n = function (t, e) {
          var r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 50,
            n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 5e3,
            i = 4 < arguments.length ? arguments[4] : void 0,
            a = null,
            s = new Date().getTime(),
            o = function o() {
              return new Date().getTime() - s > n
                ? void ('function' == typeof i && i())
                : void (t() ? e() : (clearTimeout(a), (a = setTimeout(o, r))));
            };
          a = setTimeout(o, 1);
        };
      },
      2: (t, e, r) => {
        'use strict';
        var n;
        r.r(e), r.d(e, { default: () => i });
        try {
          (n = self).self !== n &&
            void 0 !== typeof n.self &&
            'undefined' != typeof window &&
            (n = window);
        } catch (t) {
          n = 'undefined' == typeof globalThis ? window : globalThis;
        }
        const i = n;
      },
      40: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { runScript: () => a, default: () => s });
        var n = r(26),
          i = r.n(n),
          a = function (t, e) {
            return new (i())(function (r, n) {
              var i;
              null == e && (e = 8e3),
                ((i = document.createElement('script')).src = t),
                (i.async = !0),
                (i.type = 'text/javascript');
              var a = null,
                s = !1,
                o = function () {
                  (i.onerror = i.onreadystatechange = i.onload = null),
                    clearTimeout(a),
                    clearTimeout(u),
                    (a = setTimeout(function () {
                      i && i.parentNode && i.parentNode.removeChild(i);
                    }, 500));
                },
                l = function () {
                  var t = i.readyState;
                  s ||
                    (t && !/loaded|complete/.test(t)) ||
                    ((s = !0),
                    setTimeout(function () {
                      r(), o();
                    }, 1));
                },
                u = setTimeout(function () {
                  (s = !0), o(), n('timeout');
                }, e);
              (i.onerror = function () {
                (s = !0), o(), n('error');
              }),
                (i.onreadystatechange = l),
                (i.onload = l),
                (document.body || document.head).appendChild(i);
            });
          };
        const s = a;
      },
      8: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { seqId: () => i });
        var n = r(1),
          i = function () {
            var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 'wistia_',
              e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : '',
              r = n.default._sequenceVal || 1,
              i = '' + t + r + e;
            return (n.default._sequenceVal = r + 1), i;
          };
      },
      41: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            migrateLegacyVisitorTracking: () => l,
            consent: () => u,
            setVisitorTrackingEnabled: () => c,
            isVisitorTrackingEnabled: () => d,
          });
        var n = r(1),
          i = r(21),
          a = r(42);
        function s(t) {
          return (
            (function (t) {
              if (Array.isArray(t)) return o(t);
            })(t) ||
            (function (t) {
              if ('undefined' != typeof Symbol && Symbol.iterator in Object(t))
                return Array.from(t);
            })(t) ||
            (function (t, e) {
              if (t) {
                if ('string' == typeof t) return o(t, e);
                var r = Object.prototype.toString.call(t).slice(8, -1);
                return (
                  'Object' === r && t.constructor && (r = t.constructor.name),
                  'Map' === r || 'Set' === r
                    ? Array.from(t)
                    : 'Arguments' === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                    ? o(t, e)
                    : void 0
                );
              }
            })(t) ||
            (function () {
              throw new TypeError(
                'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
              );
            })()
          );
        }
        function o(t, e) {
          (null == e || e > t.length) && (e = t.length);
          for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
          return n;
        }
        var l = function () {
          var t = (0, a.getWistiaLocalStorage)().visitorTrackingEnabled;
          null != t &&
            ((0, a.updateWistiaLocalStorage)(function (t) {
              return delete t.visitorTrackingEnabled;
            }),
            (n.default._visitorTracking = {}),
            (n.default._visitorTracking[n.default._visitorTrackingDomain] = {
              isEnabled: t,
              updatedAt: Date.now(),
            }),
            (0, a.updateWistiaLocalStorage)(function (t) {
              return (t.visitorTracking = n.default._visitorTracking);
            }));
        };
        n.default._visitorTrackingDomain ||
          (n.default._visitorTrackingDomain = location.hostname || ''),
          n.default._visitorTracking ||
            (l(),
            (n.default._visitorTracking = (0, a.getWistiaLocalStorage)().visitorTracking || {}));
        var u = function (t) {
          return null == t ? d() : c(t);
        };
        n.default.consent = u;
        var c = function (t) {
            var e =
              1 < arguments.length && void 0 !== arguments[1]
                ? arguments[1]
                : n.default._visitorTrackingDomain;
            'default' === t
              ? delete n.default._visitorTracking[e]
              : (n.default._visitorTracking[e] = {
                  isEnabled: 'true' === ''.concat(t),
                  updatedAt: Date.now(),
                }),
              (0, a.updateWistiaLocalStorage)(function (t) {
                return (t.visitorTracking = n.default._visitorTracking);
              }),
              (0, i.globalTrigger)('visitortrackingchange', t);
          },
          d = function () {
            if ('boolean' == typeof n.default._visitorTracking) return n.default._visitorTracking;
            if (n.default._visitorTracking) {
              var t = (function () {
                if (n.default._visitorTrackingDomain)
                  for (var t = n.default._visitorTrackingDomain.split('.'); 0 < t.length; ) {
                    var e = n.default._visitorTracking[t.join('.')],
                      r = e && e.isEnabled;
                    if (null != r) return r;
                    t.shift();
                  }
              })();
              if (null != t) return !!t;
            }
            var e = [];
            if (n.default.api && n.default.api.all)
              try {
                e.push.apply(e, s(n.default.api.all()));
              } catch (t) {}
            if (n.default.channel && n.default.channel.all)
              try {
                e.push.apply(e, s(n.default.channel.all()));
              } catch (t) {}
            return !e.some(function (t) {
              return !0 === (t._mediaData || t._galleryData || {}).privacyMode;
            });
          };
      },
      16: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            proto: () => a,
            queryParamsToObject: () => s,
            urlComponentToObject: () => o,
            objectToQueryParams: () => l,
            splitPath: () => u,
            joinPath: () => c,
            brack: () => d,
            debrack: () => f,
            Url: () => v,
            createUrl: () => p,
            parseUrl: () => m,
          });
        var n = r(17),
          i = r(19),
          a = function () {
            var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : location.href;
            return /^http:\/\//.test(t) ? 'http:' : 'https:';
          },
          s = function (t) {
            var e = {};
            if (!t) return e;
            for (var r = t.split('&'), a = 0; a < r.length; a++) {
              var s = r[a].split('='),
                l = s[0],
                u = s[1];
              try {
                l = f(decodeURIComponent(l)) || '';
              } catch (t) {
                setTimeout(function () {
                  i.wlog.notice(t);
                }, 50),
                  (l = '');
              }
              n.cast(l);
              var c = n.getDeep(e, l);
              if (null == c) n.setAndPreserveUndefined(e, l, o(u));
              else if (n.isArray(c)) c.push(o(u));
              else {
                var d = [c];
                d.push(o(u)), n.setAndPreserveUndefined(e, l, d);
              }
            }
            return e;
          },
          o = function (t) {
            if (null == t) return t;
            var e;
            try {
              e = decodeURIComponent(t);
            } catch (r) {
              setTimeout(function () {
                i.wlog.notice(r);
              }, 50),
                (e = t);
            }
            return e;
          },
          l = function (t) {
            var e = [];
            return (
              n.eachLeaf(t, function (t, r) {
                null == t
                  ? e.push(encodeURIComponent(d(r)))
                  : e.push(encodeURIComponent(d(r)) + '=' + encodeURIComponent(t));
              }),
              e.join('&')
            );
          },
          u = function (t) {
            var e = [];
            if (null == t) return e;
            for (var r, n = t.split(/\/+/), i = 0; i < n.length; i++)
              null != (r = n[i]) && '' !== r && e.push(r);
            return e;
          },
          c = function (t) {
            return 'string' == typeof t && (t = t.split('/')), null == t ? '' : '/' + t.join('/');
          },
          d = function (t) {
            for (var e = t[0], r = 1; r < t.length; r++) e += '[' + t[r] + ']';
            return e;
          },
          f = function (t) {
            return t.match(/([\w\-_]+)/g);
          },
          h = ['protocol', 'host', 'port', 'params', 'path'],
          v = function (t) {
            var e = this;
            return (
              (e.params = {}),
              (e.path = []),
              (e.host = ''),
              'object' == typeof t ? e.fromOptions(t) : t && e.fromRaw(t),
              e
            );
          },
          g = v.prototype;
        (g.fromOptions = function (t) {
          for (var e, r = 0; r < h.length; r++) null != t[(e = h[r])] && (this[e] = t[e]);
          return this;
        }),
          (g.fromRaw = function (t) {
            var e;
            return (
              (this.rawUrl = t),
              (e = t.match(/^((?:https?:)|(?:file:)|(?:ftp:))?\/\//)) &&
                (this.protocol = e[1] || void 0),
              (e = t.match(/\/\/([^:?#/]*)/)) && (this.host = e[1] || void 0),
              (e = t.match(/\/\/.*?(\/[^?#$]+)/) || t.match(/(^\/[^/][^?#$]+)/)) &&
                this.setPath(e[1]),
              (e = t.match(/:(\d+)/)) && (this.port = parseInt(e[1], 10)),
              (e = t.match(/\?([^#]+)/)) &&
                ((this.rawParams = e[1]), (this.params = s(this.rawParams))),
              (e = t.match(/#(.*)$/)) && (this.anchor = e[1]),
              this
            );
          }),
          (g.clone = function () {
            return new v({
              protocol: this.protocol,
              host: this.host,
              port: this.port,
              path: n.clone(this.path),
              params: n.clone(this.params),
              anchor: this.anchor,
            });
          }),
          (g.ext = function (t) {
            if (null != t) {
              var e = this.ext(),
                r = this.path.length - 1,
                n = new RegExp('\\.'.concat(e), 'g');
              return (
                e && (this.path[r] = ''.concat(this.path[r].replace(n, ''))),
                (this.path[r] = ''.concat(this.path[r], '.').concat(t))
              );
            }
            var i = this.path[this.path.length - 1].match(/\.(.*)$/);
            return (null != i && i[1]) || null;
          }),
          (g.isRelative = function () {
            var t =
                0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : window.location,
              e = this.protocol,
              r = this.host;
            return !((null != e && '' !== e && e !== t.protocol) || (r && r !== t.hostname));
          }),
          (g.toString = function () {
            return this.isRelative() ? this.relative() : this.absolute();
          }),
          (g.absolute = function () {
            var t = '';
            null != this.protocol && (t = this.protocol);
            var e = '';
            return (
              null != this.port && (e = ':' + this.port),
              ''
                .concat(t, '//')
                .concat(this.host || location.host)
                .concat(e)
                .concat(this.relative())
            );
          }),
          (g.relative = function () {
            var t = '';
            0 < this.path.length && ((t = c(this.path)), this._hasTrailingSlash && (t += '/'));
            var e = '?' + l(this.params);
            return 1 === e.length && (e = ''), ''.concat(t).concat(e).concat(this.relativeAnchor());
          }),
          (g.authority = function () {
            var t = null == this.port ? '' : ':'.concat(this.port);
            return ''.concat(this.host).concat(t);
          }),
          (g.relativeProtocol = function () {
            var t = '';
            return (
              null != this.port && (t = ':' + this.port),
              '//'.concat(this.host).concat(t).concat(this.relative())
            );
          }),
          (g.relativeAnchor = function () {
            var t = '';
            return null != this.anchor && (t = '#'.concat(this.anchor)), '' + t;
          }),
          (g.setPath = function (t) {
            (this.rawPath = t),
              (this._hasTrailingSlash = /\/$/.test(this.rawPath)),
              (this.path = u(this.rawPath));
          }),
          (v.create = function (t) {
            return new v(t);
          });
        var p = v.create;
        v.parse = function (t) {
          return new v(t);
        };
        var m = v.parse;
      },
      22: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { makeWbindable: () => a, default: () => s });
        var n = r(1),
          i = r(23);
        n.default.bindable ||
          (n.default.bindable = {
            bind: function (t, e) {
              return this.specialBind && !0 === this.specialBind.apply(this, arguments)
                ? this
                : e
                ? (i.bind.call(this, t, e), this)
                : void (
                    n.default.warn &&
                    n.default.warn(
                      this.constructor.name,
                      'bind',
                      'falsey value passed in as callback:',
                      e
                    )
                  );
            },
            unbind: function (t, e) {
              return (
                (this.specialUnbind && !0 === this.specialUnbind.apply(this, arguments)) ||
                  (e ? i.unbind.call(this, t, e) : this._bindings && (this._bindings[t] = []),
                  this._bindings &&
                    this._bindings[t] &&
                    !this._bindings[t].length &&
                    ((this._bindings[t] = null), delete this._bindings[t])),
                this
              );
            },
            on: function (t, e) {
              var r = this.specialBind && this.specialBind.apply(this, arguments);
              return 'function' == typeof r ? r : i.bind.call(this, t, e);
            },
            off: function (t, e) {
              var r = this.specialUnbind && this.specialUnbind.apply(this, arguments);
              return 'function' == typeof r ? r : i.unbind.call(this, t, e);
            },
            rebind: function (t, e) {
              return this.unbind(t, e), this.bind(t, e), this;
            },
            trigger: function (t) {
              for (var e, r = arguments.length, n = Array(1 < r ? r - 1 : 0), a = 1; a < r; a++)
                n[a - 1] = arguments[a];
              return (e = i.trigger).call.apply(e, [this, t].concat(n)), this;
            },
            bindNamed: function () {
              return i.bindNamed.apply(this, arguments);
            },
            unbindNamed: function () {
              return i.unbindNamed.apply(this, arguments);
            },
            unbindAllInNamespace: function () {
              return i.unbindAllInNamespace.apply(this, arguments);
            },
          });
        var a = function (t) {
          for (var e in n.default.bindable) {
            var r = n.default.bindable[e];
            t[e] || (t[e] = r);
          }
        };
        const s = n.default.bindable;
      },
      42: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            getWistiaLocalStorage: () => s,
            removeWistiaLocalStorage: () => o,
            setWistiaLocalStorage: () => l,
            updateWistiaLocalStorage: () => u,
          });
        var n = r(1),
          i = r(43),
          a = 'wistia',
          s = function () {
            return (0, i.getLocalStorage)(a);
          },
          o = function () {
            return (
              (n.default._localStorage = (0, i.removeLocalStorage)(a)), n.default._localStorage
            );
          },
          l = function (t) {
            return (
              (n.default._localStorage = (0, i.setLocalStorage)(a, t)), n.default._localStorage
            );
          },
          u = function (t) {
            return (
              (n.default._localStorage = (0, i.updateLocalStorage)(a, t)), n.default._localStorage
            );
          };
      },
      19: (t, e, r) => {
        'use strict';
        r.r(e),
          r.d(e, {
            ERROR: () => u,
            WARNING: () => c,
            NOTICE: () => d,
            INFO: () => f,
            DEBUG: () => h,
            LOG_LEVELS: () => v,
            Logger: () => p,
            wlog: () => S,
          });
        var n = r(1),
          i = r(20),
          a = r(21);
        function s(t) {
          return (
            (function (t) {
              if (Array.isArray(t)) return o(t);
            })(t) ||
            (function (t) {
              if ('undefined' != typeof Symbol && Symbol.iterator in Object(t))
                return Array.from(t);
            })(t) ||
            (function (t, e) {
              if (t) {
                if ('string' == typeof t) return o(t, e);
                var r = Object.prototype.toString.call(t).slice(8, -1);
                return (
                  'Object' === r && t.constructor && (r = t.constructor.name),
                  'Map' === r || 'Set' === r
                    ? Array.from(t)
                    : 'Arguments' === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                    ? o(t, e)
                    : void 0
                );
              }
            })(t) ||
            (function () {
              throw new TypeError(
                'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
              );
            })()
          );
        }
        function o(t, e) {
          (null == e || e > t.length) && (e = t.length);
          for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
          return n;
        }
        var l = (0, i.cachedDetect)(),
          u = 0,
          c = 1,
          d = 2,
          f = 3,
          h = 4,
          v = {
            ERROR: 0,
            WARNING: 1,
            NOTICE: 2,
            INFO: 3,
            DEBUG: 4,
            error: 0,
            warning: 1,
            notice: 2,
            info: 3,
            debug: 4,
          },
          g = function () {},
          p = function (t) {
            var e = this;
            null == t && (t = {});
            return (
              (e.error = function () {
                for (var t = arguments.length, r = Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                return e.log(u, r);
              }),
              (e.warn = function () {
                for (var t = arguments.length, r = Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                return e.log(c, r);
              }),
              (e.notice = function () {
                for (var t = arguments.length, r = Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                return e.log(c, r);
              }),
              (e.info = function () {
                for (var t = arguments.length, r = Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                return e.log(f, r);
              }),
              (e.debug = function () {
                for (var t = arguments.length, r = Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                return e.log(h, r);
              }),
              (e.ctx = t),
              e.ctx.initializedAt || e.reset(),
              e
            );
          },
          m = p.prototype;
        (m.reset = function () {
          (this.ctx.level = u),
            (this.ctx.grep = null),
            (this.ctx.grepv = null),
            (this.ctx.first1000LogLines = []),
            (this.ctx.last1000LogLines = []),
            (this.ctx.initializedAt = new Date().getTime());
        }),
          (m.setLevel = function (t) {
            var e = this.logFunc(f);
            null == v[t]
              ? e('Unknown log level "'.concat(t, '"'))
              : ((this.ctx.level = v[t]),
                e('Log level set to "'.concat(t, '" (').concat(v[t], ')')));
          }),
          (m.setGrep = function (t) {
            this.ctx.grep = t;
          }),
          (m.setGrepv = function (t) {
            this.ctx.grepv = t;
          }),
          (m.first1000LogLines = function () {
            return this.ctx.first1000LogLines;
          }),
          (m.last1000LogLines = function () {
            return this.ctx.last1000LogLines;
          }),
          (m.matchedGrep = function (t) {
            var e = !1;
            if (this.ctx.grep || this.ctx.grepv) {
              for (var r = [], n = 0; n < t.length; n++)
                try {
                  var i = t[n];
                  r.push(i.toString && i.toString());
                } catch (t) {
                  r.push('');
                }
              var a = r.join(' '),
                s = !this.ctx.grep || a.match(this.ctx.grep),
                o = !this.ctx.grepv || !a.match(this.ctx.grepv);
              e = s && o;
            } else e = !0;
            return e;
          }),
          (m.now = function () {
            return 'undefined' != typeof performance && 'function' == typeof performance.now
              ? performance.now().toFixed(3)
              : Date.now
              ? Date.now() - this.ctx.initializedAt
              : new Date().getTime() - this.ctx.initializedAt;
          }),
          (m.messagesToLogLine = function (t, e, r) {
            var n,
              i = [t, e];
            i = i.concat(r);
            try {
              200 < (n = i.join(' ') || '').length && (n = n.slice(0, 200));
            } catch (t) {
              n = 'could not serialize';
            }
            return n;
          }),
          (m.persistLine = function (t) {
            1e3 > this.ctx.first1000LogLines.length
              ? this.ctx.first1000LogLines.push(t)
              : (1e3 <= this.ctx.last1000LogLines.length && this.ctx.last1000LogLines.shift(),
                this.ctx.last1000LogLines.push(t));
          }),
          (m.log = function (t, e) {
            var r,
              n = t <= this.ctx.level,
              i = t < h,
              o = (n || i) && this.matchedGrep(e);
            if (
              (t === u &&
                (0, a.globalTrigger)('problem', { type: 'error-logged', data: { messages: e } }),
              o && (n || i) && (r = this.now()),
              i && o)
            ) {
              var c = this.messagesToLogLine(t, r, e);
              this.persistLine(c);
            }
            if (n && o) {
              var d,
                f = this.logFunc(t);
              1 === e.length && (d = e[0]) instanceof Error
                ? (f(d.message), d.stack && f(d.stack))
                : l.browser.msie && (9 > l.browser.version || l.browser.quirks)
                ? f(e.join(' '))
                : f.apply(void 0, s(e));
            }
          });
        var y = function () {
            for (var t = arguments.length, e = Array(t), r = 0; r < t; r++) e[r] = arguments[r];
            console.error.apply(console, e);
          },
          b = function () {
            for (var t = arguments.length, e = Array(t), r = 0; r < t; r++) e[r] = arguments[r];
            console.warn.apply(console, e);
          },
          E = function () {
            for (var t = arguments.length, e = Array(t), r = 0; r < t; r++) e[r] = arguments[r];
            console.info.apply(console, e);
          },
          T = function () {
            for (var t = arguments.length, e = Array(t), r = 0; r < t; r++) e[r] = arguments[r];
            console.debug.apply(console, e);
          },
          A = function (t) {
            console.log.apply(console, t);
          };
        (m.logFunc = function (t) {
          return (
            null == t && (t = this.level),
            console
              ? (t === u ? (e = y) : t === c ? (e = b) : t === f ? (e = E) : t === h && (e = T),
                e || (e = A),
                'function' != typeof e && ((this.noConsoleLog = !0), (e = g)),
                e)
              : g
          );
          var e;
        }),
          (m.maybePrefix = function (t, e) {
            if (t) {
              if ('function' == typeof t)
                try {
                  t = t();
                } catch (e) {
                  t = 'prefix err "'.concat(e.message, '"');
                }
              return t instanceof Array ? t.concat(e) : [t].concat(e);
            }
            return e;
          }),
          (m.getPrefixedFunctions = function (t) {
            var e = this;
            return {
              log: function () {
                for (var r = arguments.length, n = Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                return e.log(u, e.maybePrefix(t, n));
              },
              error: function () {
                for (var r = arguments.length, n = Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                return e.log(u, e.maybePrefix(t, n));
              },
              warn: function () {
                for (var r = arguments.length, n = Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                return e.log(c, e.maybePrefix(t, n));
              },
              notice: function () {
                for (var r = arguments.length, n = Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                return e.log(c, e.maybePrefix(t, n));
              },
              info: function () {
                for (var r = arguments.length, n = Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                return e.log(f, e.maybePrefix(t, n));
              },
              debug: function () {
                for (var r = arguments.length, n = Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                return e.log(h, e.maybePrefix(t, n));
              },
            };
          }),
          n.default && null == n.default.wlogCtx && (n.default.wlogCtx = {});
        var S = new p(n.default.wlogCtx);
      },
      25: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { xhr: () => s, xhrGet: () => o, xhrPost: () => l, xhrJsonPost: () => u });
        var n = r(18),
          i = r(26),
          a = r.n(i),
          s = function (t, e, r) {
            var n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {},
              i = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : {};
            return new (a())(function (a, s) {
              var o = new (i.XMLHttpRequest || XMLHttpRequest)();
              i.afterConstructor && i.afterConstructor(o);
              try {
                o.addEventListener(
                  'readystatechange',
                  function () {
                    if (!(o.readyState < 4))
                      if (
                        null != o.status &&
                        ((200 <= o.status && 300 > o.status) || 304 == o.status)
                      )
                        if (o.response && 'string' != typeof o.response)
                          a({
                            data: o.response,
                            status: o.status,
                            statusText: o.statusText,
                            xhr: o,
                          });
                        else if ('json' === i.dataType)
                          try {
                            var r = JSON.parse(o.responseText);
                            a({ data: r, status: o.status, statusText: o.statusText, xhr: o });
                          } catch (r) {
                            var n = new Error(
                              ''
                                .concat(t, ' ')
                                .concat(e, ' - Error parsing response text: ')
                                .concat(o.responseText, '.')
                            );
                            console.error(n.message), s(n);
                          }
                        else
                          a({
                            data: o.responseText,
                            status: o.status,
                            statusText: o.statusText,
                            xhr: o,
                          });
                      else {
                        var l = new Error(
                          ''
                            .concat(t, ' ')
                            .concat(e, ' - Got an unsuccessful status code: ')
                            .concat(o.status, '. ')
                            .concat(o.statusText)
                        );
                        (l.status = o.status), console.error(l.message), s(l);
                      }
                  },
                  !1
                );
              } catch (t) {
                console.error(t.message), console.error(t.stack);
              }
              o.addEventListener(
                'error',
                function () {
                  var t = new Error('XHR error');
                  (t.status = o.status), (t.xhr = o), s(t);
                },
                !1
              );
              if (
                (o.addEventListener(
                  'timeout',
                  function (t) {
                    var e = new Error('XHR timeout');
                    (e.status = o.status), (e.message = t && t.message), (e.xhr = o), s(t);
                  },
                  !1
                ),
                o.open(t, e, !0),
                i.withCredentials && (o.withCredentials = !0),
                i.timeout && (o.timeout = i.timeout),
                null != i.dataType && (o.responseType = i.dataType),
                'POST' !== t ||
                  n['content-type'] ||
                  o.setRequestHeader('content-type', 'application/x-www-form-urlencoded'),
                n)
              )
                for (var l in n) n.hasOwnProperty(l) && o.setRequestHeader(l.toLowerCase(), n[l]);
              o.send(r), i.afterSend && i.afterSend(o);
            });
          },
          o = function (t, e, r) {
            return s('GET', t, null, e, r);
          },
          l = function (t, e, r, n) {
            return s('POST', t, e, r, n);
          },
          u = function (t, e, r, i) {
            return (
              (r = (0, n.default)({}, r, { 'content-type': 'application/json' })),
              s('POST', t, JSON.stringify(e), r, i)
            );
          };
      },
      1: (t, e, r) => {
        'use strict';
        r.r(e), r.d(e, { default: () => a });
        var n = r(2);
        null == n.default.Wistia && (n.default.Wistia = {});
        var i = n.default.Wistia;
        null == i._initializers && (i._initializers = {}),
          null == i._destructors && (i._destructors = {}),
          null == i.mixin &&
            (i.mixin = function (t, e) {
              for (var r in e) e.hasOwnProperty(r) && (t[r] = e[r]);
            });
        const a = n.default.Wistia;
      },
      356: (t, e, r) => {
        var n,
          i,
          a,
          s,
          o,
          l,
          u,
          c = function (t, e) {
            return function () {
              return t.apply(e, arguments);
            };
          };
        (o = r(1).default),
          (s = r(347)),
          (u = o.lib('utilities/wlog').wlog),
          (l = u.getPrefixedFunctions('hlsabr')),
          (a = r(357).default),
          (n = r(358).default),
          (i = (function () {
            function t(t) {
              var e, r;
              (this.hls = t),
                (this.abandonRulesCheck = c(this.abandonRulesCheck, this)),
                (this._onFragLoaded = c(this._onFragLoaded, this)),
                (this._onFragLoading = c(this._onFragLoading, this)),
                (this._onError = c(this._onError, this)),
                (this.lastLoadedFragLevel = 0),
                (this._autoLevelCapping = -1),
                (this._nextAutoLevel = -1),
                (this.defaultEstimate = this.hls.config.abrEwmaDefaultEstimate || 5e5),
                (this.minTotalWeight = 0.001),
                (this._sampleCount = 0),
                (this._fast = new a(this.hls.config.abrEwmaFastVoD)),
                (this._slow = new a(this.hls.config.abrEwmaSlowVoD)),
                (this.minAutoLevel = 0),
                (r = this.hls.config.abrEwmaDefaultEstimate) &&
                  ((e = r / 8), this.sample(6e3, 6 * e)),
                this.hls.on(s.Events.FRAG_LOADING, this._onFragLoading),
                this.hls.on(s.Events.FRAG_LOADED, this._onFragLoaded),
                this.hls.on(s.Events.FRAG_LOADED, this._onError);
            }
            return (
              (t.prototype.destroy = function () {
                return (
                  this.clearTimer(),
                  this.hls.off(s.Events.FRAG_LOADED, this._onFragLoaded),
                  this.hls.off(s.Events.FRAG_LOADING, this._onFragLoading),
                  this.hls.off(s.Events.FRAG_LOADING, this._onError)
                );
              }),
              (t.prototype.getNextAutoLevel = function () {
                var t, e, r, n, i;
                if (((n = this.maxAutoLevel()), -1 !== this._nextAutoLevel))
                  return Math.min(this._nextAutoLevel, n);
                for (
                  t = this.getEstimate() / this.playbackRate(), e = r = 0, i = n;
                  0 <= i ? r <= i : r >= i;
                  e = 0 <= i ? ++r : --r
                )
                  if (
                    (e <= this.lastLoadedFragLevel
                      ? this.hls.config.abrBandWidthFactor * t
                      : this.hls.config.abrBandWidthUpFactor * t) < this.bitrateForLevel(e)
                  )
                    return Math.max(0, e - 1);
                return e - 1;
              }),
              (t.prototype.bitrateForLevel = function (t) {
                return 'function' == typeof this.hls.config.bitrateForLevel
                  ? this.hls.config.bitrateForLevel(t)
                  : this.hls.levels[t].bitrate;
              }),
              (t.prototype._onError = function (t, e) {
                var r, n;
                if (
                  ((r = e.details === s.ErrorDetails.FRAG_LOAD_ERROR),
                  (n = e.details === s.ErrorDetails.FRAG_LOAD_TIMEOUT),
                  r || n)
                )
                  return this.clearTimer();
              }),
              (t.prototype._onFragLoading = function (t, e) {
                var r, n;
                if (
                  (((r = e.frag).stats.loading.start = performance.now()),
                  (this.fragCurrent = r),
                  this.timer || (this.timer = setInterval(this.abandonRulesCheck, 100)),
                  !this._setupSeekTracking)
                )
                  return (
                    (this._setupSeekTracking = !0),
                    this.hls.media.addEventListener(
                      'seeked',
                      ((n = this),
                      function () {
                        var t;
                        if (null != (t = n.hls) && t.media)
                          return 0 < n.hls.media.currentTime && 3 > n.hls.media.currentTime
                            ? void 0
                            : ((n._justSeeked = !0),
                              clearTimeout(n._unsetSeekedTimeout),
                              (n._unsetSeekedTimeout = setTimeout(function () {
                                return (n._justSeeked = !1);
                              }, 3e3)));
                      })
                    )
                  );
              }),
              (t.prototype._onFragLoaded = function (t, e) {
                var r, n, i, a;
                if (
                  ((a = (i = e.frag).stats),
                  'main' === i.type && (this.clearTimer(), null == a.aborted && !a.alreadySampled))
                )
                  return (
                    (n = performance.now() - a.loading.start),
                    (r = a.loaded),
                    !this.hls.media.seeking && this._justSeeked && 3 > this.timeBeforeEndOfBuffer()
                      ? this.sample(0.35 * n, 0.35 * r)
                      : this.sample(n, r),
                    (this.lastLoadedFragLevel = i.level),
                    (this._nextAutoLevel = -1)
                  );
              }),
              (t.prototype.abandonRulesCheck = function () {
                var t, e, r, i, a, s, o, u, c, d, f, h, v, g, p;
                if (
                  ((p = (o = this.hls).media),
                  (!(i = this.fragCurrent).loader ||
                    (null == (v = i.loader.stats) ? void 0 : v.aborted)) &&
                    (o.config.debug.info(
                      'hlsjs: frag loader destroy or aborted, disarm abandonRulesCheck'
                    ),
                    this.clearTimer()),
                  p &&
                    !p.paused &&
                    i.autoLevel &&
                    i.level &&
                    ((u = 0.1),
                    3e3 < (g = performance.now() - i.stats.loading.start) &&
                      g > 1e3 * i.duration * 0.5 &&
                      ((c = o.levels),
                      (d = Math.max(1, (1e3 * i.loaded) / g)),
                      (t = this.bitrateForLevel(i.level)),
                      (r = Math.max(i.loaded, Math.round(((i.duration - u) * t) / 8))),
                      (h = p.currentTime),
                      (s = (r - i.loaded) / d),
                      (e = n.bufferInfo(p, h, o.config.maxBufferHole).end - h) < 2 * i.duration &&
                        s > e)))
                ) {
                  if (((f = i.level - 1), 0 === i.loaded))
                    return (
                      1 > p.currentTime &&
                        (isNaN(f) &&
                          l.error('abandonRulesCheck a: nextLoadLevel is NaN', f, s, e, h, d, g, c),
                        (o.startLevel = f)),
                      (o.nextLoadLevel = f)
                    );
                  for (
                    ;
                    0 <= f &&
                    ((t = this.bitrateForLevel(f)),
                    (a = (i.duration * t) / (7.2 * d) + u),
                    o.config.debug.info(
                      'hlsjs: fragLoadedDelay/bufferStarvationDelay/fragLevelNextLoadedDelay[' +
                        f +
                        '] :' +
                        s.toFixed(1) +
                        '/' +
                        e.toFixed(1) +
                        '/' +
                        a.toFixed(1)
                    ),
                    !(a < e));

                  )
                    f -= 1;
                  return (
                    1 < s - a &&
                      ((f = Math.max(0, f)),
                      1 > p.currentTime &&
                        (isNaN(f) &&
                          l.error('abandonRulesCheck b: nextLoadLevel is NaN', f, s, e, h, d, g, c),
                        (o.startLevel = f)),
                      (o.nextLoadLevel = f),
                      this.sample(g, i.loaded)),
                    o.config.debug.warn(
                      'loading too slow, abort fragment loading and switch to level ' + f
                    ),
                    i.loader.abort(),
                    this.clearTimer(),
                    o.trigger(Event.FRAG_LOAD_EMERGENCY_ABORTED, { frag: i }),
                    o.startLoad()
                  );
                }
              }),
              (t.prototype.clearTimer = function () {
                if (this.timer) return clearInterval(this.timer), (this.timer = null);
              }),
              (t.prototype.maxAutoLevel = function () {
                var t;
                return (
                  (t = this.hls.levels),
                  -1 === this._autoLevelCapping && (null == t ? void 0 : t.length)
                    ? t.length - 1
                    : this._autoLevelCapping
                );
              }),
              (t.prototype.playbackRate = function () {
                var t;
                return 0 === (null == (t = this.hls.media) ? void 0 : t.playbackRate)
                  ? 1
                  : Math.abs(t.playbackRate);
              }),
              (t.prototype.sample = function (t, e) {
                var r, n;
                return (
                  (n = (t = Math.max(t, 50)) / 1e3),
                  (r = (8e3 * e) / t),
                  this._fast.sample(n, r),
                  this._slow.sample(n, r),
                  (this._sampleCount += 1)
                );
              }),
              (t.prototype.getEstimate = function () {
                return 1 > this._sampleCount || this._fast.getTotalWeight() < this.minTotalWeight
                  ? this.defaultEstimate
                  : this.hls.media
                  ? 6 >= this.timeBeforeEndOfBuffer()
                    ? Math.min(this._fast.getEstimate(), this._slow.getEstimate())
                    : Math.max(this._fast.getEstimate(), this._slow.getEstimate())
                  : Math.min(this._fast.getEstimate(), this._slow.getEstimate());
              }),
              (t.prototype.timeBeforeEndOfBuffer = function () {
                return n.timeBeforeEndOfBuffer(this.hls.media, this.hls.config.maxBufferHole);
              }),
              (t.prototype.lastBufferedTime = function () {
                return n.lastBufferedTime(this.hls.media, this.hls.config.maxBufferHole);
              }),
              Object.defineProperties(t.prototype, {
                nextAutoLevel: {
                  get: function () {
                    return this.getNextAutoLevel();
                  },
                  set: function (t) {
                    return (this._nextAutoLevel = t);
                  },
                },
                autoLevelCapping: {
                  get: function () {
                    return this._autoLevelCapping;
                  },
                  set: function (t) {
                    return (this._autoLevelCapping = t);
                  },
                },
              }),
              t
            );
          })()),
          (t.exports = i);
      },
      347: function (t) {
        var e;
        'undefined' != typeof window &&
          ((e = function () {
            return (function (t) {
              function e(n) {
                if (r[n]) return r[n].exports;
                var i = (r[n] = { i: n, l: !1, exports: {} });
                return t[n].call(i.exports, i, i.exports, e), (i.l = !0), i.exports;
              }
              var r = {};
              return (
                (e.m = t),
                (e.c = r),
                (e.d = function (t, r, n) {
                  e.o(t, r) || Object.defineProperty(t, r, { enumerable: !0, get: n });
                }),
                (e.r = function (t) {
                  'undefined' != typeof Symbol &&
                    Symbol.toStringTag &&
                    Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }),
                    Object.defineProperty(t, '__esModule', { value: !0 });
                }),
                (e.t = function (t, r) {
                  if ((1 & r && (t = e(t)), 8 & r)) return t;
                  if (4 & r && 'object' == typeof t && t && t.__esModule) return t;
                  var n = Object.create(null);
                  if (
                    (e.r(n),
                    Object.defineProperty(n, 'default', { enumerable: !0, value: t }),
                    2 & r && 'string' != typeof t)
                  )
                    for (var i in t)
                      e.d(
                        n,
                        i,
                        function (e) {
                          return t[e];
                        }.bind(null, i)
                      );
                  return n;
                }),
                (e.n = function (t) {
                  var r =
                    t && t.__esModule
                      ? function () {
                          return t.default;
                        }
                      : function () {
                          return t;
                        };
                  return e.d(r, 'a', r), r;
                }),
                (e.o = function (t, e) {
                  return Object.prototype.hasOwnProperty.call(t, e);
                }),
                (e.p = '/dist/'),
                e((e.s = './src/hls.ts'))
              );
            })({
              './node_modules/eventemitter3/index.js': function (t, e, r) {
                'use strict';
                function n() {}
                function i(t, e, r) {
                  (this.fn = t), (this.context = e), (this.once = r || !1);
                }
                function a(t, e, r, n, a) {
                  if ('function' != typeof r)
                    throw new TypeError('The listener must be a function');
                  var s = new i(r, n || t, a),
                    o = u ? u + e : e;
                  return (
                    t._events[o]
                      ? t._events[o].fn
                        ? (t._events[o] = [t._events[o], s])
                        : t._events[o].push(s)
                      : ((t._events[o] = s), t._eventsCount++),
                    t
                  );
                }
                function s(t, e) {
                  0 == --t._eventsCount ? (t._events = new n()) : delete t._events[e];
                }
                function o() {
                  (this._events = new n()), (this._eventsCount = 0);
                }
                var l = Object.prototype.hasOwnProperty,
                  u = '~';
                Object.create &&
                  ((n.prototype = Object.create(null)), !new n().__proto__ && (u = !1)),
                  (o.prototype.eventNames = function () {
                    var t,
                      e,
                      r = [];
                    if (0 === this._eventsCount) return r;
                    for (e in (t = this._events)) l.call(t, e) && r.push(u ? e.slice(1) : e);
                    return Object.getOwnPropertySymbols
                      ? r.concat(Object.getOwnPropertySymbols(t))
                      : r;
                  }),
                  (o.prototype.listeners = function (t) {
                    var e = u ? u + t : t,
                      r = this._events[e];
                    if (!r) return [];
                    if (r.fn) return [r.fn];
                    for (var n = 0, i = r.length, a = Array(i); n < i; n++) a[n] = r[n].fn;
                    return a;
                  }),
                  (o.prototype.listenerCount = function (t) {
                    var e = u ? u + t : t,
                      r = this._events[e];
                    return r ? (r.fn ? 1 : r.length) : 0;
                  }),
                  (o.prototype.emit = function (t, e, r, n, i, a) {
                    var s = u ? u + t : t;
                    if (!this._events[s]) return !1;
                    var o,
                      l,
                      c = this._events[s],
                      d = arguments.length;
                    if (c.fn) {
                      switch ((c.once && this.removeListener(t, c.fn, void 0, !0), d)) {
                        case 1:
                          return c.fn.call(c.context), !0;
                        case 2:
                          return c.fn.call(c.context, e), !0;
                        case 3:
                          return c.fn.call(c.context, e, r), !0;
                        case 4:
                          return c.fn.call(c.context, e, r, n), !0;
                        case 5:
                          return c.fn.call(c.context, e, r, n, i), !0;
                        case 6:
                          return c.fn.call(c.context, e, r, n, i, a), !0;
                      }
                      for (l = 1, o = Array(d - 1); l < d; l++) o[l - 1] = arguments[l];
                      c.fn.apply(c.context, o);
                    } else {
                      var f,
                        h = c.length;
                      for (l = 0; l < h; l++)
                        switch ((c[l].once && this.removeListener(t, c[l].fn, void 0, !0), d)) {
                          case 1:
                            c[l].fn.call(c[l].context);
                            break;
                          case 2:
                            c[l].fn.call(c[l].context, e);
                            break;
                          case 3:
                            c[l].fn.call(c[l].context, e, r);
                            break;
                          case 4:
                            c[l].fn.call(c[l].context, e, r, n);
                            break;
                          default:
                            if (!o)
                              for (f = 1, o = Array(d - 1); f < d; f++) o[f - 1] = arguments[f];
                            c[l].fn.apply(c[l].context, o);
                        }
                    }
                    return !0;
                  }),
                  (o.prototype.on = function (t, e, r) {
                    return a(this, t, e, r, !1);
                  }),
                  (o.prototype.once = function (t, e, r) {
                    return a(this, t, e, r, !0);
                  }),
                  (o.prototype.removeListener = function (t, e, r, n) {
                    var i = u ? u + t : t;
                    if (!this._events[i]) return this;
                    if (!e) return s(this, i), this;
                    var a = this._events[i];
                    if (a.fn) a.fn !== e || (n && !a.once) || (r && a.context !== r) || s(this, i);
                    else {
                      for (var o = 0, l = [], c = a.length; o < c; o++)
                        (a[o].fn !== e || (n && !a[o].once) || (r && a[o].context !== r)) &&
                          l.push(a[o]);
                      l.length ? (this._events[i] = 1 === l.length ? l[0] : l) : s(this, i);
                    }
                    return this;
                  }),
                  (o.prototype.removeAllListeners = function (t) {
                    var e;
                    return (
                      t
                        ? ((e = u ? u + t : t), this._events[e] && s(this, e))
                        : ((this._events = new n()), (this._eventsCount = 0)),
                      this
                    );
                  }),
                  (o.prototype.off = o.prototype.removeListener),
                  (o.prototype.addListener = o.prototype.on),
                  (o.prefixed = u),
                  (o.EventEmitter = o),
                  (t.exports = o);
              },
              './node_modules/url-toolkit/src/url-toolkit.js': function (t, e, r) {
                var n, i, a, s, o;
                (n =
                  /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#[^]*)?$/),
                  (i = /^([^\/?#]*)([^]*)$/),
                  (a = /(?:\/|^)\.(?=\/)/g),
                  (s = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g),
                  (o = {
                    buildAbsoluteURL: function (t, e, r) {
                      if (((r = r || {}), (t = t.trim()), !(e = e.trim()))) {
                        if (!r.alwaysNormalize) return t;
                        var n = o.parseURL(t);
                        if (!n) throw new Error('Error trying to parse base URL.');
                        return (n.path = o.normalizePath(n.path)), o.buildURLFromParts(n);
                      }
                      var a = o.parseURL(e);
                      if (!a) throw new Error('Error trying to parse relative URL.');
                      if (a.scheme)
                        return r.alwaysNormalize
                          ? ((a.path = o.normalizePath(a.path)), o.buildURLFromParts(a))
                          : e;
                      var s = o.parseURL(t);
                      if (!s) throw new Error('Error trying to parse base URL.');
                      if (!s.netLoc && s.path && '/' !== s.path[0]) {
                        var l = i.exec(s.path);
                        (s.netLoc = l[1]), (s.path = l[2]);
                      }
                      s.netLoc && !s.path && (s.path = '/');
                      var u = {
                        scheme: s.scheme,
                        netLoc: a.netLoc,
                        path: null,
                        params: a.params,
                        query: a.query,
                        fragment: a.fragment,
                      };
                      if (!a.netLoc && ((u.netLoc = s.netLoc), '/' !== a.path[0]))
                        if (a.path) {
                          var c = s.path,
                            d = c.substring(0, c.lastIndexOf('/') + 1) + a.path;
                          u.path = o.normalizePath(d);
                        } else
                          (u.path = s.path),
                            a.params || ((u.params = s.params), !a.query && (u.query = s.query));
                      return (
                        null === u.path &&
                          (u.path = r.alwaysNormalize ? o.normalizePath(a.path) : a.path),
                        o.buildURLFromParts(u)
                      );
                    },
                    parseURL: function (t) {
                      var e = n.exec(t);
                      return e
                        ? {
                            scheme: e[1] || '',
                            netLoc: e[2] || '',
                            path: e[3] || '',
                            params: e[4] || '',
                            query: e[5] || '',
                            fragment: e[6] || '',
                          }
                        : null;
                    },
                    normalizePath: function (t) {
                      for (
                        t = t.split('').reverse().join('').replace(a, '');
                        t.length !== (t = t.replace(s, '')).length;

                      );
                      return t.split('').reverse().join('');
                    },
                    buildURLFromParts: function (t) {
                      return t.scheme + t.netLoc + t.path + t.params + t.query + t.fragment;
                    },
                  }),
                  (t.exports = o);
              },
              './node_modules/webworkify-webpack/index.js': function (t, e, r) {
                function n(t) {
                  function e(n) {
                    if (r[n]) return r[n].exports;
                    var i = (r[n] = { i: n, l: !1, exports: {} });
                    return t[n].call(i.exports, i, i.exports, e), (i.l = !0), i.exports;
                  }
                  var r = {};
                  (e.m = t),
                    (e.c = r),
                    (e.i = function (t) {
                      return t;
                    }),
                    (e.d = function (t, r, n) {
                      e.o(t, r) ||
                        Object.defineProperty(t, r, { configurable: !1, enumerable: !0, get: n });
                    }),
                    (e.r = function (t) {
                      Object.defineProperty(t, '__esModule', { value: !0 });
                    }),
                    (e.n = function (t) {
                      var r =
                        t && t.__esModule
                          ? function () {
                              return t.default;
                            }
                          : function () {
                              return t;
                            };
                      return e.d(r, 'a', r), r;
                    }),
                    (e.o = function (t, e) {
                      return Object.prototype.hasOwnProperty.call(t, e);
                    }),
                    (e.p = '/'),
                    (e.oe = function (t) {
                      throw (console.error(t), t);
                    });
                  var n = e((e.s = ENTRY_MODULE));
                  return n.default || n;
                }
                function i(t) {
                  return (t + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
                }
                function a(t, e, n) {
                  var a = {};
                  a[n] = [];
                  var s,
                    o = e.toString(),
                    l = o.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
                  if (!l) return a;
                  for (
                    var u,
                      c = l[1],
                      d = new RegExp(
                        '(\\\\n|\\W)' +
                          i(c) +
                          '\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',
                        'g'
                      );
                    (u = d.exec(o));

                  )
                    'dll-reference' !== u[3] && a[n].push(u[3]);
                  for (
                    d = new RegExp(
                      '\\(' +
                        i(c) +
                        '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',
                      'g'
                    );
                    (u = d.exec(o));

                  )
                    t[u[2]] || (a[n].push(u[1]), (t[u[2]] = r(u[1]).m)),
                      (a[u[2]] = a[u[2]] || []),
                      a[u[2]].push(u[4]);
                  for (var f = Object.keys(a), h = 0; h < f.length; h++)
                    for (var v = 0; v < a[f[h]].length; v++)
                      (s = a[f[h]][v]), !isNaN(1 * s) && (a[f[h]][v] = 1 * a[f[h]][v]);
                  return a;
                }
                function s(t) {
                  return Object.keys(t).reduce(function (e, r) {
                    return e || 0 < t[r].length;
                  }, !1);
                }
                t.exports = function (t, e) {
                  e = e || {};
                  var i = { main: r.m },
                    o = e.all
                      ? { main: Object.keys(i.main) }
                      : (function (t, e) {
                          for (var r = { main: [e] }, n = { main: [] }, i = { main: {} }; s(r); )
                            for (var o = Object.keys(r), l = 0; l < o.length; l++) {
                              var u = o[l],
                                c = r[u].pop();
                              if (((i[u] = i[u] || {}), !i[u][c] && t[u][c])) {
                                (i[u][c] = !0), (n[u] = n[u] || []), n[u].push(c);
                                for (
                                  var d = a(t, t[u][c], u), f = Object.keys(d), h = 0;
                                  h < f.length;
                                  h++
                                )
                                  (r[f[h]] = r[f[h]] || []), (r[f[h]] = r[f[h]].concat(d[f[h]]));
                              }
                            }
                          return n;
                        })(i, t),
                    l = '';
                  Object.keys(o)
                    .filter(function (t) {
                      return 'main' !== t;
                    })
                    .forEach(function (t) {
                      for (var e = 0; o[t][e]; ) e++;
                      o[t].push(e),
                        (i[t][e] =
                          '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'),
                        (l =
                          l +
                          'var ' +
                          t +
                          ' = (' +
                          n.toString().replace('ENTRY_MODULE', JSON.stringify(e)) +
                          ')({' +
                          o[t]
                            .map(function (e) {
                              return JSON.stringify(e) + ': ' + i[t][e].toString();
                            })
                            .join(',') +
                          '});\n');
                    }),
                    (l =
                      l +
                      'new ((' +
                      n.toString().replace('ENTRY_MODULE', JSON.stringify(t)) +
                      ')({' +
                      o.main
                        .map(function (t) {
                          return JSON.stringify(t) + ': ' + i.main[t].toString();
                        })
                        .join(',') +
                      '}))(self);');
                  var u = new window.Blob([l], { type: 'text/javascript' });
                  if (e.bare) return u;
                  var c = (
                      window.URL ||
                      window.webkitURL ||
                      window.mozURL ||
                      window.msURL
                    ).createObjectURL(u),
                    d = new window.Worker(c);
                  return (d.objectURL = c), d;
                };
              },
              './src/config.ts': function (t, e, r) {
                'use strict';
                function n() {
                  return (n =
                    Object.assign ||
                    function (t) {
                      for (var e, r = 1; r < arguments.length; r++)
                        for (var n in (e = arguments[r]))
                          Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                      return t;
                    }).apply(this, arguments);
                }
                function i(t, e) {
                  var r = Object.keys(t);
                  if (Object.getOwnPropertySymbols) {
                    var n = Object.getOwnPropertySymbols(t);
                    e &&
                      (n = n.filter(function (e) {
                        return Object.getOwnPropertyDescriptor(t, e).enumerable;
                      })),
                      r.push.apply(r, n);
                  }
                  return r;
                }
                function a(t) {
                  for (var e, r = 1; r < arguments.length; r++)
                    (e = null == arguments[r] ? {} : arguments[r]),
                      r % 2
                        ? i(Object(e), !0).forEach(function (r) {
                            s(t, r, e[r]);
                          })
                        : Object.getOwnPropertyDescriptors
                        ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(e))
                        : i(Object(e)).forEach(function (r) {
                            Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(e, r));
                          });
                  return t;
                }
                function s(t, e, r) {
                  return (
                    e in t
                      ? Object.defineProperty(t, e, {
                          value: r,
                          enumerable: !0,
                          configurable: !0,
                          writable: !0,
                        })
                      : (t[e] = r),
                    t
                  );
                }
                function o(t, e) {
                  if (
                    (e.liveSyncDurationCount || e.liveMaxLatencyDurationCount) &&
                    (e.liveSyncDuration || e.liveMaxLatencyDuration)
                  )
                    throw new Error(
                      "Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration"
                    );
                  if (
                    void 0 !== e.liveMaxLatencyDurationCount &&
                    (void 0 === e.liveSyncDurationCount ||
                      e.liveMaxLatencyDurationCount <= e.liveSyncDurationCount)
                  )
                    throw new Error(
                      'Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"'
                    );
                  if (
                    void 0 !== e.liveMaxLatencyDuration &&
                    (void 0 === e.liveSyncDuration ||
                      e.liveMaxLatencyDuration <= e.liveSyncDuration)
                  )
                    throw new Error(
                      'Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"'
                    );
                  return n({}, t, e);
                }
                function l(t) {
                  var e = t.loader;
                  e !== y.default && e !== m.default
                    ? (E.logger.log(
                        '[config]: Custom loader detected, cannot enable progressive streaming'
                      ),
                      (t.progressive = !1))
                    : Object(y.fetchSupported)() &&
                      ((t.loader = y.default),
                      (t.progressive = !0),
                      (t.enableSoftwareAES = !0),
                      E.logger.log('[config]: Progressive streaming enabled, using FetchLoader'));
                }
                r.r(e),
                  r.d(e, 'hlsDefaultConfig', function () {
                    return T;
                  }),
                  r.d(e, 'mergeConfig', function () {
                    return o;
                  }),
                  r.d(e, 'enableStreamingMode', function () {
                    return l;
                  });
                var u = r('./src/controller/abr-controller.ts'),
                  c = r('./src/controller/audio-stream-controller.ts'),
                  d = r('./src/controller/audio-track-controller.ts'),
                  f = r('./src/empty.js'),
                  h = r.n(f),
                  v = r('./src/controller/buffer-controller.ts'),
                  g = r('./src/controller/cap-level-controller.ts'),
                  p = r('./src/controller/fps-controller.ts'),
                  m = (r('./src/controller/cmcd-controller.ts'), r('./src/utils/xhr-loader.ts')),
                  y = r('./src/utils/fetch-loader.ts'),
                  b = r('./src/utils/mediakeys-helper.ts'),
                  E = r('./src/utils/logger.ts'),
                  T = a(
                    a(
                      {
                        autoStartLoad: !0,
                        startPosition: -1,
                        defaultAudioCodec: void 0,
                        debug: !1,
                        capLevelOnFPSDrop: !1,
                        capLevelToPlayerSize: !1,
                        initialLiveManifestSize: 1,
                        maxBufferLength: 30,
                        backBufferLength: 1 / 0,
                        maxBufferSize: 6e7,
                        maxBufferHole: 0.1,
                        highBufferWatchdogPeriod: 2,
                        nudgeOffset: 0.1,
                        nudgeMaxRetry: 3,
                        maxFragLookUpTolerance: 0.25,
                        liveSyncDurationCount: 3,
                        liveMaxLatencyDurationCount: 1 / 0,
                        liveSyncDuration: void 0,
                        liveMaxLatencyDuration: void 0,
                        maxLiveSyncPlaybackRate: 1,
                        liveDurationInfinity: !1,
                        liveBackBufferLength: null,
                        maxMaxBufferLength: 600,
                        enableWorker: !0,
                        enableSoftwareAES: !0,
                        manifestLoadingTimeOut: 1e4,
                        manifestLoadingMaxRetry: 1,
                        manifestLoadingRetryDelay: 1e3,
                        manifestLoadingMaxRetryTimeout: 64e3,
                        startLevel: void 0,
                        levelLoadingTimeOut: 1e4,
                        levelLoadingMaxRetry: 4,
                        levelLoadingRetryDelay: 1e3,
                        levelLoadingMaxRetryTimeout: 64e3,
                        fragLoadingTimeOut: 2e4,
                        fragLoadingMaxRetry: 6,
                        fragLoadingRetryDelay: 1e3,
                        fragLoadingMaxRetryTimeout: 64e3,
                        startFragPrefetch: !1,
                        fpsDroppedMonitoringPeriod: 5e3,
                        fpsDroppedMonitoringThreshold: 0.2,
                        appendErrorMaxRetry: 3,
                        loader: m.default,
                        fLoader: void 0,
                        pLoader: void 0,
                        xhrSetup: void 0,
                        licenseXhrSetup: void 0,
                        licenseResponseCallback: void 0,
                        abrController: u.default,
                        bufferController: v.default,
                        capLevelController: g.default,
                        fpsController: p.default,
                        stretchShortVideoTrack: !1,
                        maxAudioFramesDrift: 1,
                        forceKeyFrameOnDiscontinuity: !0,
                        abrEwmaFastLive: 3,
                        abrEwmaSlowLive: 9,
                        abrEwmaFastVoD: 3,
                        abrEwmaSlowVoD: 9,
                        abrEwmaDefaultEstimate: 5e5,
                        abrBandWidthFactor: 0.95,
                        abrBandWidthUpFactor: 0.7,
                        abrMaxWithRealBitrate: !1,
                        maxStarvationDelay: 4,
                        maxLoadingDelay: 4,
                        minAutoBitrate: 0,
                        emeEnabled: !1,
                        widevineLicenseUrl: void 0,
                        drmSystemOptions: {},
                        requestMediaKeySystemAccessFunc: b.requestMediaKeySystemAccess,
                        testBandwidth: !0,
                        progressive: !1,
                        lowLatencyMode: !0,
                        cmcd: void 0,
                      },
                      {
                        cueHandler: h.a,
                        enableCEA708Captions: !1,
                        enableWebVTT: !1,
                        enableIMSC1: !1,
                        captionsTextTrack1Label: 'English',
                        captionsTextTrack1LanguageCode: 'en',
                        captionsTextTrack2Label: 'Spanish',
                        captionsTextTrack2LanguageCode: 'es',
                        captionsTextTrack3Label: 'Unknown CC',
                        captionsTextTrack3LanguageCode: '',
                        captionsTextTrack4Label: 'Unknown CC',
                        captionsTextTrack4LanguageCode: '',
                        renderTextTracksNatively: !0,
                      }
                    ),
                    {},
                    {
                      subtitleStreamController: void 0,
                      subtitleTrackController: void 0,
                      timelineController: void 0,
                      audioStreamController: c.default,
                      audioTrackController: d.default,
                      emeController: void 0,
                      cmcdController: void 0,
                    }
                  );
              },
              './src/controller/abr-controller.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                r.r(e);
                var i = r('./src/polyfills/number.ts'),
                  a = r('./src/utils/ewma-bandwidth-estimator.ts'),
                  s = r('./src/events.ts'),
                  o = r('./src/utils/buffer-helper.ts'),
                  l = r('./src/errors.ts'),
                  u = r('./src/types/loader.ts'),
                  c = r('./src/utils/logger.ts'),
                  d = (function () {
                    function t(t) {
                      (this.hls = void 0),
                        (this.lastLoadedFragLevel = 0),
                        (this._nextAutoLevel = -1),
                        (this.timer = void 0),
                        (this.onCheck = this._abandonRulesCheck.bind(this)),
                        (this.fragCurrent = null),
                        (this.partCurrent = null),
                        (this.bitrateTestDelay = 0),
                        (this.bwEstimator = void 0),
                        (this.hls = t);
                      var e = t.config;
                      (this.bwEstimator = new a.default(
                        e.abrEwmaSlowVoD,
                        e.abrEwmaFastVoD,
                        e.abrEwmaDefaultEstimate
                      )),
                        this.registerListeners();
                    }
                    var e,
                      r,
                      d,
                      f = t.prototype;
                    return (
                      (f.registerListeners = function () {
                        var t = this.hls;
                        t.on(s.Events.FRAG_LOADING, this.onFragLoading, this),
                          t.on(s.Events.FRAG_LOADED, this.onFragLoaded, this),
                          t.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this),
                          t.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                          t.on(s.Events.ERROR, this.onError, this);
                      }),
                      (f.unregisterListeners = function () {
                        var t = this.hls;
                        t.off(s.Events.FRAG_LOADING, this.onFragLoading, this),
                          t.off(s.Events.FRAG_LOADED, this.onFragLoaded, this),
                          t.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this),
                          t.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                          t.off(s.Events.ERROR, this.onError, this);
                      }),
                      (f.destroy = function () {
                        this.unregisterListeners(),
                          this.clearTimer(),
                          (this.hls = this.onCheck = null),
                          (this.fragCurrent = this.partCurrent = null);
                      }),
                      (f.onFragLoading = function (t, e) {
                        var r,
                          n = e.frag;
                        n.type !== u.PlaylistLevelType.MAIN ||
                          this.timer ||
                          ((this.fragCurrent = n),
                          (this.partCurrent = null == (r = e.part) ? null : r),
                          (this.timer = self.setInterval(this.onCheck, 100)));
                      }),
                      (f.onLevelLoaded = function (t, e) {
                        var r = this.hls.config;
                        e.details.live
                          ? this.bwEstimator.update(r.abrEwmaSlowLive, r.abrEwmaFastLive)
                          : this.bwEstimator.update(r.abrEwmaSlowVoD, r.abrEwmaFastVoD);
                      }),
                      (f._abandonRulesCheck = function () {
                        var t = this.fragCurrent,
                          e = this.partCurrent,
                          r = this.hls,
                          n = r.autoLevelEnabled,
                          a = r.config,
                          l = r.media;
                        if (t && l) {
                          var u = e ? e.stats : t.stats,
                            d = e ? e.duration : t.duration;
                          if (u.aborted)
                            return (
                              c.logger.warn('frag loader destroy or aborted, disarm abandonRules'),
                              this.clearTimer(),
                              void (this._nextAutoLevel = -1)
                            );
                          if (n && !l.paused && l.playbackRate && l.readyState) {
                            var f = performance.now() - u.loading.start,
                              h = Math.abs(l.playbackRate);
                            if (!(f <= (500 * d) / h)) {
                              var v = r.levels,
                                g = r.minAutoLevel,
                                p = v[t.level],
                                m =
                                  u.total || Math.max(u.loaded, Math.round((d * p.maxBitrate) / 8)),
                                y = Math.max(
                                  1,
                                  u.bwEstimate ? u.bwEstimate / 8 : (1e3 * u.loaded) / f
                                ),
                                b = (m - u.loaded) / y,
                                E = l.currentTime,
                                T = (o.BufferHelper.bufferInfo(l, E, a.maxBufferHole).end - E) / h;
                              if (!(T >= (2 * d) / h || b <= T)) {
                                var A,
                                  S = Number.POSITIVE_INFINITY;
                                for (
                                  A = t.level - 1;
                                  A > g && !((S = (d * v[A].maxBitrate) / (6.4 * y)) < T);
                                  A--
                                );
                                if (!(S >= b)) {
                                  var L = this.bwEstimator.getEstimate();
                                  c.logger.warn(
                                    'Fragment ' +
                                      t.sn +
                                      (e ? ' part ' + e.index : '') +
                                      ' of level ' +
                                      t.level +
                                      ' is loading too slowly and will cause an underbuffer; aborting and switching to level ' +
                                      A +
                                      '\n      Current BW estimate: ' +
                                      (Object(i.isFiniteNumber)(L)
                                        ? (L / 1024).toFixed(3)
                                        : 'Unknown') +
                                      ' Kb/s\n      Estimated load time for current fragment: ' +
                                      b.toFixed(3) +
                                      ' s\n      Estimated load time for the next fragment: ' +
                                      S.toFixed(3) +
                                      ' s\n      Time to underbuffer: ' +
                                      T.toFixed(3) +
                                      ' s'
                                  ),
                                    (r.nextLoadLevel = A),
                                    this.bwEstimator.sample(f, u.loaded),
                                    this.clearTimer(),
                                    t.loader &&
                                      ((this.fragCurrent = this.partCurrent = null),
                                      t.loader.abort()),
                                    r.trigger(s.Events.FRAG_LOAD_EMERGENCY_ABORTED, {
                                      frag: t,
                                      part: e,
                                      stats: u,
                                    });
                                }
                              }
                            }
                          }
                        }
                      }),
                      (f.onFragLoaded = function (t, e) {
                        var r = e.frag,
                          n = e.part;
                        if (r.type === u.PlaylistLevelType.MAIN && Object(i.isFiniteNumber)(r.sn)) {
                          var a = n ? n.stats : r.stats,
                            o = n ? n.duration : r.duration;
                          if (
                            (this.clearTimer(),
                            (this.lastLoadedFragLevel = r.level),
                            (this._nextAutoLevel = -1),
                            this.hls.config.abrMaxWithRealBitrate)
                          ) {
                            var l = this.hls.levels[r.level],
                              c = (l.loaded ? l.loaded.bytes : 0) + a.loaded,
                              d = (l.loaded ? l.loaded.duration : 0) + o;
                            (l.loaded = { bytes: c, duration: d }),
                              (l.realBitrate = Math.round((8 * c) / d));
                          }
                          if (r.bitrateTest) {
                            var f = { stats: a, frag: r, part: n, id: r.type };
                            this.onFragBuffered(s.Events.FRAG_BUFFERED, f), (r.bitrateTest = !1);
                          }
                        }
                      }),
                      (f.onFragBuffered = function (t, e) {
                        var r = e.frag,
                          n = e.part,
                          i = n ? n.stats : r.stats;
                        if (
                          !i.aborted &&
                          r.type === u.PlaylistLevelType.MAIN &&
                          'initSegment' !== r.sn
                        ) {
                          var a = i.parsing.end - i.loading.start;
                          this.bwEstimator.sample(a, i.loaded),
                            (i.bwEstimate = this.bwEstimator.getEstimate()),
                            (this.bitrateTestDelay = r.bitrateTest ? a / 1e3 : 0);
                        }
                      }),
                      (f.onError = function (t, e) {
                        switch (e.details) {
                          case l.ErrorDetails.FRAG_LOAD_ERROR:
                          case l.ErrorDetails.FRAG_LOAD_TIMEOUT:
                            this.clearTimer();
                        }
                      }),
                      (f.clearTimer = function () {
                        self.clearInterval(this.timer), (this.timer = void 0);
                      }),
                      (f.getNextABRAutoLevel = function () {
                        var t = this.fragCurrent,
                          e = this.partCurrent,
                          r = this.hls,
                          n = r.maxAutoLevel,
                          i = r.config,
                          a = r.minAutoLevel,
                          s = r.media,
                          l = e ? e.duration : t ? t.duration : 0,
                          u = s ? s.currentTime : 0,
                          d = s && 0 !== s.playbackRate ? Math.abs(s.playbackRate) : 1,
                          f = this.bwEstimator
                            ? this.bwEstimator.getEstimate()
                            : i.abrEwmaDefaultEstimate,
                          h = (o.BufferHelper.bufferInfo(s, u, i.maxBufferHole).end - u) / d,
                          v = this.findBestLevel(
                            f,
                            a,
                            n,
                            h,
                            i.abrBandWidthFactor,
                            i.abrBandWidthUpFactor
                          );
                        if (0 <= v) return v;
                        c.logger.trace(
                          (h ? 'rebuffering expected' : 'buffer is empty') +
                            ', finding optimal quality level'
                        );
                        var g = l ? Math.min(l, i.maxStarvationDelay) : i.maxStarvationDelay,
                          p = i.abrBandWidthFactor,
                          m = i.abrBandWidthUpFactor;
                        if (!h) {
                          var y = this.bitrateTestDelay;
                          y &&
                            ((g = (l ? Math.min(l, i.maxLoadingDelay) : i.maxLoadingDelay) - y),
                            c.logger.trace(
                              'bitrate test took ' +
                                Math.round(1e3 * y) +
                                'ms, set first fragment max fetchDuration to ' +
                                Math.round(1e3 * g) +
                                ' ms'
                            ),
                            (p = m = 1));
                        }
                        return (v = this.findBestLevel(f, a, n, h + g, p, m)), Math.max(v, 0);
                      }),
                      (f.findBestLevel = function (t, e, r, n, i, a) {
                        for (
                          var s,
                            o,
                            l = this.fragCurrent,
                            u = this.partCurrent,
                            d = this.lastLoadedFragLevel,
                            f = this.hls.levels,
                            h = f[d],
                            v = !(null == h || null === (s = h.details) || void 0 === s || !s.live),
                            g = null == h ? void 0 : h.codecSet,
                            p = u ? u.duration : l ? l.duration : 0,
                            m = r;
                          m >= e;
                          m--
                        )
                          if ((o = f[m]) && (!g || o.codecSet === g)) {
                            var y,
                              b = o.details,
                              E =
                                (u
                                  ? null == b
                                    ? void 0
                                    : b.partTarget
                                  : null == b
                                  ? void 0
                                  : b.averagetargetduration) || p;
                            y = m <= d ? i * t : a * t;
                            var T = f[m].maxBitrate,
                              A = (T * E) / y;
                            if (
                              (c.logger.trace(
                                'level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: ' +
                                  m +
                                  '/' +
                                  Math.round(y) +
                                  '/' +
                                  T +
                                  '/' +
                                  E +
                                  '/' +
                                  n +
                                  '/' +
                                  A
                              ),
                              y > T && (!A || (v && !this.bitrateTestDelay) || A < n))
                            )
                              return m;
                          }
                        return -1;
                      }),
                      (e = t),
                      (r = [
                        {
                          key: 'nextAutoLevel',
                          get: function () {
                            var t = this._nextAutoLevel,
                              e = this.bwEstimator;
                            if (!(-1 === t || (e && e.canEstimate()))) return t;
                            var r = this.getNextABRAutoLevel();
                            return -1 !== t && (r = Math.min(t, r)), r;
                          },
                          set: function (t) {
                            this._nextAutoLevel = t;
                          },
                        },
                      ]) && n(e.prototype, r),
                      d && n(e, d),
                      t
                    );
                  })();
                e.default = d;
              },
              './src/controller/audio-stream-controller.ts': function (t, e, r) {
                'use strict';
                function n() {
                  return (n =
                    Object.assign ||
                    function (t) {
                      for (var e, r = 1; r < arguments.length; r++)
                        for (var n in (e = arguments[r]))
                          Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                      return t;
                    }).apply(this, arguments);
                }
                function i(t, e) {
                  return (i =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                r.r(e);
                var a = r('./src/polyfills/number.ts'),
                  s = r('./src/controller/base-stream-controller.ts'),
                  o = r('./src/events.ts'),
                  l = r('./src/utils/buffer-helper.ts'),
                  u = r('./src/controller/fragment-tracker.ts'),
                  c = r('./src/types/level.ts'),
                  d = r('./src/types/loader.ts'),
                  f = r('./src/loader/fragment.ts'),
                  h = r('./src/demux/chunk-cache.ts'),
                  v = r('./src/demux/transmuxer-interface.ts'),
                  g = r('./src/types/transmuxer.ts'),
                  p = r('./src/controller/fragment-finders.ts'),
                  m = r('./src/utils/discontinuities.ts'),
                  y = r('./src/errors.ts'),
                  b = r('./src/utils/logger.ts'),
                  E = (function (t) {
                    function e(e, r) {
                      var n;
                      return (
                        ((n = t.call(this, e, r, '[audio-stream-controller]') || this).videoBuffer =
                          null),
                        (n.videoTrackCC = -1),
                        (n.waitingVideoCC = -1),
                        (n.audioSwitch = !1),
                        (n.trackId = -1),
                        (n.waitingData = null),
                        (n.mainDetails = null),
                        (n.bufferFlushed = !1),
                        n._registerListeners(),
                        n
                      );
                    }
                    var r, E;
                    (E = t),
                      ((r = e).prototype = Object.create(E.prototype)),
                      (r.prototype.constructor = r),
                      i(r, E);
                    var T = e.prototype;
                    return (
                      (T.onHandlerDestroying = function () {
                        this._unregisterListeners(), (this.mainDetails = null);
                      }),
                      (T._registerListeners = function () {
                        var t = this.hls;
                        t.on(o.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          t.on(o.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          t.on(o.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          t.on(o.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                          t.on(o.Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this),
                          t.on(o.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this),
                          t.on(o.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this),
                          t.on(o.Events.ERROR, this.onError, this),
                          t.on(o.Events.BUFFER_RESET, this.onBufferReset, this),
                          t.on(o.Events.BUFFER_CREATED, this.onBufferCreated, this),
                          t.on(o.Events.BUFFER_FLUSHED, this.onBufferFlushed, this),
                          t.on(o.Events.INIT_PTS_FOUND, this.onInitPtsFound, this),
                          t.on(o.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                      }),
                      (T._unregisterListeners = function () {
                        var t = this.hls;
                        t.off(o.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          t.off(o.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          t.off(o.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          t.off(o.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                          t.off(o.Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this),
                          t.off(o.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this),
                          t.off(o.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this),
                          t.off(o.Events.ERROR, this.onError, this),
                          t.off(o.Events.BUFFER_RESET, this.onBufferReset, this),
                          t.off(o.Events.BUFFER_CREATED, this.onBufferCreated, this),
                          t.off(o.Events.BUFFER_FLUSHED, this.onBufferFlushed, this),
                          t.off(o.Events.INIT_PTS_FOUND, this.onInitPtsFound, this),
                          t.off(o.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                      }),
                      (T.onInitPtsFound = function (t, e) {
                        var r = e.frag,
                          n = e.id,
                          i = e.initPTS;
                        if ('main' === n) {
                          var a = r.cc;
                          (this.initPTS[r.cc] = i),
                            this.log('InitPTS for cc: ' + a + ' found from main: ' + i),
                            (this.videoTrackCC = a),
                            this.state === s.State.WAITING_INIT_PTS && this.tick();
                        }
                      }),
                      (T.startLoad = function (t) {
                        if (!this.levels) {
                          return (this.startPosition = t), void (this.state = s.State.STOPPED);
                        }
                        var e = this.lastCurrentTime;
                        this.stopLoad();
                        this.setInterval(100);
                        this.fragLoadError = 0;
                        0 < e && -1 === t
                          ? (this.log(
                              'Override startPosition with lastCurrentTime @' + e.toFixed(3)
                            ),
                            (this.state = s.State.IDLE))
                          : ((this.loadedmetadata = !1), (this.state = s.State.WAITING_TRACK)),
                          (this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t),
                          this.tick();
                      }),
                      (T.doTick = function () {
                        switch (this.state) {
                          case s.State.IDLE:
                            this.doTickIdle();
                            break;
                          case s.State.WAITING_TRACK:
                            var e,
                              r = this.levels,
                              n = this.trackId,
                              i =
                                null == r || null === (e = r[n]) || void 0 === e
                                  ? void 0
                                  : e.details;
                            if (i) {
                              if (this.waitForCdnTuneIn(i)) break;
                              this.state = s.State.WAITING_INIT_PTS;
                            }
                            break;
                          case s.State.FRAG_LOADING_WAITING_RETRY:
                            var a,
                              o = performance.now(),
                              u = this.retryDate;
                            (!u ||
                              o >= u ||
                              (null !== (a = this.media) && void 0 !== a && a.seeking)) &&
                              (this.log('RetryDate reached, switch back to IDLE state'),
                              (this.state = s.State.IDLE));
                            break;
                          case s.State.WAITING_INIT_PTS:
                            var c = this.waitingData;
                            if (c) {
                              var d = c.frag,
                                f = c.part,
                                h = c.cache,
                                v = c.complete;
                              if (void 0 !== this.initPTS[d.cc]) {
                                (this.waitingData = null),
                                  (this.waitingVideoCC = -1),
                                  (this.state = s.State.FRAG_LOADING);
                                var g = {
                                  frag: d,
                                  part: f,
                                  payload: h.flush(),
                                  networkDetails: null,
                                };
                                this._handleFragmentLoadProgress(g),
                                  v && t.prototype._handleFragmentLoadComplete.call(this, g);
                              } else if (this.videoTrackCC !== this.waitingVideoCC)
                                b.logger.log(
                                  'Waiting fragment cc (' +
                                    d.cc +
                                    ') cancelled because video is at cc ' +
                                    this.videoTrackCC
                                ),
                                  this.clearWaitingFragment();
                              else {
                                var m = this.getLoadPosition(),
                                  y = l.BufferHelper.bufferInfo(
                                    this.mediaBuffer,
                                    m,
                                    this.config.maxBufferHole
                                  );
                                0 >
                                  Object(p.fragmentWithinToleranceTest)(
                                    y.end,
                                    this.config.maxFragLookUpTolerance,
                                    d
                                  ) &&
                                  (b.logger.log(
                                    'Waiting fragment cc (' +
                                      d.cc +
                                      ') @ ' +
                                      d.start +
                                      ' cancelled because another fragment at ' +
                                      y.end +
                                      ' is needed'
                                  ),
                                  this.clearWaitingFragment());
                              }
                            } else this.state = s.State.IDLE;
                        }
                        this.onTickEnd();
                      }),
                      (T.clearWaitingFragment = function () {
                        var t = this.waitingData;
                        t &&
                          (this.fragmentTracker.removeFragment(t.frag),
                          (this.waitingData = null),
                          (this.waitingVideoCC = -1),
                          (this.state = s.State.IDLE));
                      }),
                      (T.onTickEnd = function () {
                        var t = this.media;
                        if (t && t.readyState) {
                          var mediaBuffer = this.mediaBuffer;
                          var bufferThing = mediaBuffer ? mediaBuffer : t;
                          var e = bufferThing.buffered;

                          var isNotLoadedMetadata = !this.loadedmetadata;
                          var bufferedLength = e.length;

                          if (isNotLoadedMetadata && bufferedLength) {
                            this.loadedmetadata = !0;
                          }

                          this.lastCurrentTime = t.currentTime;
                        }
                      }),
                      (T.doTickIdle = function () {
                        var t,
                          e,
                          r = this.hls,
                          n = this.levels,
                          i = this.media,
                          a = this.trackId,
                          l = r.config;
                        if (n && n[a] && (i || (!this.startFragRequested && l.startFragPrefetch))) {
                          var u = n[a].details;
                          if (
                            !u ||
                            (u.live && this.levelLastLoaded !== a) ||
                            this.waitForCdnTuneIn(u)
                          )
                            return void (this.state = s.State.WAITING_TRACK);
                          this.bufferFlushed &&
                            ((this.bufferFlushed = !1),
                            this.afterBufferFlushed(
                              this.mediaBuffer ? this.mediaBuffer : this.media,
                              f.ElementaryStreamTypes.AUDIO,
                              d.PlaylistLevelType.AUDIO
                            ));
                          var c = this.getFwdBufferInfo(
                            this.mediaBuffer ? this.mediaBuffer : this.media,
                            d.PlaylistLevelType.AUDIO
                          );
                          if (null !== c) {
                            var h = c.len,
                              v = this.getMaxBufferLength(),
                              g = this.audioSwitch;
                            if (!(h >= v) || g) {
                              if (!g && this._streamEnded(c, u))
                                return (
                                  r.trigger(o.Events.BUFFER_EOS, { type: 'audio' }),
                                  void (this.state = s.State.ENDED)
                                );
                              var p = u.fragments[0].start,
                                m = c.end;
                              if (g) {
                                var y = this.getLoadPosition();
                                (m = y),
                                  u.PTSKnown &&
                                    y < p &&
                                    (c.end > p || c.nextStart) &&
                                    (this.log(
                                      'Alt audio track ahead of main track, seek to start of alt audio track'
                                    ),
                                    (i.currentTime = p + 0.05));
                              }
                              var b = this.getNextFragment(m, u);
                              return b
                                ? void ('identity' !==
                                    (null === (t = b.decryptdata) || void 0 === t
                                      ? void 0
                                      : t.keyFormat) ||
                                  (null !== (e = b.decryptdata) && void 0 !== e && e.key)
                                    ? this.loadFragment(b, u, m)
                                    : this.loadKey(b, u))
                                : void (this.bufferFlushed = !0);
                            }
                          }
                        }
                      }),
                      (T.getMaxBufferLength = function () {
                        var e = t.prototype.getMaxBufferLength.call(this),
                          r = this.getFwdBufferInfo(
                            this.videoBuffer ? this.videoBuffer : this.media,
                            d.PlaylistLevelType.MAIN
                          );
                        return null === r ? e : Math.max(e, r.len);
                      }),
                      (T.onMediaDetaching = function () {
                        (this.videoBuffer = null), t.prototype.onMediaDetaching.call(this);
                      }),
                      (T.onAudioTracksUpdated = function (t, e) {
                        var r = e.audioTracks;
                        this.resetTransmuxer(),
                          (this.levels = r.map(function (t) {
                            return new c.Level(t);
                          }));
                      }),
                      (T.onAudioTrackSwitching = function (t, e) {
                        var r = !!e.url;
                        this.trackId = e.id;
                        var n = this.fragCurrent;
                        null != n && n.loader && n.loader.abort(),
                          (this.fragCurrent = null),
                          this.clearWaitingFragment(),
                          r ? this.setInterval(100) : this.resetTransmuxer(),
                          r
                            ? ((this.audioSwitch = !0), (this.state = s.State.IDLE))
                            : (this.state = s.State.STOPPED),
                          this.tick();
                      }),
                      (T.onManifestLoading = function () {
                        (this.mainDetails = null),
                          this.fragmentTracker.removeAllFragments(),
                          (this.startPosition = this.lastCurrentTime = 0),
                          (this.bufferFlushed = !1);
                      }),
                      (T.onLevelLoaded = function (t, e) {
                        this.mainDetails = e.details;
                      }),
                      (T.onAudioTrackLoaded = function (t, e) {
                        var r,
                          n = this.levels,
                          i = e.details,
                          a = e.id;
                        if (n) {
                          this.log(
                            'Track ' +
                              a +
                              ' loaded [' +
                              i.startSN +
                              ',' +
                              i.endSN +
                              '],duration:' +
                              i.totalduration
                          );
                          var o = n[a],
                            l = 0;
                          if (i.live || (null !== (r = o.details) && void 0 !== r && r.live)) {
                            var u = this.mainDetails;
                            if (
                              (i.fragments[0] || (i.deltaUpdateFailed = !0),
                              i.deltaUpdateFailed || !u)
                            )
                              return;
                            !o.details && i.hasProgramDateTime && u.hasProgramDateTime
                              ? (Object(m.alignMediaPlaylistByPDT)(i, u),
                                (l = i.fragments[0].start))
                              : (l = this.alignPlaylists(i, o.details));
                          }
                          (o.details = i),
                            (this.levelLastLoaded = a),
                            this.startFragRequested ||
                              (!this.mainDetails && i.live) ||
                              this.setStartPosition(o.details, l),
                            this.state !== s.State.WAITING_TRACK ||
                              this.waitForCdnTuneIn(i) ||
                              (this.state = s.State.IDLE),
                            this.tick();
                        } else console.warn('Audio tracks were reset while loading level ' + a);
                      }),
                      (T._handleFragmentLoadProgress = function (t) {
                        var e,
                          r = t.frag,
                          n = t.part,
                          i = t.payload,
                          a = this.config,
                          o = this.trackId,
                          l = this.levels;
                        if (l) {
                          var u = l[o];
                          console.assert(u, 'Audio track is defined on fragment load progress');
                          var c = u.details;
                          console.assert(
                            c,
                            'Audio track details are defined on fragment load progress'
                          );
                          var f = a.defaultAudioCodec || u.audioCodec || 'mp4a.40.2',
                            p = this.transmuxer;
                          p ||
                            (p = this.transmuxer =
                              new v.default(
                                this.hls,
                                d.PlaylistLevelType.AUDIO,
                                this._handleTransmuxComplete.bind(this),
                                this._handleTransmuxerFlush.bind(this)
                              ));
                          var m = this.initPTS[r.cc],
                            y = null === (e = r.initSegment) || void 0 === e ? void 0 : e.data;
                          if (void 0 !== m) {
                            var E = n ? n.index : -1,
                              T = -1 !== E,
                              A = new g.ChunkMetadata(
                                r.level,
                                r.sn,
                                r.stats.chunkCount,
                                i.byteLength,
                                E,
                                T
                              );
                            p.push(i, y, f, '', r, n, c.totalduration, !1, A, m);
                          } else
                            b.logger.log(
                              'Unknown video PTS for cc ' +
                                r.cc +
                                ', waiting for video PTS before demuxing audio frag ' +
                                r.sn +
                                ' of [' +
                                c.startSN +
                                ' ,' +
                                c.endSN +
                                '],track ' +
                                o
                            ),
                              (this.waitingData = this.waitingData || {
                                frag: r,
                                part: n,
                                cache: new h.default(),
                                complete: !1,
                              }).cache.push(new Uint8Array(i)),
                              (this.waitingVideoCC = this.videoTrackCC),
                              (this.state = s.State.WAITING_INIT_PTS);
                        } else
                          console.warn(
                            'Audio tracks were reset while fragment load was in progress. Fragment ' +
                              r.sn +
                              ' of level ' +
                              r.level +
                              ' will not be buffered'
                          );
                      }),
                      (T._handleFragmentLoadComplete = function (e) {
                        return this.waitingData
                          ? void (this.waitingData.complete = !0)
                          : void t.prototype._handleFragmentLoadComplete.call(this, e);
                      }),
                      (T.onBufferReset = function () {
                        this.mediaBuffer = this.videoBuffer = null;
                        this.loadedmetadata = !1;
                      }),
                      (T.onBufferCreated = function (t, e) {
                        var r = e.tracks.audio;
                        r && (this.mediaBuffer = r.buffer),
                          e.tracks.video && (this.videoBuffer = e.tracks.video.buffer);
                      }),
                      (T.onFragBuffered = function (t, e) {
                        var r = e.frag,
                          n = e.part;
                        return r.type === d.PlaylistLevelType.AUDIO
                          ? this.fragContextChanged(r)
                            ? void console.warn(
                                'Fragment ' +
                                  r.sn +
                                  (n ? ' p: ' + n.index : '') +
                                  ' of level ' +
                                  r.level +
                                  ' finished buffering, but was aborted. state: ' +
                                  this.state +
                                  ', audioSwitch: ' +
                                  this.audioSwitch
                              )
                            : ('initSegment' !== r.sn &&
                                ((this.fragPrevious = r),
                                this.audioSwitch &&
                                  ((this.audioSwitch = !1),
                                  this.hls.trigger(o.Events.AUDIO_TRACK_SWITCHED, {
                                    id: this.trackId,
                                  }))),
                              void this.fragBufferedComplete(r, n))
                          : void 0;
                      }),
                      (T.onError = function (e, r) {
                        switch (r.details) {
                          case y.ErrorDetails.FRAG_LOAD_ERROR:
                          case y.ErrorDetails.FRAG_LOAD_TIMEOUT:
                          case y.ErrorDetails.KEY_LOAD_ERROR:
                          case y.ErrorDetails.KEY_LOAD_TIMEOUT:
                            this.onFragmentOrKeyLoadError(d.PlaylistLevelType.AUDIO, r);
                            break;
                          case y.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
                          case y.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
                            this.state !== s.State.ERROR &&
                              this.state !== s.State.STOPPED &&
                              ((this.state = r.fatal ? s.State.ERROR : s.State.IDLE),
                              console.warn(
                                r.details +
                                  ' while loading frag, switching to ' +
                                  this.state +
                                  ' state'
                              ));
                            break;
                          case y.ErrorDetails.BUFFER_FULL_ERROR:
                            if (
                              'audio' === r.parent &&
                              (this.state === s.State.PARSING || this.state === s.State.PARSED)
                            ) {
                              var n = !0,
                                i = this.getFwdBufferInfo(
                                  this.mediaBuffer,
                                  d.PlaylistLevelType.AUDIO
                                );
                              i && 0.5 < i.len && (n = !this.reduceMaxBufferLength(i.len)),
                                n &&
                                  (console.warn(
                                    'Buffer full error also media.currentTime is not buffered, flush audio buffer'
                                  ),
                                  (this.fragCurrent = null),
                                  t.prototype.flushMainBuffer.call(
                                    this,
                                    0,
                                    Number.POSITIVE_INFINITY,
                                    'audio'
                                  )),
                                this.resetLoadingState();
                            }
                        }
                      }),
                      (T.onBufferFlushed = function (t, e) {
                        e.type === f.ElementaryStreamTypes.AUDIO && (this.bufferFlushed = !0);
                      }),
                      (T._handleTransmuxComplete = function (t) {
                        var e,
                          r = this.hls,
                          i = t.remuxResult,
                          a = t.chunkMeta,
                          l = this.getCurrentContext(a);
                        if (!l)
                          return (
                            console.warn(
                              'The loading context changed while buffering fragment ' +
                                a.sn +
                                ' of level ' +
                                a.level +
                                '. This chunk will not be buffered.'
                            ),
                            void this.resetLiveStartWhenNotLoaded(a.level)
                          );
                        var u = l.frag,
                          c = l.part,
                          d = i.audio,
                          h = i.text,
                          v = i.id3,
                          g = i.initSegment;
                        if (!this.fragContextChanged(u)) {
                          if (
                            ((this.state = s.State.PARSING),
                            this.audioSwitch && d && this.completeAudioSwitch(),
                            null != g &&
                              g.tracks &&
                              (this._bufferInitSegment(g.tracks, u, a),
                              r.trigger(o.Events.FRAG_PARSING_INIT_SEGMENT, {
                                frag: u,
                                id: 'audio',
                                tracks: g.tracks,
                              })),
                            d)
                          ) {
                            var p = d.startPTS,
                              m = d.endPTS,
                              y = d.startDTS,
                              b = d.endDTS;
                            c &&
                              (c.elementaryStreams[f.ElementaryStreamTypes.AUDIO] = {
                                startPTS: p,
                                endPTS: m,
                                startDTS: y,
                                endDTS: b,
                              }),
                              u.setElementaryStreamInfo(f.ElementaryStreamTypes.AUDIO, p, m, y, b),
                              this.bufferFragmentData(d, u, c, a);
                          }
                          if (null != v && null !== (e = v.samples) && void 0 !== e && e.length) {
                            var E = n({ frag: u, id: 'audio' }, v);
                            r.trigger(o.Events.FRAG_PARSING_METADATA, E);
                          }
                          if (h) {
                            var T = n({ frag: u, id: 'audio' }, h);
                            r.trigger(o.Events.FRAG_PARSING_USERDATA, T);
                          }
                        }
                      }),
                      (T._bufferInitSegment = function (t, e, r) {
                        if (this.state === s.State.PARSING) {
                          t.video && delete t.video;
                          var n = t.audio;
                          if (n) {
                            (n.levelCodec = n.codec),
                              (n.id = 'audio'),
                              this.log(
                                'Init audio buffer, container:' +
                                  n.container +
                                  ', codecs[parsed]=[' +
                                  n.codec +
                                  ']'
                              ),
                              this.hls.trigger(o.Events.BUFFER_CODECS, t);
                            var i = n.initSegment;
                            if (null != i && i.byteLength) {
                              var a = {
                                type: 'audio',
                                frag: e,
                                part: null,
                                chunkMeta: r,
                                parent: e.type,
                                data: i,
                              };
                              this.hls.trigger(o.Events.BUFFER_APPENDING, a);
                            }
                            this.tick();
                          }
                        }
                      }),
                      (T.loadFragment = function (e, r, n) {
                        var i = this.fragmentTracker.getState(e);
                        (this.fragCurrent = e),
                          (this.audioSwitch ||
                            i === u.FragmentState.NOT_LOADED ||
                            i === u.FragmentState.PARTIAL) &&
                            ('initSegment' === e.sn
                              ? this._loadInitSegment(e)
                              : r.live && !Object(a.isFiniteNumber)(this.initPTS[e.cc])
                              ? (this.log(
                                  'Waiting for video PTS in continuity counter ' +
                                    e.cc +
                                    ' of live stream before loading audio fragment ' +
                                    e.sn +
                                    ' of level ' +
                                    this.trackId
                                ),
                                (this.state = s.State.WAITING_INIT_PTS))
                              : ((this.startFragRequested = !0),
                                t.prototype.loadFragment.call(this, e, r, n)));
                      }),
                      (T.completeAudioSwitch = function () {
                        var e = this.hls,
                          r = this.media,
                          n = this.trackId;
                        r &&
                          (this.log('Switching audio track : flushing all audio'),
                          t.prototype.flushMainBuffer.call(
                            this,
                            0,
                            Number.POSITIVE_INFINITY,
                            'audio'
                          )),
                          (this.audioSwitch = !1),
                          e.trigger(o.Events.AUDIO_TRACK_SWITCHED, { id: n });
                      }),
                      e
                    );
                  })(s.default);
                e.default = E;
              },
              './src/controller/audio-track-controller.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                function i(t, e) {
                  return (i =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                r.r(e);
                var a = r('./src/events.ts'),
                  s = r('./src/errors.ts'),
                  o = r('./src/controller/base-playlist-controller.ts'),
                  l = r('./src/types/loader.ts'),
                  u = (function (t) {
                    function e(e) {
                      var r;
                      return (
                        ((r = t.call(this, e, '[audio-track-controller]') || this).tracks = []),
                        (r.groupId = null),
                        (r.tracksInGroup = []),
                        (r.trackId = -1),
                        (r.trackName = ''),
                        (r.selectDefaultTrack = !0),
                        r.registerListeners(),
                        r
                      );
                    }
                    var r, o;
                    (o = t),
                      ((r = e).prototype = Object.create(o.prototype)),
                      (r.prototype.constructor = r),
                      i(r, o);
                    var u,
                      c,
                      d,
                      f = e.prototype;
                    return (
                      (f.registerListeners = function () {
                        var t = this.hls;
                        t.on(a.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          t.on(a.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                          t.on(a.Events.LEVEL_LOADING, this.onLevelLoading, this),
                          t.on(a.Events.LEVEL_SWITCHING, this.onLevelSwitching, this),
                          t.on(a.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this),
                          t.on(a.Events.ERROR, this.onError, this);
                      }),
                      (f.unregisterListeners = function () {
                        var t = this.hls;
                        t.off(a.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          t.off(a.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                          t.off(a.Events.LEVEL_LOADING, this.onLevelLoading, this),
                          t.off(a.Events.LEVEL_SWITCHING, this.onLevelSwitching, this),
                          t.off(a.Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this),
                          t.off(a.Events.ERROR, this.onError, this);
                      }),
                      (f.destroy = function () {
                        this.unregisterListeners(),
                          (this.tracks.length = 0),
                          (this.tracksInGroup.length = 0),
                          t.prototype.destroy.call(this);
                      }),
                      (f.onManifestLoading = function () {
                        (this.tracks = []),
                          (this.groupId = null),
                          (this.tracksInGroup = []),
                          (this.trackId = -1),
                          (this.trackName = ''),
                          (this.selectDefaultTrack = !0);
                      }),
                      (f.onManifestParsed = function (t, e) {
                        this.tracks = e.audioTracks || [];
                      }),
                      (f.onAudioTrackLoaded = function (t, e) {
                        var r = e.id,
                          n = e.details,
                          i = this.tracksInGroup[r];
                        if (i) {
                          var a = i.details;
                          (i.details = e.details),
                            this.log(
                              'audioTrack ' + r + ' loaded [' + n.startSN + '-' + n.endSN + ']'
                            ),
                            r === this.trackId &&
                              ((this.retryCount = 0), this.playlistLoaded(r, e, a));
                        } else console.warn('Invalid audio track id ' + r);
                      }),
                      (f.onLevelLoading = function (t, e) {
                        this.switchLevel(e.level);
                      }),
                      (f.onLevelSwitching = function (t, e) {
                        this.switchLevel(e.level);
                      }),
                      (f.switchLevel = function (t) {
                        var e = this.hls.levels[t];
                        if (null != e && e.audioGroupIds) {
                          var r = e.audioGroupIds[e.urlId];
                          if (this.groupId !== r) {
                            this.groupId = r;
                            var n = this.tracks.filter(function (t) {
                              return !r || t.groupId === r;
                            });
                            this.selectDefaultTrack &&
                              !n.some(function (t) {
                                return t.default;
                              }) &&
                              (this.selectDefaultTrack = !1),
                              (this.tracksInGroup = n);
                            var i = { audioTracks: n };
                            this.log(
                              'Updating audio tracks, ' +
                                n.length +
                                ' track(s) found in "' +
                                r +
                                '" group-id'
                            ),
                              this.hls.trigger(a.Events.AUDIO_TRACKS_UPDATED, i),
                              this.selectInitialTrack();
                          }
                        }
                      }),
                      (f.onError = function (e, r) {
                        t.prototype.onError.call(this, e, r),
                          r.fatal ||
                            !r.context ||
                            (r.context.type === l.PlaylistContextType.AUDIO_TRACK &&
                              r.context.id === this.trackId &&
                              r.context.groupId === this.groupId &&
                              this.retryLoadingOrFail(r));
                      }),
                      (f.setAudioTrack = function (t) {
                        var e = this.tracksInGroup;
                        if (0 > t || t >= e.length) {
                          console.warn('Invalid id passed to audio-track controller');
                        } else {
                          this.clearTimer();
                          var r = e[this.trackId];
                          this.log('Now switching to audio-track index ' + t);
                          var n = e[t];
                          var i = n.id;
                          var s = n.groupId;
                          var o = void 0 === s ? '' : s;
                          var l = n.name;
                          var u = n.type;
                          var c = n.url;
                          this.trackId = t;
                          this.trackName = l;
                          this.selectDefaultTrack = !1;
                          this.hls.trigger(a.Events.AUDIO_TRACK_SWITCHING, {
                            id: i,
                            groupId: o,
                            name: l,
                            type: u,
                            url: c,
                          });
                          if (!n.details || n.details.live) {
                            var d = this.switchParams(n.url, null == r ? void 0 : r.details);
                            this.loadPlaylist(d);
                          }
                        }
                      }),
                      (f.selectInitialTrack = function () {
                        var t = this.tracksInGroup;
                        console.assert(
                          t.length,
                          'Initial audio track should be selected when tracks are known'
                        );
                        var e = this.trackName,
                          r = this.findTrackId(e) || this.findTrackId();
                        -1 === r
                          ? (console.warn(
                              'No track found for running audio group-ID: ' + this.groupId
                            ),
                            this.hls.trigger(a.Events.ERROR, {
                              type: s.ErrorTypes.MEDIA_ERROR,
                              details: s.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,
                              fatal: !0,
                            }))
                          : this.setAudioTrack(r);
                      }),
                      (f.findTrackId = function (t) {
                        for (var e, r = this.tracksInGroup, n = 0; n < r.length; n++)
                          if (
                            ((e = r[n]),
                            (!this.selectDefaultTrack || e.default) && (!t || t === e.name))
                          )
                            return e.id;
                        return -1;
                      }),
                      (f.loadPlaylist = function (t) {
                        var e = this.tracksInGroup[this.trackId];
                        if (this.shouldLoadTrack(e)) {
                          var r = e.id,
                            n = e.groupId,
                            i = e.url;
                          if (t)
                            try {
                              i = t.addDirectives(i);
                            } catch (t) {
                              console.warn(
                                'Could not construct new URL with HLS Delivery Directives: ' + t
                              );
                            }
                          this.log('loading audio-track playlist for id: ' + r),
                            this.clearTimer(),
                            this.hls.trigger(a.Events.AUDIO_TRACK_LOADING, {
                              url: i,
                              id: r,
                              groupId: n,
                              deliveryDirectives: t || null,
                            });
                        }
                      }),
                      (u = e),
                      (c = [
                        {
                          key: 'audioTracks',
                          get: function () {
                            return this.tracksInGroup;
                          },
                        },
                        {
                          key: 'audioTrack',
                          get: function () {
                            return this.trackId;
                          },
                          set: function (t) {
                            (this.selectDefaultTrack = !1), this.setAudioTrack(t);
                          },
                        },
                      ]) && n(u.prototype, c),
                      d && n(u, d),
                      e
                    );
                  })(o.default);
                e.default = u;
              },
              './src/controller/base-playlist-controller.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return l;
                  });
                var n = r('./src/polyfills/number.ts'),
                  i = r('./src/types/level.ts'),
                  a = r('./src/controller/level-helper.ts'),
                  s = r('./src/utils/logger.ts'),
                  o = r('./src/errors.ts'),
                  l = (function () {
                    function t(t, e) {
                      (this.hls = void 0),
                        (this.timer = -1),
                        (this.canLoad = !1),
                        (this.retryCount = 0),
                        (this.log = void 0),
                        (console.warn = void 0),
                        (this.log = s.logger.log.bind(s.logger, e + ':')),
                        (console.warn = s.logger.warn.bind(s.logger, e + ':')),
                        (this.hls = t);
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {
                        this.clearTimer(), (this.hls = this.log = console.warn = null);
                      }),
                      (e.onError = function (t, e) {
                        e.fatal && e.type === o.ErrorTypes.NETWORK_ERROR && this.clearTimer();
                      }),
                      (e.clearTimer = function () {
                        clearTimeout(this.timer), (this.timer = -1);
                      }),
                      (e.startLoad = function () {
                        (this.canLoad = !0), (this.retryCount = 0), this.loadPlaylist();
                      }),
                      (e.stopLoad = function () {
                        (this.canLoad = !1), this.clearTimer();
                      }),
                      (e.switchParams = function (t, e) {
                        var r = null == e ? void 0 : e.renditionReports;
                        if (r)
                          for (var a = 0; a < r.length; a++) {
                            var s = r[a],
                              o = '' + s.URI;
                            if (o === t.substr(-o.length)) {
                              var l = parseInt(s['LAST-MSN']),
                                u = parseInt(s['LAST-PART']);
                              if (e && this.hls.config.lowLatencyMode) {
                                var c = Math.min(e.age - e.partTarget, e.targetduration);
                                void 0 !== u && c > e.partTarget && (u += 1);
                              }
                              if (Object(n.isFiniteNumber)(l))
                                return new i.HlsUrlParameters(
                                  l,
                                  Object(n.isFiniteNumber)(u) ? u : void 0,
                                  i.HlsSkip.No
                                );
                            }
                          }
                      }),
                      (e.loadPlaylist = function (t) {}),
                      (e.shouldLoadTrack = function (t) {
                        return this.canLoad && t && !!t.url && (!t.details || t.details.live);
                      }),
                      (e.playlistLoaded = function (t, e, r) {
                        var n = this,
                          i = e.details,
                          s = e.stats,
                          o = s.loading.end
                            ? Math.max(0, self.performance.now() - s.loading.end)
                            : 0;
                        if (
                          ((i.advancedDateTime = Date.now() - o), i.live || (null != r && r.live))
                        ) {
                          if (
                            (i.reloaded(r),
                            r &&
                              this.log(
                                'live playlist ' +
                                  t +
                                  ' ' +
                                  (i.advanced
                                    ? 'REFRESHED ' + i.lastPartSn + '-' + i.lastPartIndex
                                    : 'MISSED')
                              ),
                            r && 0 < i.fragments.length && Object(a.mergeDetails)(r, i),
                            !this.canLoad || !i.live)
                          )
                            return;
                          var l,
                            u = void 0,
                            c = void 0;
                          if (i.canBlockReload && i.endSN && i.advanced) {
                            var d = this.hls.config.lowLatencyMode,
                              f = i.lastPartSn,
                              h = i.endSN,
                              v = i.lastPartIndex,
                              g = f === h;
                            -1 !== v
                              ? ((u = g ? h + 1 : f), (c = g ? (d ? 0 : v) : v + 1))
                              : (u = h + 1);
                            var p = i.age,
                              m = p + i.ageHeader,
                              y = Math.min(m - i.partTarget, 1.5 * i.targetduration);
                            if (0 < y) {
                              if (r && y > r.tuneInGoal)
                                console.warn(
                                  'CDN Tune-in goal increased from: ' +
                                    r.tuneInGoal +
                                    ' to: ' +
                                    y +
                                    ' with playlist age: ' +
                                    i.age
                                ),
                                  (y = 0);
                              else {
                                var b = Math.floor(y / i.targetduration);
                                (u += b),
                                  void 0 !== c &&
                                    (c += Math.round((y % i.targetduration) / i.partTarget)),
                                  this.log(
                                    'CDN Tune-in age: ' +
                                      i.ageHeader +
                                      's last advanced ' +
                                      p.toFixed(2) +
                                      's goal: ' +
                                      y +
                                      ' skip sn ' +
                                      b +
                                      ' to part ' +
                                      c
                                  );
                              }
                              i.tuneInGoal = y;
                            }
                            if (
                              ((l = this.getDeliveryDirectives(i, e.deliveryDirectives, u, c)),
                              d || !g)
                            )
                              return void this.loadPlaylist(l);
                          } else l = this.getDeliveryDirectives(i, e.deliveryDirectives, u, c);
                          var E = Object(a.computeReloadInterval)(i, s);
                          void 0 !== u && i.canBlockReload && (E -= i.partTarget || 1),
                            this.log('reload live playlist ' + t + ' in ' + Math.round(E) + ' ms'),
                            (this.timer = self.setTimeout(function () {
                              return n.loadPlaylist(l);
                            }, E));
                        } else this.clearTimer();
                      }),
                      (e.getDeliveryDirectives = function (t, e, r, n) {
                        var a = Object(i.getSkipValue)(t, r);
                        return (
                          null != e &&
                            e.skip &&
                            t.deltaUpdateFailed &&
                            ((r = e.msn), (n = e.part), (a = i.HlsSkip.No)),
                          new i.HlsUrlParameters(r, n, a)
                        );
                      }),
                      (e.retryLoadingOrFail = function (t) {
                        var e,
                          r = this,
                          n = this.hls.config,
                          i = this.retryCount < n.levelLoadingMaxRetry;
                        if (i)
                          if (
                            (this.retryCount++,
                            -1 < t.details.indexOf('LoadTimeOut') &&
                              null !== (e = t.context) &&
                              void 0 !== e &&
                              e.deliveryDirectives)
                          )
                            console.warn(
                              'retry playlist loading #' +
                                this.retryCount +
                                ' after "' +
                                t.details +
                                '"'
                            ),
                              this.loadPlaylist();
                          else {
                            var a = Math.min(
                              Math.pow(2, this.retryCount) * n.levelLoadingRetryDelay,
                              n.levelLoadingMaxRetryTimeout
                            );
                            (this.timer = self.setTimeout(function () {
                              return r.loadPlaylist();
                            }, a)),
                              console.warn(
                                'retry playlist loading #' +
                                  this.retryCount +
                                  ' in ' +
                                  a +
                                  ' ms after "' +
                                  t.details +
                                  '"'
                              );
                          }
                        else
                          console.warn('cannot recover from error "' + t.details + '"'),
                            this.clearTimer(),
                            (t.fatal = !0);
                        return i;
                      }),
                      t
                    );
                  })();
              },
              './src/controller/base-stream-controller.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                function i(t, e) {
                  return (i =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                r.r(e),
                  r.d(e, 'State', function () {
                    return T;
                  }),
                  r.d(e, 'default', function () {
                    return A;
                  });
                var a = r('./src/polyfills/number.ts'),
                  s = r('./src/task-loop.ts'),
                  o = r('./src/controller/fragment-tracker.ts'),
                  l = r('./src/utils/buffer-helper.ts'),
                  u = r('./src/utils/logger.ts'),
                  c = r('./src/events.ts'),
                  d = r('./src/errors.ts'),
                  f = r('./src/types/transmuxer.ts'),
                  h = r('./src/utils/mp4-tools.ts'),
                  v = r('./src/utils/discontinuities.ts'),
                  g = r('./src/controller/fragment-finders.ts'),
                  p = r('./src/controller/level-helper.ts'),
                  m = r('./src/loader/fragment-loader.ts'),
                  y = r('./src/crypt/decrypter.ts'),
                  b = r('./src/utils/time-ranges.ts'),
                  E = r('./src/types/loader.ts'),
                  T = {
                    STOPPED: 'STOPPED',
                    IDLE: 'IDLE',
                    KEY_LOADING: 'KEY_LOADING',
                    FRAG_LOADING: 'FRAG_LOADING',
                    FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
                    WAITING_TRACK: 'WAITING_TRACK',
                    PARSING: 'PARSING',
                    PARSED: 'PARSED',
                    BACKTRACKING: 'BACKTRACKING',
                    ENDED: 'ENDED',
                    ERROR: 'ERROR',
                    WAITING_INIT_PTS: 'WAITING_INIT_PTS',
                    WAITING_LEVEL: 'WAITING_LEVEL',
                  },
                  A = (function (t) {
                    function e(e, r, n) {
                      var i;
                      return (
                        ((i = t.call(this) || this).hls = void 0),
                        (i.fragPrevious = null),
                        (i.fragCurrent = null),
                        (i.fragmentTracker = void 0),
                        (i.transmuxer = null),
                        (i._state = T.STOPPED),
                        (i.media = void 0),
                        (i.mediaBuffer = void 0),
                        (i.config = void 0),
                        (i.bitrateTest = !1),
                        (i.lastCurrentTime = 0),
                        (i.nextLoadPosition = 0),
                        (i.startPosition = 0),
                        (i.loadedmetadata = !1),
                        (i.fragLoadError = 0),
                        (i.retryDate = 0),
                        (i.levels = null),
                        (i.fragmentLoader = void 0),
                        (i.levelLastLoaded = null),
                        (i.startFragRequested = !1),
                        (i.decrypter = void 0),
                        (i.initPTS = []),
                        (i.onvseeking = null),
                        (i.onvended = null),
                        (i.logPrefix = ''),
                        (i.log = void 0),
                        (i.warn = void 0),
                        (i.logPrefix = n),
                        (i.log = u.logger.log.bind(u.logger, n + ':')),
                        (i.warn = u.logger.warn.bind(u.logger, n + ':')),
                        (i.hls = e),
                        (i.fragmentLoader = new m.default(e.config)),
                        (i.fragmentTracker = r),
                        (i.config = e.config),
                        (i.decrypter = new y.default(e, e.config)),
                        e.on(
                          c.Events.KEY_LOADED,
                          i.onKeyLoaded,
                          (function (t) {
                            if (void 0 === t)
                              throw new ReferenceError(
                                "this hasn't been initialised - super() hasn't been called"
                              );
                            return t;
                          })(i)
                        ),
                        i
                      );
                    }
                    var r, s;
                    (s = t),
                      ((r = e).prototype = Object.create(s.prototype)),
                      (r.prototype.constructor = r),
                      i(r, s);
                    var A,
                      S,
                      L,
                      _ = e.prototype;
                    return (
                      (_.doTick = function () {
                        this.onTickEnd();
                      }),
                      (_.onTickEnd = function () {}),
                      (_.startLoad = function (t) {}),
                      (_.stopLoad = function () {
                        this.fragmentLoader.abort();
                        var t = this.fragCurrent;
                        t && this.fragmentTracker.removeFragment(t),
                          this.resetTransmuxer(),
                          (this.fragCurrent = null),
                          (this.fragPrevious = null),
                          this.clearInterval(),
                          this.clearNextTick(),
                          (this.state = T.STOPPED);
                      }),
                      (_._streamEnded = function (t, e) {
                        var r = this.fragCurrent,
                          n = this.fragmentTracker;
                        if (!e.live && r && r.sn === e.endSN && !t.nextStart) {
                          var i = n.getState(r);
                          return i === o.FragmentState.PARTIAL || i === o.FragmentState.OK;
                        }
                        return !1;
                      }),
                      (_.onMediaAttached = function (t, e) {
                        var r = (this.media = this.mediaBuffer = e.media);
                        (this.onvseeking = this.onMediaSeeking.bind(this)),
                          (this.onvended = this.onMediaEnded.bind(this)),
                          r.addEventListener('seeking', this.onvseeking),
                          r.addEventListener('ended', this.onvended);
                        var n = this.config;
                        this.levels &&
                          n.autoStartLoad &&
                          this.state === T.STOPPED &&
                          this.startLoad(n.startPosition);
                      }),
                      (_.onMediaDetaching = function () {
                        var t = this.media;
                        null != t &&
                          t.ended &&
                          (this.log('MSE detaching and video ended, reset startPosition'),
                          (this.startPosition = this.lastCurrentTime = 0)),
                          t &&
                            (t.removeEventListener('seeking', this.onvseeking),
                            t.removeEventListener('ended', this.onvended),
                            (this.onvseeking = this.onvended = null)),
                          (this.media = this.mediaBuffer = null),
                          (this.loadedmetadata = !1),
                          this.fragmentTracker.removeAllFragments(),
                          this.stopLoad();
                      }),
                      (_.onMediaSeeking = function () {
                        var t = this.config,
                          e = this.fragCurrent,
                          r = this.media,
                          n = this.mediaBuffer,
                          i = this.state,
                          s = r ? r.currentTime : 0,
                          o = l.BufferHelper.bufferInfo(n || r, s, t.maxBufferHole);
                        if (
                          (this.log(
                            'media seeking to ' +
                              (Object(a.isFiniteNumber)(s) ? s.toFixed(3) : s) +
                              ', state: ' +
                              i
                          ),
                          i === T.ENDED)
                        )
                          this.resetLoadingState();
                        else if (e && !o.len) {
                          var u = t.maxFragLookUpTolerance,
                            c = e.start - u,
                            d = s > e.start + e.duration + u;
                          (s < c || d) &&
                            (d &&
                              e.loader &&
                              (this.log(
                                'seeking outside of buffer while fragment load in progress, cancel fragment load'
                              ),
                              e.loader.abort()),
                            this.resetLoadingState());
                        }
                        r && (this.lastCurrentTime = s),
                          this.loadedmetadata ||
                            o.len ||
                            (this.nextLoadPosition = this.startPosition = s),
                          this.tickImmediate();
                      }),
                      (_.onMediaEnded = function () {
                        this.startPosition = this.lastCurrentTime = 0;
                      }),
                      (_.onKeyLoaded = function (t, e) {
                        if (
                          this.state === T.KEY_LOADING &&
                          e.frag === this.fragCurrent &&
                          this.levels
                        ) {
                          this.state = T.IDLE;
                          var r = this.levels[e.frag.level].details;
                          r && this.loadFragment(e.frag, r, e.frag.start);
                        }
                      }),
                      (_.onHandlerDestroying = function () {
                        this.stopLoad(), t.prototype.onHandlerDestroying.call(this);
                      }),
                      (_.onHandlerDestroyed = function () {
                        (this.state = T.STOPPED),
                          this.hls.off(c.Events.KEY_LOADED, this.onKeyLoaded, this),
                          this.fragmentLoader && this.fragmentLoader.destroy(),
                          this.decrypter && this.decrypter.destroy(),
                          (this.hls =
                            this.log =
                            console.warn =
                            this.decrypter =
                            this.fragmentLoader =
                            this.fragmentTracker =
                              null),
                          t.prototype.onHandlerDestroyed.call(this);
                      }),
                      (_.loadKey = function (t, e) {
                        this.log(
                          'Loading key for ' +
                            t.sn +
                            ' of [' +
                            e.startSN +
                            '-' +
                            e.endSN +
                            '], ' +
                            ('[stream-controller]' === this.logPrefix ? 'level' : 'track') +
                            ' ' +
                            t.level
                        ),
                          (this.state = T.KEY_LOADING),
                          (this.fragCurrent = t),
                          this.hls.trigger(c.Events.KEY_LOADING, { frag: t });
                      }),
                      (_.loadFragment = function (t, e, r) {
                        this._loadFragForPlayback(t, e, r);
                      }),
                      (_._loadFragForPlayback = function (t, e, r) {
                        var n = this;
                        this._doFragLoad(t, e, r, function (e) {
                          return n.fragContextChanged(t)
                            ? (n.warn(
                                'Fragment ' +
                                  t.sn +
                                  (e.part ? ' p: ' + e.part.index : '') +
                                  ' of level ' +
                                  t.level +
                                  ' was dropped during download.'
                              ),
                              void n.fragmentTracker.removeFragment(t))
                            : (t.stats.chunkCount++, void n._handleFragmentLoadProgress(e));
                        })
                          .then(function (e) {
                            if (e) {
                              n.fragLoadError = 0;
                              var r = n.state;
                              return n.fragContextChanged(t)
                                ? void (
                                    (r !== T.FRAG_LOADING &&
                                      r !== T.BACKTRACKING &&
                                      (n.fragCurrent || r !== T.PARSING)) ||
                                    (n.fragmentTracker.removeFragment(t), (n.state = T.IDLE))
                                  )
                                : 'payload' in e &&
                                  (n.log('Loaded fragment ' + t.sn + ' of level ' + t.level),
                                  n.hls.trigger(c.Events.FRAG_LOADED, e),
                                  n.state === T.BACKTRACKING)
                                ? (n.fragmentTracker.backtrack(t, e),
                                  void n.resetFragmentLoading(t))
                                : void n._handleFragmentLoadComplete(e);
                            }
                          })
                          .catch(function (e) {
                            n.warn(e), n.resetFragmentLoading(t);
                          });
                      }),
                      (_.flushMainBuffer = function (t, e, r) {
                        if ((void 0 === r && (r = null), t - e)) {
                          var n = { startOffset: t, endOffset: e, type: r };
                          (this.fragLoadError = 0), this.hls.trigger(c.Events.BUFFER_FLUSHING, n);
                        }
                      }),
                      (_._loadInitSegment = function (t) {
                        var e = this;
                        this._doFragLoad(t)
                          .then(function (r) {
                            if (!r || e.fragContextChanged(t) || !e.levels)
                              throw new Error('init load aborted');
                            return r;
                          })
                          .then(function (r) {
                            var n = e.hls,
                              i = r.payload,
                              a = t.decryptdata;
                            if (
                              i &&
                              0 < i.byteLength &&
                              a &&
                              a.key &&
                              a.iv &&
                              'AES-128' === a.method
                            ) {
                              var s = self.performance.now();
                              return e.decrypter
                                .webCryptoDecrypt(new Uint8Array(i), a.key.buffer, a.iv.buffer)
                                .then(function (e) {
                                  var i = self.performance.now();
                                  return (
                                    n.trigger(c.Events.FRAG_DECRYPTED, {
                                      frag: t,
                                      payload: e,
                                      stats: { tstart: s, tdecrypt: i },
                                    }),
                                    (r.payload = e),
                                    r
                                  );
                                });
                            }
                            return r;
                          })
                          .then(function (r) {
                            var n = e.fragCurrent,
                              i = e.hls,
                              a = e.levels;
                            if (!a) throw new Error('init load aborted, missing levels');
                            var s = a[t.level].details;
                            console.assert(
                              s,
                              'Level details are defined when init segment is loaded'
                            );
                            var o = t.stats;
                            (e.state = T.IDLE),
                              (e.fragLoadError = 0),
                              (t.data = new Uint8Array(r.payload)),
                              (o.parsing.start = o.buffering.start = self.performance.now()),
                              (o.parsing.end = o.buffering.end = self.performance.now()),
                              r.frag === n &&
                                i.trigger(c.Events.FRAG_BUFFERED, {
                                  stats: o,
                                  frag: n,
                                  part: null,
                                  id: t.type,
                                }),
                              e.tick();
                          })
                          .catch(function (r) {
                            e.warn(r), e.resetFragmentLoading(t);
                          });
                      }),
                      (_.fragContextChanged = function (t) {
                        var e = this.fragCurrent;
                        return (
                          !t || !e || t.level !== e.level || t.sn !== e.sn || t.urlId !== e.urlId
                        );
                      }),
                      (_.fragBufferedComplete = function (t, e) {
                        var r = this.mediaBuffer ? this.mediaBuffer : this.media;
                        this.log(
                          'Buffered ' +
                            t.type +
                            ' sn: ' +
                            t.sn +
                            (e ? ' part: ' + e.index : '') +
                            ' of ' +
                            ('[stream-controller]' === this.logPrefix ? 'level' : 'track') +
                            ' ' +
                            t.level +
                            ' ' +
                            b.default.toString(l.BufferHelper.getBuffered(r))
                        ),
                          (this.state = T.IDLE),
                          this.tick();
                      }),
                      (_._handleFragmentLoadComplete = function (t) {
                        var e = this.transmuxer;
                        if (e) {
                          var r = t.frag,
                            n = t.part,
                            i = t.partsLoaded,
                            a =
                              !i ||
                              0 === i.length ||
                              i.some(function (t) {
                                return !t;
                              }),
                            s = new f.ChunkMetadata(
                              r.level,
                              r.sn,
                              r.stats.chunkCount + 1,
                              0,
                              n ? n.index : -1,
                              !a
                            );
                          e.flush(s);
                        }
                      }),
                      (_._handleFragmentLoadProgress = function (t) {}),
                      (_._doFragLoad = function (t, e, r, n) {
                        var i = this;
                        if ((void 0 === r && (r = null), !this.levels))
                          throw new Error('frag load aborted, missing levels');
                        if (((r = Math.max(t.start, r || 0)), this.config.lowLatencyMode && e)) {
                          var s = e.partList;
                          if (s && n) {
                            r > t.end && e.fragmentHint && (t = e.fragmentHint);
                            var o = this.getNextPart(s, t, r);
                            if (-1 < o) {
                              var l = s[o];
                              return (
                                this.log(
                                  'Loading part sn: ' +
                                    t.sn +
                                    ' p: ' +
                                    l.index +
                                    ' cc: ' +
                                    t.cc +
                                    ' of playlist [' +
                                    e.startSN +
                                    '-' +
                                    e.endSN +
                                    '] parts [0-' +
                                    o +
                                    '-' +
                                    (s.length - 1) +
                                    '] ' +
                                    ('[stream-controller]' === this.logPrefix ? 'level' : 'track') +
                                    ': ' +
                                    t.level +
                                    ', target: ' +
                                    parseFloat(r.toFixed(3))
                                ),
                                (this.nextLoadPosition = l.start + l.duration),
                                (this.state = T.FRAG_LOADING),
                                this.hls.trigger(c.Events.FRAG_LOADING, {
                                  frag: t,
                                  part: s[o],
                                  targetBufferTime: r,
                                }),
                                this.doFragPartsLoad(t, s, o, n).catch(function (t) {
                                  return i.handleFragLoadError(t);
                                })
                              );
                            }
                            if (!t.url || this.loadedEndOfParts(s, r)) return Promise.resolve(null);
                          }
                        }
                        return (
                          this.log(
                            'Loading fragment ' +
                              t.sn +
                              ' cc: ' +
                              t.cc +
                              ' ' +
                              (e ? 'of [' + e.startSN + '-' + e.endSN + '] ' : '') +
                              ('[stream-controller]' === this.logPrefix ? 'level' : 'track') +
                              ': ' +
                              t.level +
                              ', target: ' +
                              parseFloat(r.toFixed(3))
                          ),
                          Object(a.isFiniteNumber)(t.sn) &&
                            !this.bitrateTest &&
                            (this.nextLoadPosition = t.start + t.duration),
                          (this.state = T.FRAG_LOADING),
                          this.hls.trigger(c.Events.FRAG_LOADING, { frag: t, targetBufferTime: r }),
                          this.fragmentLoader.load(t, n).catch(function (t) {
                            return i.handleFragLoadError(t);
                          })
                        );
                      }),
                      (_.doFragPartsLoad = function (t, e, r, n) {
                        var i = this;
                        return new Promise(function (a, s) {
                          var o = [];
                          !(function r(l) {
                            var u = e[l];
                            i.fragmentLoader
                              .loadPart(t, u, n)
                              .then(function (n) {
                                o[u.index] = n;
                                var s = n.part;
                                i.hls.trigger(c.Events.FRAG_LOADED, n);
                                var d = e[l + 1];
                                return d && d.fragment === t
                                  ? void r(l + 1)
                                  : a({ frag: t, part: s, partsLoaded: o });
                              })
                              .catch(s);
                          })(r);
                        });
                      }),
                      (_.handleFragLoadError = function (t) {
                        var e = t.data;
                        return (
                          e && e.details === d.ErrorDetails.INTERNAL_ABORTED
                            ? this.handleFragLoadAborted(e.frag, e.part)
                            : this.hls.trigger(c.Events.ERROR, e),
                          null
                        );
                      }),
                      (_._handleTransmuxerFlush = function (t) {
                        var e = this.getCurrentContext(t);
                        if (e && this.state === T.PARSING) {
                          var r = e.frag,
                            n = e.part,
                            i = e.level,
                            a = self.performance.now();
                          (r.stats.parsing.end = a),
                            n && (n.stats.parsing.end = a),
                            this.updateLevelTiming(r, n, i, t.partial);
                        } else this.fragCurrent || (this.state = T.IDLE);
                      }),
                      (_.getCurrentContext = function (t) {
                        var e = this.levels,
                          r = t.level,
                          n = t.sn,
                          i = t.part;
                        if (!e || !e[r])
                          return (
                            console.warn(
                              'Levels object was unset while buffering fragment ' +
                                n +
                                ' of level ' +
                                r +
                                '. The current chunk will not be buffered.'
                            ),
                            null
                          );
                        var a = e[r],
                          s = -1 < i ? Object(p.getPartWith)(a, n, i) : null,
                          o = s ? s.fragment : Object(p.getFragmentWithSN)(a, n, this.fragCurrent);
                        return o ? { frag: o, part: s, level: a } : null;
                      }),
                      (_.bufferFragmentData = function (t, e, r, n) {
                        if (t && this.state === T.PARSING) {
                          var i = t.data1,
                            a = t.data2,
                            s = i;
                          if ((i && a && (s = Object(h.appendUint8Array)(i, a)), s && s.length)) {
                            var o = {
                              type: t.type,
                              frag: e,
                              part: r,
                              chunkMeta: n,
                              parent: e.type,
                              data: s,
                            };
                            this.hls.trigger(c.Events.BUFFER_APPENDING, o),
                              t.dropped && t.independent && !r && this.flushBufferGap(e);
                          }
                        }
                      }),
                      (_.flushBufferGap = function (t) {
                        var e = this.media;
                        if (e) {
                          if (!l.BufferHelper.isBuffered(e, e.currentTime))
                            return void this.flushMainBuffer(0, t.start);
                          var r = e.currentTime,
                            n = l.BufferHelper.bufferInfo(e, r, 0),
                            i = t.duration,
                            a = Math.min(2 * this.config.maxFragLookUpTolerance, 0.25 * i),
                            s = Math.max(Math.min(t.start - a, n.end - a), r + a);
                          t.start - s > a && this.flushMainBuffer(s, t.start);
                        }
                      }),
                      (_.getFwdBufferInfo = function (t, e) {
                        var r = this.config,
                          n = this.getLoadPosition();
                        if (!Object(a.isFiniteNumber)(n)) return null;
                        var i = l.BufferHelper.bufferInfo(t, n, r.maxBufferHole);
                        if (0 === i.len && void 0 !== i.nextStart) {
                          var s = this.fragmentTracker.getBufferedFrag(n, e);
                          if (s && i.nextStart < s.end)
                            return l.BufferHelper.bufferInfo(
                              t,
                              n,
                              Math.max(i.nextStart, r.maxBufferHole)
                            );
                        }
                        return i;
                      }),
                      (_.getMaxBufferLength = function (t) {
                        var e,
                          r = this.config;
                        return (
                          (e = t
                            ? Math.max((8 * r.maxBufferSize) / t, r.maxBufferLength)
                            : r.maxBufferLength),
                          Math.min(e, r.maxMaxBufferLength)
                        );
                      }),
                      (_.reduceMaxBufferLength = function (t) {
                        var e = this.config,
                          r = t || e.maxBufferLength;
                        return (
                          !!(e.maxMaxBufferLength >= r) &&
                          ((e.maxMaxBufferLength /= 2),
                          console.warn('Reduce max buffer length to ' + e.maxMaxBufferLength + 's'),
                          !0)
                        );
                      }),
                      (_.getNextFragment = function (t, e) {
                        var r,
                          n,
                          i = e.fragments,
                          a = i.length;
                        if (!a) return null;
                        var s,
                          o = this.config,
                          l = i[0].start;
                        if (e.live) {
                          var u = o.initialLiveManifestSize;
                          if (a < u)
                            return (
                              console.warn(
                                'Not enough fragments to start playback (have: ' +
                                  a +
                                  ', need: ' +
                                  u +
                                  ')'
                              ),
                              null
                            );
                          e.PTSKnown ||
                            this.startFragRequested ||
                            -1 !== this.startPosition ||
                            ((s = this.getInitialLiveFragment(e, i)),
                            (this.startPosition = s ? this.hls.liveSyncPosition || s.start : t));
                        } else t <= l && (s = i[0]);
                        if (!s) {
                          var c = o.lowLatencyMode ? e.partEnd : e.fragmentEnd;
                          s = this.getFragmentAtPosition(t, c, e);
                        }
                        return (
                          null === (r = s) ||
                            void 0 === r ||
                            !r.initSegment ||
                            (null !== (n = s) && void 0 !== n && n.initSegment.data) ||
                            this.bitrateTest ||
                            (s = s.initSegment),
                          s
                        );
                      }),
                      (_.getNextPart = function (t, e, r) {
                        for (
                          var n, i, a = -1, s = !1, o = !0, l = 0, u = t.length;
                          l < u &&
                          ((n = t[l]), (o = o && !n.independent), !(-1 < a && r < n.start));
                          l++
                        )
                          !(i = n.loaded) &&
                            (s || n.independent || o) &&
                            n.fragment === e &&
                            (a = l),
                            (s = i);
                        return a;
                      }),
                      (_.loadedEndOfParts = function (t, e) {
                        var r = t[t.length - 1];
                        return r && e > r.start && r.loaded;
                      }),
                      (_.getInitialLiveFragment = function (t, e) {
                        var r = this.fragPrevious,
                          n = null;
                        if (r) {
                          if (
                            (t.hasProgramDateTime &&
                              (this.log(
                                'Live playlist, switching playlist, load frag with same PDT: ' +
                                  r.programDateTime
                              ),
                              (n = Object(g.findFragmentByPDT)(
                                e,
                                r.endProgramDateTime,
                                this.config.maxFragLookUpTolerance
                              ))),
                            !n)
                          ) {
                            var i = r.sn + 1;
                            if (i >= t.startSN && i <= t.endSN) {
                              var a = e[i - t.startSN];
                              r.cc === a.cc &&
                                ((n = a),
                                this.log(
                                  'Live playlist, switching playlist, load frag with next SN: ' +
                                    n.sn
                                ));
                            }
                            n ||
                              ((n = Object(g.findFragWithCC)(e, r.cc)) &&
                                this.log(
                                  'Live playlist, switching playlist, load frag with same CC: ' +
                                    n.sn
                                ));
                          }
                        } else {
                          var s = this.hls.liveSyncPosition;
                          null !== s &&
                            (n = this.getFragmentAtPosition(
                              s,
                              this.bitrateTest ? t.fragmentEnd : t.edge,
                              t
                            ));
                        }
                        return n;
                      }),
                      (_.getFragmentAtPosition = function (t, e, r) {
                        var n,
                          i = this.config,
                          a = this.fragPrevious,
                          s = r.fragments,
                          l = r.endSN,
                          u = r.fragmentHint,
                          c = i.maxFragLookUpTolerance,
                          d = !!(i.lowLatencyMode && r.partList && u);
                        if (
                          (d && u && !this.bitrateTest && ((s = s.concat(u)), (l = u.sn)), t < e)
                        ) {
                          var f = t > e - c ? 0 : c;
                          n = Object(g.findFragmentByPTS)(a, s, t, f);
                        } else n = s[s.length - 1];
                        if (n) {
                          var h = n.sn - r.startSN,
                            v = a && n.level === a.level,
                            p = s[h + 1];
                          if (this.fragmentTracker.getState(n) === o.FragmentState.BACKTRACKED) {
                            n = null;
                            for (
                              var m = h;
                              s[m] &&
                              this.fragmentTracker.getState(s[m]) === o.FragmentState.BACKTRACKED;

                            )
                              n = a ? s[m--] : s[--m];
                            n || (n = p);
                          } else
                            a &&
                              n.sn === a.sn &&
                              !d &&
                              v &&
                              (n.sn < l && this.fragmentTracker.getState(p) !== o.FragmentState.OK
                                ? (this.log('SN ' + n.sn + ' just loaded, load next one: ' + p.sn),
                                  (n = p))
                                : (n = null));
                        }
                        return n;
                      }),
                      (_.synchronizeToLiveEdge = function (t) {
                        var e = this.config,
                          r = this.media;
                        if (r) {
                          var n = this.hls.liveSyncPosition,
                            i = r.currentTime,
                            a = t.fragments[0].start,
                            s = t.edge,
                            o = i >= a - e.maxFragLookUpTolerance && i <= s;
                          if (null !== n && r.duration > n && (i < n || !o)) {
                            var l =
                              void 0 === e.liveMaxLatencyDuration
                                ? e.liveMaxLatencyDurationCount * t.targetduration
                                : e.liveMaxLatencyDuration;
                            ((!o && 4 > r.readyState) || i < s - l) &&
                              (!this.loadedmetadata && (this.nextLoadPosition = n),
                              r.readyState &&
                                (console.warn(
                                  'Playback: ' +
                                    i.toFixed(3) +
                                    ' is located too far from the end of live sliding playlist: ' +
                                    s +
                                    ', reset currentTime to : ' +
                                    n.toFixed(3)
                                ),
                                (r.currentTime = n)));
                          }
                        }
                      }),
                      (_.alignPlaylists = function (t, e) {
                        var r = this.levels,
                          n = this.levelLastLoaded,
                          i = this.fragPrevious,
                          s = null === n ? null : r[n],
                          o = t.fragments.length;
                        if (!o) return console.warn('No fragments in live playlist'), 0;
                        var l = t.fragments[0].start,
                          u = !e,
                          c = t.alignedSliding && Object(a.isFiniteNumber)(l);
                        if (u || (!c && !l)) {
                          Object(v.alignStream)(i, s, t);
                          var d = t.fragments[0].start;
                          return (
                            this.log(
                              'Live playlist sliding: ' +
                                d.toFixed(2) +
                                ' start-sn: ' +
                                (e ? e.startSN : 'na') +
                                '->' +
                                t.startSN +
                                ' prev-sn: ' +
                                (i ? i.sn : 'na') +
                                ' fragments: ' +
                                o
                            ),
                            d
                          );
                        }
                        return l;
                      }),
                      (_.waitForCdnTuneIn = function (t) {
                        return (
                          t.live &&
                          t.canBlockReload &&
                          t.tuneInGoal > Math.max(t.partHoldBack, 3 * t.partTarget)
                        );
                      }),
                      (_.setStartPosition = function (t, e) {
                        var r = this.startPosition;
                        if ((r < e && (r = -1), -1 === r || -1 === this.lastCurrentTime)) {
                          var n = t.startTimeOffset;
                          Object(a.isFiniteNumber)(n)
                            ? ((r = e + n),
                              0 > n && (r += t.totalduration),
                              (r = Math.min(Math.max(e, r), e + t.totalduration)),
                              this.log(
                                'Start time offset ' +
                                  n +
                                  ' found in playlist, adjust startPosition to ' +
                                  r
                              ),
                              (this.startPosition = r))
                            : t.live
                            ? (r = this.hls.liveSyncPosition || e)
                            : (this.startPosition = r = 0),
                            (this.lastCurrentTime = r);
                        }
                        this.nextLoadPosition = r;
                      }),
                      (_.getLoadPosition = function () {
                        var t = this.media,
                          e = 0;
                        return (
                          this.loadedmetadata && t
                            ? (e = t.currentTime)
                            : this.nextLoadPosition && (e = this.nextLoadPosition),
                          e
                        );
                      }),
                      (_.handleFragLoadAborted = function (t, e) {
                        this.transmuxer &&
                          'initSegment' !== t.sn &&
                          t.stats.aborted &&
                          (console.warn(
                            'Fragment ' +
                              t.sn +
                              (e ? ' part' + e.index : '') +
                              ' of level ' +
                              t.level +
                              ' was aborted'
                          ),
                          this.resetFragmentLoading(t));
                      }),
                      (_.resetFragmentLoading = function (t) {
                        (this.fragCurrent && this.fragContextChanged(t)) || (this.state = T.IDLE);
                      }),
                      (_.onFragmentOrKeyLoadError = function (t, e) {
                        if (!e.fatal) {
                          var r = e.frag;
                          if (r && r.type === t) {
                            var n = this.fragCurrent;
                            console.assert(
                              n && r.sn === n.sn && r.level === n.level && r.urlId === n.urlId,
                              'Frag load error must match current frag to retry'
                            );
                            var i = this.config;
                            if (this.fragLoadError + 1 <= i.fragLoadingMaxRetry) {
                              if (this.resetLiveStartWhenNotLoaded(r.level)) return;
                              var a = Math.min(
                                Math.pow(2, this.fragLoadError) * i.fragLoadingRetryDelay,
                                i.fragLoadingMaxRetryTimeout
                              );
                              console.warn(
                                'Fragment ' +
                                  r.sn +
                                  ' of ' +
                                  t +
                                  ' ' +
                                  r.level +
                                  ' failed to load, retrying in ' +
                                  a +
                                  'ms'
                              ),
                                (this.retryDate = self.performance.now() + a),
                                this.fragLoadError++,
                                (this.state = T.FRAG_LOADING_WAITING_RETRY);
                            } else
                              e.levelRetry
                                ? (t === E.PlaylistLevelType.AUDIO && (this.fragCurrent = null),
                                  (this.fragLoadError = 0),
                                  (this.state = T.IDLE))
                                : (u.logger.error(
                                    e.details + ' reaches max retry, redispatch as fatal ...'
                                  ),
                                  (e.fatal = !0),
                                  this.hls.stopLoad(),
                                  (this.state = T.ERROR));
                          }
                        }
                      }),
                      (_.afterBufferFlushed = function (t, e, r) {
                        if (t) {
                          var n = l.BufferHelper.getBuffered(t);
                          this.fragmentTracker.detectEvictedFragments(e, n, r),
                            this.state === T.ENDED && this.resetLoadingState();
                        }
                      }),
                      (_.resetLoadingState = function () {
                        (this.fragCurrent = null),
                          (this.fragPrevious = null),
                          (this.state = T.IDLE);
                      }),
                      (_.resetLiveStartWhenNotLoaded = function (t) {
                        if (!this.loadedmetadata) {
                          this.startFragRequested = !1;
                          var e = this.levels ? this.levels[t].details : null;
                          if (null != e && e.live)
                            return (
                              (this.startPosition = -1),
                              this.setStartPosition(e, 0),
                              this.resetLoadingState(),
                              !0
                            );
                          this.nextLoadPosition = this.startPosition;
                        }
                        return !1;
                      }),
                      (_.updateLevelTiming = function (t, e, r, n) {
                        var i = this,
                          a = r.details;
                        console.assert(!!a, 'level.details must be defined'),
                          Object.keys(t.elementaryStreams).reduce(function (e, s) {
                            var o = t.elementaryStreams[s];
                            if (o) {
                              var l = o.endPTS - o.startPTS;
                              if (0 >= l)
                                return (
                                  i.warn(
                                    'Could not parse fragment ' +
                                      t.sn +
                                      ' ' +
                                      s +
                                      ' duration reliably (' +
                                      l +
                                      ') resetting transmuxer to fallback to playlist timing'
                                  ),
                                  i.resetTransmuxer(),
                                  e || !1
                                );
                              var u = n
                                ? 0
                                : Object(p.updateFragPTSDTS)(
                                    a,
                                    t,
                                    o.startPTS,
                                    o.endPTS,
                                    o.startDTS,
                                    o.endDTS
                                  );
                              return (
                                i.hls.trigger(c.Events.LEVEL_PTS_UPDATED, {
                                  details: a,
                                  level: r,
                                  drift: u,
                                  type: s,
                                  frag: t,
                                  start: o.startPTS,
                                  end: o.endPTS,
                                }),
                                !0
                              );
                            }
                            return e;
                          }, !1)
                            ? ((this.state = T.PARSED),
                              this.hls.trigger(c.Events.FRAG_PARSED, { frag: t, part: e }))
                            : this.resetLoadingState();
                      }),
                      (_.resetTransmuxer = function () {
                        this.transmuxer && (this.transmuxer.destroy(), (this.transmuxer = null));
                      }),
                      (A = e),
                      (S = [
                        {
                          key: 'state',
                          get: function () {
                            return this._state;
                          },
                          set: function (t) {
                            var e = this._state;
                            e !== t && ((this._state = t), this.log(e + '->' + t));
                          },
                        },
                      ]) && n(A.prototype, S),
                      L && n(A, L),
                      e
                    );
                  })(s.default);
              },
              './src/controller/buffer-controller.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return h;
                  });
                var n = r('./src/polyfills/number.ts'),
                  i = r('./src/events.ts'),
                  a = r('./src/utils/logger.ts'),
                  s = r('./src/errors.ts'),
                  o = r('./src/utils/buffer-helper.ts'),
                  l = r('./src/utils/mediasource-helper.ts'),
                  u = r('./src/loader/fragment.ts'),
                  c = r('./src/controller/buffer-operation-queue.ts'),
                  d = Object(l.getMediaSource)(),
                  f = /([ha]vc.)(?:\.[^.,]+)+/,
                  h = (function () {
                    function t(t) {
                      var e = this;
                      this.details = null;
                      this._objectUrl = null;
                      this.operationQueue = void 0;
                      this.listeners = void 0;
                      this.hls = void 0;
                      this.bufferCodecEventsExpected = 0;
                      this._bufferCodecEventsTotal = 0;
                      this.media = null;
                      this.mediaSource = null;
                      this.appendError = 0;
                      this.tracks = {};
                      this.pendingTracks = {};
                      this.sourceBuffer = void 0;
                      this._onMediaSourceOpen = function () {
                        console.warn('_onMediaSourceOpen');
                        var t = e.hls;
                        var r = e.media;
                        var n = e.mediaSource;

                        a.logger.log('[buffer-controller]: Media source opened');
                        if (r) {
                          e.updateMediaElementDuration();

                          t.trigger(i.Events.MEDIA_ATTACHED, { media: r });

                          if (n) {
                            n.removeEventListener('sourceopen', e._onMediaSourceOpen);
                          }

                          e.checkPendingTracks();
                        }
                        // r &&
                        //   (e.updateMediaElementDuration(),
                        //   t.trigger(i.Events.MEDIA_ATTACHED, { media: r })),
                        //   n && n.removeEventListener('sourceopen', e._onMediaSourceOpen),
                        //   e.checkPendingTracks();
                      };
                      this._onMediaSourceClose = function () {
                        a.logger.log('[buffer-controller]: Media source closed');
                      };
                      this._onMediaSourceEnded = function () {
                        a.logger.log('[buffer-controller]: Media source ended');
                      };
                      this.hls = t;
                      this._initSourceBuffer();
                      this.registerListeners();
                    }
                    var e = t.prototype;
                    return (
                      (e.hasSourceTypes = function () {
                        return (
                          0 < this.getSourceBufferTypes().length ||
                          0 < Object.keys(this.pendingTracks).length
                        );
                      }),
                      (e.destroy = function () {
                        this.unregisterListeners(), (this.details = null);
                      }),
                      (e.registerListeners = function () {
                        var t = this.hls;
                        t.on(i.Events.MEDIA_ATTACHING, this.onMediaAttaching, this),
                          t.on(i.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          t.on(i.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                          t.on(i.Events.BUFFER_RESET, this.onBufferReset, this),
                          t.on(i.Events.BUFFER_APPENDING, this.onBufferAppending, this),
                          t.on(i.Events.BUFFER_CODECS, this.onBufferCodecs, this),
                          t.on(i.Events.BUFFER_EOS, this.onBufferEos, this),
                          t.on(i.Events.BUFFER_FLUSHING, this.onBufferFlushing, this),
                          t.on(i.Events.LEVEL_UPDATED, this.onLevelUpdated, this),
                          t.on(i.Events.FRAG_PARSED, this.onFragParsed, this),
                          t.on(i.Events.FRAG_CHANGED, this.onFragChanged, this);
                      }),
                      (e.unregisterListeners = function () {
                        var t = this.hls;
                        t.off(i.Events.MEDIA_ATTACHING, this.onMediaAttaching, this),
                          t.off(i.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          t.off(i.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                          t.off(i.Events.BUFFER_RESET, this.onBufferReset, this),
                          t.off(i.Events.BUFFER_APPENDING, this.onBufferAppending, this),
                          t.off(i.Events.BUFFER_CODECS, this.onBufferCodecs, this),
                          t.off(i.Events.BUFFER_EOS, this.onBufferEos, this),
                          t.off(i.Events.BUFFER_FLUSHING, this.onBufferFlushing, this),
                          t.off(i.Events.LEVEL_UPDATED, this.onLevelUpdated, this),
                          t.off(i.Events.FRAG_PARSED, this.onFragParsed, this),
                          t.off(i.Events.FRAG_CHANGED, this.onFragChanged, this);
                      }),
                      (e._initSourceBuffer = function () {
                        console.warn('_initSourceBuffer');
                        this.sourceBuffer = {};
                        this.operationQueue = new c.default(this.sourceBuffer);
                        this.listeners = { audio: [], video: [], audiovideo: [] };
                      }),
                      (e.onManifestParsed = function (t, e) {
                        var r = 2;
                        ((!e.audio || e.video) && e.altAudio) || (r = 1),
                          (this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = r),
                          (this.details = null),
                          a.logger.log(
                            this.bufferCodecEventsExpected + ' bufferCodec event(s) expected'
                          );
                      }),
                      (e.onMediaAttaching = function (t, e) {
                        var r = (this.media = e.media);
                        if (r && d) {
                          var n = (this.mediaSource = new d());
                          n.addEventListener('sourceopen', this._onMediaSourceOpen);
                          n.addEventListener('sourceended', this._onMediaSourceEnded);
                          n.addEventListener('sourceclose', this._onMediaSourceClose);

                          r.src = self.URL.createObjectURL(n);
                          console.warn('URL.createObjectURL', r.src);
                          this._objectUrl = r.src;
                        }
                      }),
                      (e.onMediaDetaching = function () {
                        console.warn('onMediaDetaching');
                        var t = this.media;
                        var e = this.mediaSource;
                        var r = this._objectUrl;
                        if (e) {
                          if (
                            (a.logger.log('[buffer-controller]: media source detaching'),
                            'open' === e.readyState)
                          )
                            try {
                              e.endOfStream();
                            } catch (t) {
                              a.logger.warn(
                                '[buffer-controller]: onMediaDetaching: ' +
                                  t.message +
                                  ' while calling endOfStream'
                              );
                            }
                          this.onBufferReset();
                          e.removeEventListener('sourceopen', this._onMediaSourceOpen);
                          e.removeEventListener('sourceended', this._onMediaSourceEnded);
                          e.removeEventListener('sourceclose', this._onMediaSourceClose);
                          t &&
                            (r && self.URL.revokeObjectURL(r),
                            t.src === r
                              ? (t.removeAttribute('src'), t.load())
                              : a.logger.warn(
                                  '[buffer-controller]: media.src was changed by a third party - skip cleanup'
                                )),
                            (this.mediaSource = null),
                            (this.media = null),
                            (this._objectUrl = null),
                            (this.bufferCodecEventsExpected = this._bufferCodecEventsTotal),
                            (this.pendingTracks = {}),
                            (this.tracks = {});
                        }
                        this.hls.trigger(i.Events.MEDIA_DETACHED, void 0);
                      }),
                      (e.onBufferReset = function () {
                        var t = this;
                        this.getSourceBufferTypes().forEach(function (e) {
                          var r = t.sourceBuffer[e];
                          try {
                            r &&
                              (t.removeBufferListeners(e),
                              t.mediaSource && t.mediaSource.removeSourceBuffer(r),
                              (t.sourceBuffer[e] = void 0));
                          } catch (t) {
                            a.logger.warn(
                              '[buffer-controller]: Failed to reset the ' + e + ' buffer',
                              t
                            );
                          }
                        }),
                          this._initSourceBuffer();
                      }),
                      (e.onBufferCodecs = function (t, e) {
                        console.log('onBufferCodecs');
                        var r = this;
                        var n = this.getSourceBufferTypes().length;
                        Object.keys(e).forEach(function (t) {
                          if (n) {
                            var i = r.tracks[t];
                            if (i && 'function' == typeof i.buffer.changeType) {
                              var a = e[t],
                                s = a.codec,
                                o = a.levelCodec,
                                l = a.container;
                              if (
                                (i.levelCodec || i.codec).replace(f, '$1') !==
                                (o || s).replace(f, '$1')
                              ) {
                                var u = l + ';codecs=' + (o || s);
                                r.appendChangeType(t, u);
                              }
                            }
                          } else r.pendingTracks[t] = e[t];
                        });
                        if (!n) {
                          this.bufferCodecEventsExpected = Math.max(
                            this.bufferCodecEventsExpected - 1,
                            0
                          );
                          if (this.mediaSource) {
                            var readyState = this.mediaSource.readyState;
                            if (readyState === 'open') {
                              this.checkPendingTracks();
                            }
                          }
                        }
                      }),
                      (e.appendChangeType = function (t, e) {
                        var r = this,
                          n = this.operationQueue,
                          i = {
                            execute: function () {
                              var i = r.sourceBuffer[t];
                              i &&
                                (a.logger.log(
                                  '[buffer-controller]: changing ' +
                                    t +
                                    ' sourceBuffer type to ' +
                                    e
                                ),
                                i.changeType(e)),
                                n.shiftAndExecuteNext(t);
                            },
                            onStart: function () {},
                            onComplete: function () {},
                            onError: function (e) {
                              a.logger.warn(
                                '[buffer-controller]: Failed to change ' + t + ' SourceBuffer type',
                                e
                              );
                            },
                          };
                        n.append(i, t);
                      }),
                      (e.onBufferAppending = function (t, e) {
                        var r = this,
                          n = this.hls,
                          l = this.operationQueue,
                          u = this.tracks,
                          c = e.data,
                          d = e.type,
                          f = e.frag,
                          h = e.part,
                          v = e.chunkMeta,
                          g = v.buffering[d],
                          p = self.performance.now();
                        g.start = p;
                        var m = f.stats.buffering,
                          y = h ? h.stats.buffering : null;
                        0 === m.start && (m.start = p), y && 0 === y.start && (y.start = p);
                        var b = u.audio,
                          E =
                            'audio' === d &&
                            1 === v.id &&
                            'audio/mpeg' === (null == b ? void 0 : b.container),
                          T = {
                            execute: function () {
                              if (((g.executeStart = self.performance.now()), E)) {
                                var t = r.sourceBuffer[d];
                                if (t) {
                                  var e = f.start - t.timestampOffset;
                                  0.1 <= Math.abs(e) &&
                                    (a.logger.log(
                                      '[buffer-controller]: Updating audio SourceBuffer timestampOffset to ' +
                                        f.start +
                                        ' (delta: ' +
                                        e +
                                        ') sn: ' +
                                        f.sn +
                                        ')'
                                    ),
                                    (t.timestampOffset = f.start));
                                }
                              }
                              r.appendExecutor(c, d);
                            },
                            onStart: function () {},
                            onComplete: function () {
                              var t = self.performance.now();
                              (g.executeEnd = g.end = t),
                                0 === m.first && (m.first = t),
                                y && 0 === y.first && (y.first = t);
                              var e = r.sourceBuffer,
                                n = {};
                              for (var a in e) n[a] = o.BufferHelper.getBuffered(e[a]);
                              (r.appendError = 0),
                                r.hls.trigger(i.Events.BUFFER_APPENDED, {
                                  type: d,
                                  frag: f,
                                  part: h,
                                  chunkMeta: v,
                                  parent: f.type,
                                  timeRanges: n,
                                });
                            },
                            onError: function (t) {
                              a.logger.error(
                                '[buffer-controller]: Error encountered while trying to append to the ' +
                                  d +
                                  ' SourceBuffer',
                                t
                              );
                              var e = {
                                type: s.ErrorTypes.MEDIA_ERROR,
                                parent: f.type,
                                details: s.ErrorDetails.BUFFER_APPEND_ERROR,
                                err: t,
                                fatal: !1,
                              };
                              t.code === DOMException.QUOTA_EXCEEDED_ERR
                                ? (e.details = s.ErrorDetails.BUFFER_FULL_ERROR)
                                : (r.appendError++,
                                  (e.details = s.ErrorDetails.BUFFER_APPEND_ERROR),
                                  r.appendError > n.config.appendErrorMaxRetry &&
                                    (a.logger.error(
                                      '[buffer-controller]: Failed ' +
                                        n.config.appendErrorMaxRetry +
                                        ' times to append segment in sourceBuffer'
                                    ),
                                    (e.fatal = !0))),
                                n.trigger(i.Events.ERROR, e);
                            },
                          };
                        l.append(T, d);
                      }),
                      (e.onBufferFlushing = function (t, e) {
                        var r = this,
                          n = this.operationQueue,
                          s = function (t) {
                            return {
                              execute: r.removeExecutor.bind(r, t, e.startOffset, e.endOffset),
                              onStart: function () {},
                              onComplete: function () {
                                r.hls.trigger(i.Events.BUFFER_FLUSHED, { type: t });
                              },
                              onError: function (e) {
                                a.logger.warn(
                                  '[buffer-controller]: Failed to remove from ' +
                                    t +
                                    ' SourceBuffer',
                                  e
                                );
                              },
                            };
                          };
                        e.type
                          ? n.append(s(e.type), e.type)
                          : this.getSourceBufferTypes().forEach(function (t) {
                              n.append(s(t), t);
                            });
                      }),
                      (e.onFragParsed = function (t, e) {
                        var r = this,
                          n = e.frag,
                          s = e.part,
                          o = [],
                          l = s ? s.elementaryStreams : n.elementaryStreams;
                        l[u.ElementaryStreamTypes.AUDIOVIDEO]
                          ? o.push('audiovideo')
                          : (l[u.ElementaryStreamTypes.AUDIO] && o.push('audio'),
                            l[u.ElementaryStreamTypes.VIDEO] && o.push('video')),
                          0 === o.length &&
                            a.logger.warn(
                              'Fragments must have at least one ElementaryStreamType set. type: ' +
                                n.type +
                                ' level: ' +
                                n.level +
                                ' sn: ' +
                                n.sn
                            ),
                          this.blockBuffers(function () {
                            var t = self.performance.now();
                            (n.stats.buffering.end = t), s && (s.stats.buffering.end = t);
                            var e = s ? s.stats : n.stats;
                            r.hls.trigger(i.Events.FRAG_BUFFERED, {
                              frag: n,
                              part: s,
                              stats: e,
                              id: n.type,
                            });
                          }, o);
                      }),
                      (e.onFragChanged = function (t, e) {
                        this.flushBackBuffer();
                      }),
                      (e.onBufferEos = function (t, e) {
                        var r = this;
                        this.getSourceBufferTypes().reduce(function (t, n) {
                          var i = r.sourceBuffer[n];
                          return (
                            (e.type && e.type !== n) ||
                              !i ||
                              i.ended ||
                              ((i.ended = !0),
                              a.logger.log('[buffer-controller]: ' + n + ' sourceBuffer now EOS')),
                            t && (!i || i.ended)
                          );
                        }, !0) &&
                          this.blockBuffers(function () {
                            var t = r.mediaSource;
                            t && 'open' === t.readyState && t.endOfStream();
                          });
                      }),
                      (e.onLevelUpdated = function (t, e) {
                        var r = e.details;
                        r.fragments.length &&
                          ((this.details = r),
                          this.getSourceBufferTypes().length
                            ? this.blockBuffers(this.updateMediaElementDuration.bind(this))
                            : this.updateMediaElementDuration());
                      }),
                      (e.flushBackBuffer = function () {
                        var t = this.hls,
                          e = this.details,
                          r = this.media,
                          a = this.sourceBuffer;
                        if (r && null !== e) {
                          var s = this.getSourceBufferTypes();
                          if (s.length) {
                            var l =
                              e.live && null !== t.config.liveBackBufferLength
                                ? t.config.liveBackBufferLength
                                : t.config.backBufferLength;
                            if (Object(n.isFiniteNumber)(l) && !(0 > l)) {
                              var u = r.currentTime,
                                c = e.levelTargetDuration,
                                d = Math.max(l, c),
                                f = Math.floor(u / c) * c - d;
                              s.forEach(function (r) {
                                var n = a[r];
                                if (n) {
                                  var s = o.BufferHelper.getBuffered(n);
                                  0 < s.length &&
                                    f > s.start(0) &&
                                    (t.trigger(i.Events.BACK_BUFFER_REACHED, { bufferEnd: f }),
                                    e.live &&
                                      t.trigger(i.Events.LIVE_BACK_BUFFER_REACHED, {
                                        bufferEnd: f,
                                      }),
                                    t.trigger(i.Events.BUFFER_FLUSHING, {
                                      startOffset: 0,
                                      endOffset: f,
                                      type: r,
                                    }));
                                }
                              });
                            }
                          }
                        }
                      }),
                      (e.updateMediaElementDuration = function () {
                        if (
                          this.details &&
                          this.media &&
                          this.mediaSource &&
                          'open' === this.mediaSource.readyState
                        ) {
                          var t = this.details,
                            e = this.hls,
                            r = this.media,
                            i = this.mediaSource,
                            s = t.fragments[0].start + t.totalduration,
                            o = r.duration,
                            l = Object(n.isFiniteNumber)(i.duration) ? i.duration : 0;
                          t.live && e.config.liveDurationInfinity
                            ? (a.logger.log(
                                '[buffer-controller]: Media Source duration is set to Infinity'
                              ),
                              (i.duration = 1 / 0),
                              this.updateSeekableRange(t))
                            : ((s > l && s > o) || !Object(n.isFiniteNumber)(o)) &&
                              (a.logger.log(
                                '[buffer-controller]: Updating Media Source duration to ' +
                                  s.toFixed(3)
                              ),
                              (i.duration = s));
                        }
                      }),
                      (e.updateSeekableRange = function (t) {
                        var e = this.mediaSource,
                          r = t.fragments;
                        if (r.length && t.live && null != e && e.setLiveSeekableRange) {
                          var n = Math.max(0, r[0].start),
                            i = Math.max(n, n + t.totalduration);
                          e.setLiveSeekableRange(n, i);
                        }
                      }),
                      (e.checkPendingTracks = function () {
                        var t = this.bufferCodecEventsExpected;
                        var e = this.operationQueue;
                        var r = this.pendingTracks;
                        var n = Object.keys(r).length;

                        var nAndTResult = n && !t;

                        if (nAndTResult || 2 === n) {
                          this.createSourceBuffers(r);
                          this.pendingTracks = {};
                          var a = this.getSourceBufferTypes();
                          if (0 === a.length) {
                            return void this.hls.trigger(i.Events.ERROR, {
                              type: s.ErrorTypes.MEDIA_ERROR,
                              details: s.ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR,
                              fatal: !0,
                              reason: 'could not create source buffer for media codec(s)',
                            });
                          }
                          a.forEach(function (t) {
                            e.executeNext(t);
                          });
                        }
                      }),
                      (e.createSourceBuffers = function (t) {
                        var e = this.sourceBuffer;
                        var r = this.mediaSource;
                        if (!r) {
                          throw Error('createSourceBuffers called when mediaSource was null');
                        }

                        var n = 0;
                        for (var o in t) {
                          if (!e[o]) {
                            var l = t[o];
                            if (!l) {
                              throw Error(
                                'source buffer exists for track ' + o + ', however track does not'
                              );
                            }
                            var u = l.levelCodec || l.codec;
                            var c = l.container + ';codecs=' + u;
                            a.logger.log('[buffer-controller]: creating sourceBuffer(' + c + ')');

                            try {
                              var d = (e[o] = r.addSourceBuffer(c));
                              var f = o;
                              this.addBufferListener(f, 'updatestart', this._onSBUpdateStart);
                              this.addBufferListener(f, 'updateend', this._onSBUpdateEnd);
                              this.addBufferListener(f, 'error', this._onSBUpdateError);
                              this.tracks[o] = {
                                buffer: d,
                                codec: u,
                                container: l.container,
                                levelCodec: l.levelCodec,
                                id: l.id,
                              };
                              n++;
                            } catch (t) {
                              console.error(
                                '[buffer-controller]: error while trying to add sourceBuffer: ' +
                                  t.message
                              );
                              this.hls.trigger(i.Events.ERROR, {
                                type: s.ErrorTypes.MEDIA_ERROR,
                                details: s.ErrorDetails.BUFFER_ADD_CODEC_ERROR,
                                fatal: !1,
                                error: t,
                                mimeType: c,
                              });
                            }
                          }
                        }
                        n && this.hls.trigger(i.Events.BUFFER_CREATED, { tracks: this.tracks });
                      }),
                      (e._onSBUpdateStart = function (t) {
                        this.operationQueue.current(t).onStart();
                      }),
                      (e._onSBUpdateEnd = function (t) {
                        var e = this.operationQueue;
                        e.current(t).onComplete(), e.shiftAndExecuteNext(t);
                      }),
                      (e._onSBUpdateError = function (t, e) {
                        a.logger.error('[buffer-controller]: ' + t + ' SourceBuffer error', e),
                          this.hls.trigger(i.Events.ERROR, {
                            type: s.ErrorTypes.MEDIA_ERROR,
                            details: s.ErrorDetails.BUFFER_APPENDING_ERROR,
                            fatal: !1,
                          });
                        var r = this.operationQueue.current(t);
                        r && r.onError(e);
                      }),
                      (e.removeExecutor = function (t, e, r) {
                        var i = this.media,
                          s = this.mediaSource,
                          o = this.operationQueue,
                          l = this.sourceBuffer[t];
                        if (!i || !s || !l)
                          return (
                            a.logger.warn(
                              '[buffer-controller]: Attempting to remove from the ' +
                                t +
                                ' SourceBuffer, but it does not exist'
                            ),
                            void o.shiftAndExecuteNext(t)
                          );
                        var u = Object(n.isFiniteNumber)(i.duration) ? i.duration : 1 / 0,
                          c = Object(n.isFiniteNumber)(s.duration) ? s.duration : 1 / 0,
                          d = Math.max(0, e),
                          f = Math.min(r, u, c);
                        f > d
                          ? (a.logger.log(
                              '[buffer-controller]: Removing [' +
                                d +
                                ',' +
                                f +
                                '] from the ' +
                                t +
                                ' SourceBuffer'
                            ),
                            console.assert(!l.updating, t + ' sourceBuffer must not be updating'),
                            l.remove(d, f))
                          : o.shiftAndExecuteNext(t);
                      }),
                      (e.appendExecutor = function (t, e) {
                        var r = this.operationQueue;
                        var n = this.sourceBuffer[e];
                        console.warn('appendExecutor');

                        if (n) {
                          n.ended = !1;
                          console.assert(!n.updating, e + ' sourceBuffer must not be updating');
                          n.appendBuffer(t);
                        } else {
                          a.logger.warn(
                            '[buffer-controller]: Attempting to append to the ' +
                              e +
                              ' SourceBuffer, but it does not exist'
                          );
                          r.shiftAndExecuteNext(e);
                        }
                      }),
                      (e.blockBuffers = function (t, e) {
                        var r = this;
                        if ((void 0 === e && (e = this.getSourceBufferTypes()), !e.length))
                          return (
                            a.logger.log(
                              '[buffer-controller]: Blocking operation requested, but no SourceBuffers exist'
                            ),
                            void Promise.resolve(t)
                          );
                        var n = this.operationQueue,
                          i = e.map(function (t) {
                            return n.appendBlocker(t);
                          });
                        Promise.all(i).then(function () {
                          t(),
                            e.forEach(function (t) {
                              var e = r.sourceBuffer[t];
                              (e && e.updating) || n.shiftAndExecuteNext(t);
                            });
                        });
                      }),
                      (e.getSourceBufferTypes = function () {
                        return Object.keys(this.sourceBuffer);
                      }),
                      (e.addBufferListener = function (t, e, r) {
                        var n = this.sourceBuffer[t];
                        if (n) {
                          var i = r.bind(this, t);
                          this.listeners[t].push({ event: e, listener: i }),
                            n.addEventListener(e, i);
                        }
                      }),
                      (e.removeBufferListeners = function (t) {
                        var e = this.sourceBuffer[t];
                        e &&
                          this.listeners[t].forEach(function (t) {
                            e.removeEventListener(t.event, t.listener);
                          });
                      }),
                      t
                    );
                  })();
              },
              './src/controller/buffer-operation-queue.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return i;
                  });
                var n = r('./src/utils/logger.ts'),
                  i = (function () {
                    function t(t) {
                      (this.buffers = void 0),
                        (this.queues = { video: [], audio: [], audiovideo: [] }),
                        (this.buffers = t);
                    }
                    var e = t.prototype;
                    return (
                      (e.append = function (t, e) {
                        var r = this.queues[e];
                        r.push(t), 1 === r.length && this.buffers[e] && this.executeNext(e);
                      }),
                      (e.insertAbort = function (t, e) {
                        this.queues[e].unshift(t), this.executeNext(e);
                      }),
                      (e.appendBlocker = function (t) {
                        var e,
                          r = new Promise(function (t) {
                            e = t;
                          }),
                          n = {
                            execute: e,
                            onStart: function () {},
                            onComplete: function () {},
                            onError: function () {},
                          };
                        return this.append(n, t), r;
                      }),
                      (e.executeNext = function (t) {
                        var e = this.buffers,
                          r = this.queues,
                          i = e[t],
                          a = r[t];
                        if (a.length) {
                          var s = a[0];
                          try {
                            s.execute();
                          } catch (e) {
                            n.logger.warn(
                              '[buffer-operation-queue]: Unhandled exception executing the current operation'
                            ),
                              s.onError(e),
                              (i && i.updating) || (a.shift(), this.executeNext(t));
                          }
                        }
                      }),
                      (e.shiftAndExecuteNext = function (t) {
                        this.queues[t].shift(), this.executeNext(t);
                      }),
                      (e.current = function (t) {
                        return this.queues[t][0];
                      }),
                      t
                    );
                  })();
              },
              './src/controller/cap-level-controller.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                r.r(e);
                var i = r('./src/events.ts'),
                  a = (function () {
                    function t(t) {
                      (this.autoLevelCapping = void 0),
                        (this.firstLevel = void 0),
                        (this.media = void 0),
                        (this.restrictedLevels = void 0),
                        (this.timer = void 0),
                        (this.hls = void 0),
                        (this.streamController = void 0),
                        (this.clientRect = void 0),
                        (this.hls = t),
                        (this.autoLevelCapping = Number.POSITIVE_INFINITY),
                        (this.firstLevel = -1),
                        (this.media = null),
                        (this.restrictedLevels = []),
                        (this.timer = void 0),
                        (this.clientRect = null),
                        this.registerListeners();
                    }
                    var e,
                      r,
                      a,
                      s = t.prototype;
                    return (
                      (s.setStreamController = function (t) {
                        this.streamController = t;
                      }),
                      (s.destroy = function () {
                        this.unregisterListener(),
                          this.hls.config.capLevelToPlayerSize && this.stopCapping(),
                          (this.media = null),
                          (this.clientRect = null),
                          (this.hls = this.streamController = null);
                      }),
                      (s.registerListeners = function () {
                        var t = this.hls;
                        t.on(i.Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this),
                          t.on(i.Events.MEDIA_ATTACHING, this.onMediaAttaching, this),
                          t.on(i.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                          t.on(i.Events.BUFFER_CODECS, this.onBufferCodecs, this),
                          t.on(i.Events.MEDIA_DETACHING, this.onMediaDetaching, this);
                      }),
                      (s.unregisterListener = function () {
                        var t = this.hls;
                        t.off(i.Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this),
                          t.off(i.Events.MEDIA_ATTACHING, this.onMediaAttaching, this),
                          t.off(i.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                          t.off(i.Events.BUFFER_CODECS, this.onBufferCodecs, this),
                          t.off(i.Events.MEDIA_DETACHING, this.onMediaDetaching, this);
                      }),
                      (s.onFpsDropLevelCapping = function (e, r) {
                        t.isLevelAllowed(r.droppedLevel, this.restrictedLevels) &&
                          this.restrictedLevels.push(r.droppedLevel);
                      }),
                      (s.onMediaAttaching = function (t, e) {
                        this.media = e.media instanceof HTMLVideoElement ? e.media : null;
                        console.log('onMediaAttaching', this.media);
                      }),
                      (s.onManifestParsed = function (t, e) {
                        var r = this.hls;
                        (this.restrictedLevels = []),
                          (this.firstLevel = e.firstLevel),
                          r.config.capLevelToPlayerSize && e.video && this.startCapping();
                      }),
                      (s.onBufferCodecs = function (t, e) {
                        this.hls.config.capLevelToPlayerSize && e.video && this.startCapping();
                      }),
                      (s.onMediaDetaching = function () {
                        console.log('onMediaDetaching');
                        this.stopCapping();
                      }),
                      (s.detectPlayerSize = function () {
                        if (this.media && 0 < this.mediaHeight && 0 < this.mediaWidth) {
                          var t = this.hls.levels;
                          if (t.length) {
                            var e = this.hls;
                            (e.autoLevelCapping = this.getMaxLevel(t.length - 1)),
                              e.autoLevelCapping > this.autoLevelCapping &&
                                this.streamController &&
                                this.streamController.nextLevelSwitch(),
                              (this.autoLevelCapping = e.autoLevelCapping);
                          }
                        }
                      }),
                      (s.getMaxLevel = function (e) {
                        var r = this,
                          n = this.hls.levels;
                        if (!n.length) return -1;
                        var i = n.filter(function (n, i) {
                          return t.isLevelAllowed(i, r.restrictedLevels) && i <= e;
                        });
                        return (
                          (this.clientRect = null),
                          t.getMaxLevelByMediaSize(i, this.mediaWidth, this.mediaHeight)
                        );
                      }),
                      (s.startCapping = function () {
                        console.log('startCapping');
                        this.timer ||
                          ((this.autoLevelCapping = Number.POSITIVE_INFINITY),
                          (this.hls.firstLevel = this.getMaxLevel(this.firstLevel)),
                          self.clearInterval(this.timer),
                          (this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3)),
                          this.detectPlayerSize());
                      }),
                      (s.stopCapping = function () {
                        console.log('stopCapping');
                        (this.restrictedLevels = []),
                          (this.firstLevel = -1),
                          (this.autoLevelCapping = Number.POSITIVE_INFINITY),
                          this.timer && (self.clearInterval(this.timer), (this.timer = void 0));
                      }),
                      (s.getDimensions = function () {
                        if (this.clientRect) return this.clientRect;
                        var t = this.media,
                          e = { width: 0, height: 0 };
                        if (t) {
                          var r = t.getBoundingClientRect();
                          (e.width = r.width),
                            (e.height = r.height),
                            e.width ||
                              e.height ||
                              ((e.width = r.right - r.left || t.width || 0),
                              (e.height = r.bottom - r.top || t.height || 0));
                        }
                        return (this.clientRect = e), e;
                      }),
                      (t.isLevelAllowed = function (t, e) {
                        return void 0 === e && (e = []), -1 === e.indexOf(t);
                      }),
                      (t.getMaxLevelByMediaSize = function (t, e, r) {
                        if (!t || !t.length) return -1;
                        for (var n, i = t.length - 1, a = 0; a < t.length; a += 1)
                          if (
                            ((n = t[a]).width >= e || n.height >= r) &&
                            ((s = n),
                            !(o = t[a + 1]) || s.width !== o.width || s.height !== o.height)
                          ) {
                            i = a;
                            break;
                          }
                        var s, o;
                        return i;
                      }),
                      (e = t),
                      (a = [
                        {
                          key: 'contentScaleFactor',
                          get: function () {
                            var t = 1;
                            try {
                              t = self.devicePixelRatio;
                            } catch (t) {}
                            return t;
                          },
                        },
                      ]),
                      (r = [
                        {
                          key: 'mediaWidth',
                          get: function () {
                            return this.getDimensions().width * t.contentScaleFactor;
                          },
                        },
                        {
                          key: 'mediaHeight',
                          get: function () {
                            return this.getDimensions().height * t.contentScaleFactor;
                          },
                        },
                      ]) && n(e.prototype, r),
                      a && n(e, a),
                      t
                    );
                  })();
                e.default = a;
              },
              './src/controller/cmcd-controller.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                function i(t, e, r) {
                  return e && n(t.prototype, e), r && n(t, r), t;
                }
                function a(t, e) {
                  var r = ('undefined' != typeof Symbol && t[Symbol.iterator]) || t['@@iterator'];
                  if (r) return (r = r.call(t)).next.bind(r);
                  if (
                    Array.isArray(t) ||
                    (r = (function (t, e) {
                      if (t) {
                        if ('string' == typeof t) return s(t, e);
                        var r = Object.prototype.toString.call(t).slice(8, -1);
                        return (
                          'Object' === r && t.constructor && (r = t.constructor.name),
                          'Map' === r || 'Set' === r
                            ? Array.from(t)
                            : 'Arguments' === r ||
                              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                            ? s(t, e)
                            : void 0
                        );
                      }
                    })(t)) ||
                    (e && t && 'number' == typeof t.length)
                  ) {
                    r && (t = r);
                    var n = 0;
                    return function () {
                      return n >= t.length ? { done: !0 } : { done: !1, value: t[n++] };
                    };
                  }
                  throw new TypeError(
                    'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
                  );
                }
                function s(t, e) {
                  (null == e || e > t.length) && (e = t.length);
                  for (var r = 0, n = Array(e); r < e; r++) n[r] = t[r];
                  return n;
                }
                function o() {
                  return (o =
                    Object.assign ||
                    function (t) {
                      for (var e, r = 1; r < arguments.length; r++)
                        for (var n in (e = arguments[r]))
                          Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                      return t;
                    }).apply(this, arguments);
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return f;
                  });
                var l = r('./src/events.ts'),
                  u = r('./src/types/cmcd.ts'),
                  c = r('./src/utils/buffer-helper.ts'),
                  d = r('./src/utils/logger.ts'),
                  f = (function () {
                    function t(e) {
                      var r = this;
                      (this.hls = void 0),
                        (this.config = void 0),
                        (this.media = void 0),
                        (this.sid = void 0),
                        (this.cid = void 0),
                        (this.useHeaders = !1),
                        (this.initialized = !1),
                        (this.starved = !1),
                        (this.buffering = !0),
                        (this.audioBuffer = void 0),
                        (this.videoBuffer = void 0),
                        (this.onWaiting = function () {
                          r.initialized && (r.starved = !0), (r.buffering = !0);
                        }),
                        (this.onPlaying = function () {
                          r.initialized || (r.initialized = !0), (r.buffering = !1);
                        }),
                        (this.applyPlaylistData = function (t) {
                          try {
                            r.apply(t, { ot: u.CMCDObjectType.MANIFEST, su: !r.initialized });
                          } catch (t) {
                            d.logger.warn('Could not generate manifest CMCD data.', t);
                          }
                        }),
                        (this.applyFragmentData = function (t) {
                          try {
                            var e = t.frag,
                              n = r.hls.levels[e.level],
                              i = r.getObjectType(e),
                              a = { d: 1e3 * e.duration, ot: i };
                            (i === u.CMCDObjectType.VIDEO ||
                              i === u.CMCDObjectType.AUDIO ||
                              i == u.CMCDObjectType.MUXED) &&
                              ((a.br = n.bitrate / 1e3),
                              (a.tb = r.getTopBandwidth(i)),
                              (a.bl = r.getBufferLength(i))),
                              r.apply(t, a);
                          } catch (t) {
                            d.logger.warn('Could not generate segment CMCD data.', t);
                          }
                        }),
                        (this.hls = e);
                      var n = (this.config = e.config),
                        i = n.cmcd;
                      null != i &&
                        ((n.pLoader = this.createPlaylistLoader()),
                        (n.fLoader = this.createFragmentLoader()),
                        (this.sid = i.sessionId || t.uuid()),
                        (this.cid = i.contentId),
                        (this.useHeaders = !0 === i.useHeaders),
                        this.registerListeners());
                    }
                    var e = t.prototype;
                    return (
                      (e.registerListeners = function () {
                        var t = this.hls;
                        t.on(l.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          t.on(l.Events.MEDIA_DETACHED, this.onMediaDetached, this),
                          t.on(l.Events.BUFFER_CREATED, this.onBufferCreated, this);
                      }),
                      (e.unregisterListeners = function () {
                        var t = this.hls;
                        t.off(l.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          t.off(l.Events.MEDIA_DETACHED, this.onMediaDetached, this),
                          t.off(l.Events.BUFFER_CREATED, this.onBufferCreated, this),
                          this.onMediaDetached();
                      }),
                      (e.destroy = function () {
                        this.unregisterListeners(),
                          (this.hls = this.config = this.audioBuffer = this.videoBuffer = null);
                      }),
                      (e.onMediaAttached = function (t, e) {
                        (this.media = e.media),
                          this.media.addEventListener('waiting', this.onWaiting),
                          this.media.addEventListener('playing', this.onPlaying);
                      }),
                      (e.onMediaDetached = function () {
                        this.media &&
                          (this.media.removeEventListener('waiting', this.onWaiting),
                          this.media.removeEventListener('playing', this.onPlaying),
                          (this.media = null));
                      }),
                      (e.onBufferCreated = function (t, e) {
                        var r, n;
                        (this.audioBuffer =
                          null === (r = e.tracks.audio) || void 0 === r ? void 0 : r.buffer),
                          (this.videoBuffer =
                            null === (n = e.tracks.video) || void 0 === n ? void 0 : n.buffer);
                      }),
                      (e.createData = function () {
                        var t;
                        return {
                          v: u.CMCDVersion,
                          sf: u.CMCDStreamingFormat.HLS,
                          sid: this.sid,
                          cid: this.cid,
                          pr: null === (t = this.media) || void 0 === t ? void 0 : t.playbackRate,
                          mtp: this.hls.bandwidthEstimate / 1e3,
                        };
                      }),
                      (e.apply = function (e, r) {
                        void 0 === r && (r = {}), o(r, this.createData());
                        var n =
                          r.ot === u.CMCDObjectType.INIT ||
                          r.ot === u.CMCDObjectType.VIDEO ||
                          r.ot === u.CMCDObjectType.MUXED;
                        if (
                          (this.starved && n && ((r.bs = !0), (r.su = !0), (this.starved = !1)),
                          null == r.su && (r.su = this.buffering),
                          this.useHeaders)
                        ) {
                          var i = t.toHeaders(r);
                          if (!Object.keys(i).length) return;
                          e.headers || (e.headers = {}), o(e.headers, i);
                        } else {
                          var a = t.toQuery(r);
                          if (!a) return;
                          e.url = t.appendQueryToUri(e.url, a);
                        }
                      }),
                      (e.getObjectType = function (t) {
                        var e = t.type;
                        return 'subtitle' === e
                          ? u.CMCDObjectType.TIMED_TEXT
                          : 'initSegment' === t.sn
                          ? u.CMCDObjectType.INIT
                          : 'audio' === e
                          ? u.CMCDObjectType.AUDIO
                          : 'main' === e
                          ? this.hls.audioTracks.length
                            ? u.CMCDObjectType.VIDEO
                            : u.CMCDObjectType.MUXED
                          : void 0;
                      }),
                      (e.getTopBandwidth = function (t) {
                        for (
                          var e,
                            r,
                            n = 0,
                            i = a(
                              t === u.CMCDObjectType.AUDIO ? this.hls.audioTracks : this.hls.levels
                            );
                          !(e = i()).done;

                        )
                          (r = e.value).bitrate > n && (n = r.bitrate);
                        return 0 < n ? n : NaN;
                      }),
                      (e.getBufferLength = function (t) {
                        var e = this.hls.media,
                          r = t === u.CMCDObjectType.AUDIO ? this.audioBuffer : this.videoBuffer;
                        return r && e
                          ? 1e3 *
                              c.BufferHelper.bufferInfo(r, e.currentTime, this.config.maxBufferHole)
                                .len
                          : NaN;
                      }),
                      (e.createPlaylistLoader = function () {
                        var t = this.config.pLoader,
                          e = this.applyPlaylistData,
                          r = t || this.config.loader;
                        return (function () {
                          function t(t) {
                            (this.loader = void 0), (this.loader = new r(t));
                          }
                          var n = t.prototype;
                          return (
                            (n.destroy = function () {
                              this.loader.destroy();
                            }),
                            (n.abort = function () {
                              this.loader.abort();
                            }),
                            (n.load = function (t, r, n) {
                              e(t), this.loader.load(t, r, n);
                            }),
                            i(t, [
                              {
                                key: 'stats',
                                get: function () {
                                  return this.loader.stats;
                                },
                              },
                              {
                                key: 'context',
                                get: function () {
                                  return this.loader.context;
                                },
                              },
                            ]),
                            t
                          );
                        })();
                      }),
                      (e.createFragmentLoader = function () {
                        var t = this.config.fLoader,
                          e = this.applyFragmentData,
                          r = t || this.config.loader;
                        return (function () {
                          function t(t) {
                            (this.loader = void 0), (this.loader = new r(t));
                          }
                          var n = t.prototype;
                          return (
                            (n.destroy = function () {
                              this.loader.destroy();
                            }),
                            (n.abort = function () {
                              this.loader.abort();
                            }),
                            (n.load = function (t, r, n) {
                              e(t), this.loader.load(t, r, n);
                            }),
                            i(t, [
                              {
                                key: 'stats',
                                get: function () {
                                  return this.loader.stats;
                                },
                              },
                              {
                                key: 'context',
                                get: function () {
                                  return this.loader.context;
                                },
                              },
                            ]),
                            t
                          );
                        })();
                      }),
                      (t.uuid = function () {
                        var t = URL.createObjectURL(new Blob()),
                          e = t.toString();
                        return URL.revokeObjectURL(t), e.substr(e.lastIndexOf('/') + 1);
                      }),
                      (t.serialize = function (t) {
                        for (
                          var e,
                            r = [],
                            n = function (t) {
                              return !Number.isNaN(t) && null != t && '' !== t && !1 !== t;
                            },
                            i = function (t) {
                              return Math.round(t);
                            },
                            s = function (t) {
                              return 100 * i(t / 100);
                            },
                            o = {
                              br: i,
                              d: i,
                              bl: s,
                              dl: s,
                              mtp: s,
                              nor: function (t) {
                                return encodeURIComponent(t);
                              },
                              rtp: s,
                              tb: i,
                            },
                            l = a(Object.keys(t || {}).sort());
                          !(e = l()).done;

                        ) {
                          var u = e.value,
                            c = t[u];
                          if (n(c) && ('v' !== u || 1 !== c) && ('pr' != u || 1 !== c)) {
                            var d = o[u];
                            d && (c = d(c));
                            var f,
                              h = typeof c;
                            (f =
                              'ot' === u || 'sf' === u || 'st' === u
                                ? u + '=' + c
                                : 'boolean' === h
                                ? u
                                : 'number' === h
                                ? u + '=' + c
                                : u + '=' + JSON.stringify(c)),
                              r.push(f);
                          }
                        }
                        return r.join(',');
                      }),
                      (t.toHeaders = function (e) {
                        for (
                          var r = {},
                            n = ['Object', 'Request', 'Session', 'Status'],
                            i = [{}, {}, {}, {}],
                            a = {
                              br: 0,
                              d: 0,
                              ot: 0,
                              tb: 0,
                              bl: 1,
                              dl: 1,
                              mtp: 1,
                              nor: 1,
                              nrr: 1,
                              su: 1,
                              cid: 2,
                              pr: 2,
                              sf: 2,
                              sid: 2,
                              st: 2,
                              v: 2,
                              bs: 3,
                              rtp: 3,
                            },
                            s = 0,
                            o = Object.keys(e);
                          s < o.length;
                          s++
                        ) {
                          var l = o[s];
                          i[null == a[l] ? 1 : a[l]][l] = e[l];
                        }
                        for (var u, c = 0; c < i.length; c++)
                          (u = t.serialize(i[c])) && (r['CMCD-' + n[c]] = u);
                        return r;
                      }),
                      (t.toQuery = function (e) {
                        return 'CMCD=' + encodeURIComponent(t.serialize(e));
                      }),
                      (t.appendQueryToUri = function (t, e) {
                        if (!e) return t;
                        var r = t.includes('?') ? '&' : '?';
                        return '' + t + r + e;
                      }),
                      t
                    );
                  })();
              },
              './src/controller/fps-controller.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = r('./src/events.ts'),
                  i = r('./src/utils/logger.ts'),
                  a = (function () {
                    function t(t) {
                      (this.hls = void 0),
                        (this.isVideoPlaybackQualityAvailable = !1),
                        (this.timer = void 0),
                        (this.media = null),
                        (this.lastTime = void 0),
                        (this.lastDroppedFrames = 0),
                        (this.lastDecodedFrames = 0),
                        (this.streamController = void 0),
                        (this.hls = t),
                        this.registerListeners();
                    }
                    var e = t.prototype;
                    return (
                      (e.setStreamController = function (t) {
                        this.streamController = t;
                      }),
                      (e.registerListeners = function () {
                        this.hls.on(n.Events.MEDIA_ATTACHING, this.onMediaAttaching, this);
                      }),
                      (e.unregisterListeners = function () {
                        this.hls.off(n.Events.MEDIA_ATTACHING, this.onMediaAttaching);
                      }),
                      (e.destroy = function () {
                        this.timer && clearInterval(this.timer),
                          this.unregisterListeners(),
                          (this.isVideoPlaybackQualityAvailable = !1),
                          (this.media = null);
                      }),
                      (e.onMediaAttaching = function (t, e) {
                        var r = this.hls.config;
                        if (r.capLevelOnFPSDrop) {
                          var n = e.media instanceof self.HTMLVideoElement ? e.media : null;
                          (this.media = n),
                            n &&
                              'function' == typeof n.getVideoPlaybackQuality &&
                              (this.isVideoPlaybackQualityAvailable = !0),
                            self.clearInterval(this.timer),
                            (this.timer = self.setInterval(
                              this.checkFPSInterval.bind(this),
                              r.fpsDroppedMonitoringPeriod
                            ));
                        }
                      }),
                      (e.checkFPS = function (t, e, r) {
                        var a = performance.now();
                        if (e) {
                          if (this.lastTime) {
                            var s = a - this.lastTime,
                              o = r - this.lastDroppedFrames,
                              l = e - this.lastDecodedFrames,
                              u = (1e3 * o) / s,
                              c = this.hls;
                            if (
                              (c.trigger(n.Events.FPS_DROP, {
                                currentDropped: o,
                                currentDecoded: l,
                                totalDroppedFrames: r,
                              }),
                              0 < u && o > c.config.fpsDroppedMonitoringThreshold * l)
                            ) {
                              var d = c.currentLevel;
                              i.logger.warn(
                                'drop FPS ratio greater than max allowed value for currentLevel: ' +
                                  d
                              ),
                                0 < d &&
                                  (-1 === c.autoLevelCapping || c.autoLevelCapping >= d) &&
                                  (--d,
                                  c.trigger(n.Events.FPS_DROP_LEVEL_CAPPING, {
                                    level: d,
                                    droppedLevel: c.currentLevel,
                                  }),
                                  (c.autoLevelCapping = d),
                                  this.streamController.nextLevelSwitch());
                            }
                          }
                          (this.lastTime = a),
                            (this.lastDroppedFrames = r),
                            (this.lastDecodedFrames = e);
                        }
                      }),
                      (e.checkFPSInterval = function () {
                        var t = this.media;
                        if (t)
                          if (this.isVideoPlaybackQualityAvailable) {
                            var e = t.getVideoPlaybackQuality();
                            this.checkFPS(t, e.totalVideoFrames, e.droppedVideoFrames);
                          } else
                            this.checkFPS(t, t.webkitDecodedFrameCount, t.webkitDroppedFrameCount);
                      }),
                      t
                    );
                  })();
                e.default = a;
              },
              './src/controller/fragment-finders.ts': function (t, e, r) {
                'use strict';
                function n(t, e, r) {
                  if (null === e || !Array.isArray(t) || !t.length || !Object(l.isFiniteNumber)(e))
                    return null;
                  if (e < (t[0].programDateTime || 0)) return null;
                  if (e >= (t[t.length - 1].endProgramDateTime || 0)) return null;
                  r = r || 0;
                  for (var n, i = 0; i < t.length; ++i) if (s(e, r, (n = t[i]))) return n;
                  return null;
                }
                function i(t, e, r, n) {
                  void 0 === r && (r = 0), void 0 === n && (n = 0);
                  var i = null;
                  if (
                    (t
                      ? (i = e[t.sn - e[0].sn + 1] || null)
                      : 0 === r && 0 === e[0].start && (i = e[0]),
                    i && 0 === a(r, n, i))
                  )
                    return i;
                  var s = u.default.search(e, a.bind(null, r, n));
                  return s || i;
                }
                function a(t, e, r) {
                  void 0 === t && (t = 0), void 0 === e && (e = 0);
                  var n = Math.min(e, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
                  return r.start + r.duration - n <= t ? 1 : r.start - n > t && r.start ? -1 : 0;
                }
                function s(t, e, r) {
                  var n = 1e3 * Math.min(e, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
                  return (r.endProgramDateTime || 0) - n > t;
                }
                function o(t, e) {
                  return u.default.search(t, function (t) {
                    return t.cc < e ? 1 : t.cc > e ? -1 : 0;
                  });
                }
                r.r(e),
                  r.d(e, 'findFragmentByPDT', function () {
                    return n;
                  }),
                  r.d(e, 'findFragmentByPTS', function () {
                    return i;
                  }),
                  r.d(e, 'fragmentWithinToleranceTest', function () {
                    return a;
                  }),
                  r.d(e, 'pdtWithinToleranceTest', function () {
                    return s;
                  }),
                  r.d(e, 'findFragWithCC', function () {
                    return o;
                  });
                var l = r('./src/polyfills/number.ts'),
                  u = r('./src/utils/binary-search.ts');
              },
              './src/controller/fragment-tracker.ts': function (t, e, r) {
                'use strict';
                function n(t) {
                  var e, r;
                  return (
                    t.buffered &&
                    ((null === (e = t.range.video) || void 0 === e ? void 0 : e.partial) ||
                      (null === (r = t.range.audio) || void 0 === r ? void 0 : r.partial))
                  );
                }
                function i(t) {
                  return t.type + '_' + t.level + '_' + t.urlId + '_' + t.sn;
                }
                r.r(e),
                  r.d(e, 'FragmentState', function () {
                    return a;
                  }),
                  r.d(e, 'FragmentTracker', function () {
                    return l;
                  });
                var a,
                  s = r('./src/events.ts'),
                  o = r('./src/types/loader.ts');
                !(function (t) {
                  (t.NOT_LOADED = 'NOT_LOADED'),
                    (t.BACKTRACKED = 'BACKTRACKED'),
                    (t.APPENDING = 'APPENDING'),
                    (t.PARTIAL = 'PARTIAL'),
                    (t.OK = 'OK');
                })(a || (a = {}));
                var l = (function () {
                  function t(t) {
                    (this.activeFragment = null),
                      (this.activeParts = null),
                      (this.fragments = Object.create(null)),
                      (this.timeRanges = Object.create(null)),
                      (this.bufferPadding = 0.2),
                      (this.hls = void 0),
                      (this.hls = t),
                      this._registerListeners();
                  }
                  var e = t.prototype;
                  return (
                    (e._registerListeners = function () {
                      var t = this.hls;
                      t.on(s.Events.BUFFER_APPENDED, this.onBufferAppended, this),
                        t.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this),
                        t.on(s.Events.FRAG_LOADED, this.onFragLoaded, this);
                    }),
                    (e._unregisterListeners = function () {
                      var t = this.hls;
                      t.off(s.Events.BUFFER_APPENDED, this.onBufferAppended, this),
                        t.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this),
                        t.off(s.Events.FRAG_LOADED, this.onFragLoaded, this);
                    }),
                    (e.destroy = function () {
                      this._unregisterListeners(), (this.fragments = this.timeRanges = null);
                    }),
                    (e.getAppendedFrag = function (t, e) {
                      if (e === o.PlaylistLevelType.MAIN) {
                        var r = this.activeFragment,
                          n = this.activeParts;
                        if (!r) return null;
                        if (n)
                          for (var i = n.length; i--; ) {
                            var a = n[i],
                              s = a ? a.end : r.appendedPTS;
                            if (a.start <= t && void 0 !== s && t <= s)
                              return 9 < i && (this.activeParts = n.slice(i - 9)), a;
                          }
                        else if (r.start <= t && void 0 !== r.appendedPTS && t <= r.appendedPTS)
                          return r;
                      }
                      return this.getBufferedFrag(t, e);
                    }),
                    (e.getBufferedFrag = function (t, e) {
                      for (var r, n = this.fragments, i = Object.keys(n), a = i.length; a--; )
                        if ((null == (r = n[i[a]]) ? void 0 : r.body.type) === e && r.buffered) {
                          var s = r.body;
                          if (s.start <= t && t <= s.end) return s;
                        }
                      return null;
                    }),
                    (e.detectEvictedFragments = function (t, e, r) {
                      var n = this;
                      Object.keys(this.fragments).forEach(function (i) {
                        var a = n.fragments[i];
                        if (a) {
                          if (!a.buffered)
                            return void (a.body.type === r && n.removeFragment(a.body));
                          var s = a.range[t];
                          s &&
                            s.time.some(function (t) {
                              var r = !n.isTimeBuffered(t.startPTS, t.endPTS, e);
                              return r && n.removeFragment(a.body), r;
                            });
                        }
                      });
                    }),
                    (e.detectPartialFragments = function (t) {
                      var e = this,
                        r = this.timeRanges,
                        n = t.frag,
                        a = t.part;
                      if (r && 'initSegment' !== n.sn) {
                        var s = i(n),
                          o = this.fragments[s];
                        o &&
                          (Object.keys(r).forEach(function (t) {
                            var i = n.elementaryStreams[t];
                            if (i) {
                              var s = r[t],
                                l = null !== a || !0 === i.partial;
                              o.range[t] = e.getBufferedTimes(n, a, l, s);
                            }
                          }),
                          (o.backtrack = o.loaded = null),
                          Object.keys(o.range).length
                            ? (o.buffered = !0)
                            : this.removeFragment(o.body));
                      }
                    }),
                    (e.fragBuffered = function (t) {
                      var e = i(t),
                        r = this.fragments[e];
                      r && ((r.backtrack = r.loaded = null), (r.buffered = !0));
                    }),
                    (e.getBufferedTimes = function (t, e, r, n) {
                      for (
                        var i = { time: [], partial: r },
                          a = e ? e.start : t.start,
                          s = e ? e.end : t.end,
                          o = t.minEndPTS || s,
                          l = t.maxStartPTS || a,
                          u = 0;
                        u < n.length;
                        u++
                      ) {
                        var c = n.start(u) - this.bufferPadding,
                          d = n.end(u) + this.bufferPadding;
                        if (l >= c && o <= d) {
                          i.time.push({
                            startPTS: Math.max(a, n.start(u)),
                            endPTS: Math.min(s, n.end(u)),
                          });
                          break;
                        }
                        if (a < d && s > c)
                          (i.partial = !0),
                            i.time.push({
                              startPTS: Math.max(a, n.start(u)),
                              endPTS: Math.min(s, n.end(u)),
                            });
                        else if (s <= c) break;
                      }
                      return i;
                    }),
                    (e.getPartialFragment = function (t) {
                      var e,
                        r,
                        i,
                        a = null,
                        s = 0,
                        o = this.bufferPadding,
                        l = this.fragments;
                      return (
                        Object.keys(l).forEach(function (u) {
                          var c = l[u];
                          !c ||
                            (n(c) &&
                              ((r = c.body.start - o),
                              (i = c.body.end + o),
                              t >= r &&
                                t <= i &&
                                ((e = Math.min(t - r, i - t)), s <= e && ((a = c.body), (s = e)))));
                        }),
                        a
                      );
                    }),
                    (e.getState = function (t) {
                      var e = i(t),
                        r = this.fragments[e];
                      return r
                        ? r.buffered
                          ? n(r)
                            ? a.PARTIAL
                            : a.OK
                          : r.backtrack
                          ? a.BACKTRACKED
                          : a.APPENDING
                        : a.NOT_LOADED;
                    }),
                    (e.backtrack = function (t, e) {
                      var r = i(t),
                        n = this.fragments[r];
                      if (!n || n.backtrack) return null;
                      var a = (n.backtrack = e || n.loaded);
                      return (n.loaded = null), a;
                    }),
                    (e.getBacktrackData = function (t) {
                      var e = i(t),
                        r = this.fragments[e];
                      if (r) {
                        var n,
                          a = r.backtrack;
                        if (null != a && null !== (n = a.payload) && void 0 !== n && n.byteLength)
                          return a;
                        this.removeFragment(t);
                      }
                      return null;
                    }),
                    (e.isTimeBuffered = function (t, e, r) {
                      for (var n, i, a = 0; a < r.length; a++) {
                        if (
                          ((n = r.start(a) - this.bufferPadding),
                          (i = r.end(a) + this.bufferPadding),
                          t >= n && e <= i)
                        )
                          return !0;
                        if (e <= n) return !1;
                      }
                      return !1;
                    }),
                    (e.onFragLoaded = function (t, e) {
                      var r = e.frag,
                        n = e.part;
                      if ('initSegment' !== r.sn && !r.bitrateTest && !n) {
                        var a = i(r);
                        this.fragments[a] = {
                          body: r,
                          loaded: e,
                          backtrack: null,
                          buffered: !1,
                          range: Object.create(null),
                        };
                      }
                    }),
                    (e.onBufferAppended = function (t, e) {
                      var r = this,
                        n = e.frag,
                        i = e.part,
                        a = e.timeRanges;
                      if (n.type === o.PlaylistLevelType.MAIN)
                        if (((this.activeFragment = n), i)) {
                          var s = this.activeParts;
                          s || (this.activeParts = s = []), s.push(i);
                        } else this.activeParts = null;
                      (this.timeRanges = a),
                        Object.keys(a).forEach(function (t) {
                          var e = a[t];
                          if ((r.detectEvictedFragments(t, e), !i))
                            for (var s = 0; s < e.length; s++)
                              n.appendedPTS = Math.max(e.end(s), n.appendedPTS || 0);
                        });
                    }),
                    (e.onFragBuffered = function (t, e) {
                      this.detectPartialFragments(e);
                    }),
                    (e.hasFragment = function (t) {
                      var e = i(t);
                      return !!this.fragments[e];
                    }),
                    (e.removeFragmentsInRange = function (t, e, r) {
                      var n = this;
                      Object.keys(this.fragments).forEach(function (i) {
                        var a = n.fragments[i];
                        if (a && a.buffered) {
                          var s = a.body;
                          s.type === r && s.start < e && s.end > t && n.removeFragment(s);
                        }
                      });
                    }),
                    (e.removeFragment = function (t) {
                      var e = i(t);
                      (t.stats.loaded = 0), t.clearElementaryStreamInfo(), delete this.fragments[e];
                    }),
                    (e.removeAllFragments = function () {
                      (this.fragments = Object.create(null)),
                        (this.activeFragment = null),
                        (this.activeParts = null);
                    }),
                    t
                  );
                })();
              },
              './src/controller/gap-controller.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'STALL_MINIMUM_DURATION_MS', function () {
                    return o;
                  }),
                  r.d(e, 'MAX_START_GAP_JUMP', function () {
                    return l;
                  }),
                  r.d(e, 'SKIP_BUFFER_HOLE_STEP_SECONDS', function () {
                    return u;
                  }),
                  r.d(e, 'SKIP_BUFFER_RANGE_START', function () {
                    return c;
                  }),
                  r.d(e, 'default', function () {
                    return d;
                  });
                var n = r('./src/utils/buffer-helper.ts'),
                  i = r('./src/errors.ts'),
                  a = r('./src/events.ts'),
                  s = r('./src/utils/logger.ts'),
                  o = 250,
                  l = 2,
                  u = 0.1,
                  c = 0.05,
                  d = (function () {
                    function t(t, e, r, n) {
                      (this.config = void 0),
                        (this.media = void 0),
                        (this.fragmentTracker = void 0),
                        (this.hls = void 0),
                        (this.nudgeRetry = 0),
                        (this.stallReported = !1),
                        (this.stalled = null),
                        (this.moved = !1),
                        (this.seeking = !1),
                        (this.config = t),
                        (this.media = e),
                        (this.fragmentTracker = r),
                        (this.hls = n);
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {
                        this.hls = this.fragmentTracker = this.media = null;
                      }),
                      (e.poll = function (t) {
                        var e = this.config,
                          r = this.media,
                          i = this.stalled,
                          a = r.currentTime,
                          o = r.seeking,
                          l = this.seeking && !o,
                          u = !this.seeking && o;
                        if (((this.seeking = o), a === t)) {
                          if (
                            ((u || l) && (this.stalled = null),
                            !r.paused &&
                              !r.ended &&
                              0 !== r.playbackRate &&
                              n.BufferHelper.getBuffered(r).length)
                          ) {
                            var c = n.BufferHelper.bufferInfo(r, a, 0),
                              d = 0 < c.len,
                              f = c.nextStart || 0;
                            if (d || f) {
                              if (o) {
                                var h = 2 < c.len,
                                  v =
                                    !f ||
                                    (2 < f - a && !this.fragmentTracker.getPartialFragment(a));
                                if (h || v) return;
                                this.moved = !1;
                              }
                              if (!this.moved && null !== this.stalled) {
                                var g,
                                  p = Math.max(f, c.start || 0) - a,
                                  m = this.hls.levels
                                    ? this.hls.levels[this.hls.currentLevel]
                                    : null,
                                  y = (
                                    null == m || null === (g = m.details) || void 0 === g
                                      ? void 0
                                      : g.live
                                  )
                                    ? 2 * m.details.targetduration
                                    : 2;
                                if (0 < p && p <= y) return void this._trySkipBufferHole(null);
                              }
                              var b = self.performance.now();
                              if (null === i) return void (this.stalled = b);
                              var E = b - i;
                              !o && 250 <= E && this._reportStall(c.len);
                              var T = n.BufferHelper.bufferInfo(r, a, e.maxBufferHole);
                              this._tryFixBufferStall(T, E);
                            }
                          }
                        } else if (((this.moved = !0), null !== i)) {
                          if (this.stallReported) {
                            var A = self.performance.now() - i;
                            s.logger.warn(
                              'playback not stuck anymore @' + a + ', after ' + Math.round(A) + 'ms'
                            ),
                              (this.stallReported = !1);
                          }
                          (this.stalled = null), (this.nudgeRetry = 0);
                        }
                      }),
                      (e._tryFixBufferStall = function (t, e) {
                        var r = this.config,
                          n = this.fragmentTracker,
                          i = this.media.currentTime,
                          a = n.getPartialFragment(i);
                        (a && this._trySkipBufferHole(a)) ||
                          (t.len > r.maxBufferHole &&
                            e > 1e3 * r.highBufferWatchdogPeriod &&
                            (s.logger.warn('Trying to nudge playhead over buffer-hole'),
                            (this.stalled = null),
                            this._tryNudgeBuffer()));
                      }),
                      (e._reportStall = function (t) {
                        var e = this.hls,
                          r = this.media;
                        this.stallReported ||
                          ((this.stallReported = !0),
                          s.logger.warn(
                            'Playback stalling at @' +
                              r.currentTime +
                              ' due to low buffer (buffer=' +
                              t +
                              ')'
                          ),
                          e.trigger(a.Events.ERROR, {
                            type: i.ErrorTypes.MEDIA_ERROR,
                            details: i.ErrorDetails.BUFFER_STALLED_ERROR,
                            fatal: !1,
                            buffer: t,
                          }));
                      }),
                      (e._trySkipBufferHole = function (t) {
                        for (
                          var e,
                            r = this.config,
                            o = this.hls,
                            l = this.media,
                            d = l.currentTime,
                            f = 0,
                            h = n.BufferHelper.getBuffered(l),
                            v = 0;
                          v < h.length;
                          v++
                        ) {
                          if (((e = h.start(v)), d + r.maxBufferHole >= f && d < e)) {
                            var g = Math.max(e + c, l.currentTime + u);
                            s.logger.warn(
                              'skipping hole, adjusting currentTime from ' + d + ' to ' + g
                            );
                            this.moved = !0;
                            this.stalled = null;
                            l.currentTime = g;
                            if (t) {
                              o.trigger(a.Events.ERROR, {
                                type: i.ErrorTypes.MEDIA_ERROR,
                                details: i.ErrorDetails.BUFFER_SEEK_OVER_HOLE,
                                fatal: !1,
                                reason:
                                  'fragment loaded with buffer holes, seeking from ' +
                                  d +
                                  ' to ' +
                                  g,
                                frag: t,
                              });
                            }
                            return g;
                          }
                          f = h.end(v);
                        }
                        return 0;
                      }),
                      (e._tryNudgeBuffer = function () {
                        var t = this.config,
                          e = this.hls,
                          r = this.media,
                          n = r.currentTime,
                          o = (this.nudgeRetry || 0) + 1;
                        if (((this.nudgeRetry = o), o < t.nudgeMaxRetry)) {
                          var l = n + o * t.nudgeOffset;
                          s.logger.warn("Nudging 'currentTime' from " + n + ' to ' + l),
                            (r.currentTime = l),
                            e.trigger(a.Events.ERROR, {
                              type: i.ErrorTypes.MEDIA_ERROR,
                              details: i.ErrorDetails.BUFFER_NUDGE_ON_STALL,
                              fatal: !1,
                            });
                        } else
                          s.logger.error(
                            'Playhead still not moving while enough data buffered @' +
                              n +
                              ' after ' +
                              t.nudgeMaxRetry +
                              ' nudges'
                          ),
                            e.trigger(a.Events.ERROR, {
                              type: i.ErrorTypes.MEDIA_ERROR,
                              details: i.ErrorDetails.BUFFER_STALLED_ERROR,
                              fatal: !0,
                            });
                      }),
                      t
                    );
                  })();
              },
              './src/controller/id3-track-controller.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = r('./src/events.ts'),
                  i = r('./src/utils/texttrack-utils.ts'),
                  a = r('./src/demux/id3.ts'),
                  s = (function () {
                    function t(t) {
                      (this.hls = void 0),
                        (this.id3Track = null),
                        (this.media = null),
                        (this.hls = t),
                        this._registerListeners();
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {
                        this._unregisterListeners();
                      }),
                      (e._registerListeners = function () {
                        var t = this.hls;
                        t.on(n.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          t.on(n.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          t.on(n.Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this),
                          t.on(n.Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
                      }),
                      (e._unregisterListeners = function () {
                        var t = this.hls;
                        t.off(n.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          t.off(n.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          t.off(n.Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this),
                          t.off(n.Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
                      }),
                      (e.onMediaAttached = function (t, e) {
                        this.media = e.media;
                      }),
                      (e.onMediaDetaching = function () {
                        this.id3Track &&
                          (Object(i.clearCurrentCues)(this.id3Track),
                          (this.id3Track = null),
                          (this.media = null));
                      }),
                      (e.getID3Track = function (t) {
                        if (this.media) {
                          for (var e, r = 0; r < t.length; r++)
                            if ('metadata' === (e = t[r]).kind && 'id3' === e.label)
                              return Object(i.sendAddTrackEvent)(e, this.media), e;
                          return this.media.addTextTrack('metadata', 'id3');
                        }
                      }),
                      (e.onFragParsingMetadata = function (t, e) {
                        if (this.media) {
                          var r = e.frag,
                            n = e.samples;
                          this.id3Track ||
                            ((this.id3Track = this.getID3Track(this.media.textTracks)),
                            (this.id3Track.mode = 'hidden'));
                          for (
                            var i,
                              s = self.WebKitDataCue || self.VTTCue || self.TextTrackCue,
                              o = 0;
                            o < n.length;
                            o++
                          )
                            if ((i = a.getID3Frames(n[o].data))) {
                              var l = n[o].pts,
                                u = o < n.length - 1 ? n[o + 1].pts : r.end;
                              0 >= u - l && (u = l + 0.25);
                              for (var c, d = 0; d < i.length; d++)
                                if (((c = i[d]), !a.isTimeStampFrame(c))) {
                                  var f = new s(l, u, '');
                                  (f.value = c), this.id3Track.addCue(f);
                                }
                            }
                        }
                      }),
                      (e.onBufferFlushing = function (t, e) {
                        var r = e.startOffset,
                          n = e.endOffset,
                          a = e.type;
                        if (!a || 'audio' === a) {
                          var s = this.id3Track;
                          s && Object(i.removeCuesInRange)(s, r, n);
                        }
                      }),
                      t
                    );
                  })();
                e.default = s;
              },
              './src/controller/latency-controller.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return o;
                  });
                var i = r('./src/errors.ts'),
                  a = r('./src/events.ts'),
                  s = r('./src/utils/logger.ts'),
                  o = (function () {
                    function t(t) {
                      var e = this;
                      (this.hls = void 0),
                        (this.config = void 0),
                        (this.media = null),
                        (this.levelDetails = null),
                        (this.currentTime = 0),
                        (this.stallCount = 0),
                        (this._latency = null),
                        (this.timeupdateHandler = function () {
                          return e.timeupdate();
                        }),
                        (this.hls = t),
                        (this.config = t.config),
                        this.registerListeners();
                    }
                    var e,
                      r,
                      o,
                      l = t.prototype;
                    return (
                      (l.destroy = function () {
                        this.unregisterListeners(),
                          this.onMediaDetaching(),
                          (this.levelDetails = null),
                          (this.hls = this.timeupdateHandler = null);
                      }),
                      (l.registerListeners = function () {
                        this.hls.on(a.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          this.hls.on(a.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          this.hls.on(a.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          this.hls.on(a.Events.LEVEL_UPDATED, this.onLevelUpdated, this),
                          this.hls.on(a.Events.ERROR, this.onError, this);
                      }),
                      (l.unregisterListeners = function () {
                        this.hls.off(a.Events.MEDIA_ATTACHED, this.onMediaAttached),
                          this.hls.off(a.Events.MEDIA_DETACHING, this.onMediaDetaching),
                          this.hls.off(a.Events.MANIFEST_LOADING, this.onManifestLoading),
                          this.hls.off(a.Events.LEVEL_UPDATED, this.onLevelUpdated),
                          this.hls.off(a.Events.ERROR, this.onError);
                      }),
                      (l.onMediaAttached = function (t, e) {
                        (this.media = e.media),
                          this.media.addEventListener('timeupdate', this.timeupdateHandler);
                      }),
                      (l.onMediaDetaching = function () {
                        this.media &&
                          (this.media.removeEventListener('timeupdate', this.timeupdateHandler),
                          (this.media = null));
                      }),
                      (l.onManifestLoading = function () {
                        (this.levelDetails = null), (this._latency = null), (this.stallCount = 0);
                      }),
                      (l.onLevelUpdated = function (t, e) {
                        var r = e.details;
                        (this.levelDetails = r),
                          r.advanced && this.timeupdate(),
                          !r.live &&
                            this.media &&
                            this.media.removeEventListener('timeupdate', this.timeupdateHandler);
                      }),
                      (l.onError = function (t, e) {
                        e.details !== i.ErrorDetails.BUFFER_STALLED_ERROR ||
                          (this.stallCount++,
                          s.logger.warn(
                            '[playback-rate-controller]: Stall detected, adjusting target latency'
                          ));
                      }),
                      (l.timeupdate = function () {
                        var t = this.media,
                          e = this.levelDetails;
                        if (t && e) {
                          this.currentTime = t.currentTime;
                          var r = this.computeLatency();
                          if (null !== r) {
                            this._latency = r;
                            var n = this.config,
                              i = n.lowLatencyMode,
                              a = n.maxLiveSyncPlaybackRate;
                            if (i && 1 !== a) {
                              var s = this.targetLatency;
                              if (null !== s) {
                                var o = r - s,
                                  l = o < Math.min(this.maxLatency, s + e.targetduration);
                                if (e.live && l && 0.05 < o && 1 < this.forwardBufferLength) {
                                  var u = Math.min(2, Math.max(1, a)),
                                    c =
                                      Math.round(
                                        (2 / (1 + Math.exp(-0.75 * o - this.edgeStalled))) * 20
                                      ) / 20;
                                  t.playbackRate = Math.min(u, Math.max(1, c));
                                } else
                                  1 !== t.playbackRate &&
                                    0 !== t.playbackRate &&
                                    (t.playbackRate = 1);
                              }
                            }
                          }
                        }
                      }),
                      (l.estimateLiveEdge = function () {
                        var t = this.levelDetails;
                        return null === t ? null : t.edge + t.age;
                      }),
                      (l.computeLatency = function () {
                        var t = this.estimateLiveEdge();
                        return null === t ? null : t - this.currentTime;
                      }),
                      (e = t),
                      (r = [
                        {
                          key: 'latency',
                          get: function () {
                            return this._latency || 0;
                          },
                        },
                        {
                          key: 'maxLatency',
                          get: function () {
                            var t = this.config,
                              e = this.levelDetails;
                            return void 0 === t.liveMaxLatencyDuration
                              ? e
                                ? t.liveMaxLatencyDurationCount * e.targetduration
                                : 0
                              : t.liveMaxLatencyDuration;
                          },
                        },
                        {
                          key: 'targetLatency',
                          get: function () {
                            var t = this.levelDetails;
                            if (null === t) return null;
                            var e = t.holdBack,
                              r = t.partHoldBack,
                              n = t.targetduration,
                              i = this.config,
                              a = i.liveSyncDuration,
                              s = i.liveSyncDurationCount,
                              o = i.lowLatencyMode,
                              l = this.hls.userConfig,
                              u = (o && r) || e;
                            (l.liveSyncDuration || l.liveSyncDurationCount || 0 === u) &&
                              (u = void 0 === a ? s * n : a);
                            var c = n;
                            return u + Math.min(1 * this.stallCount, c);
                          },
                        },
                        {
                          key: 'liveSyncPosition',
                          get: function () {
                            var t = this.estimateLiveEdge(),
                              e = this.targetLatency,
                              r = this.levelDetails;
                            if (null === t || null === e || null === r) return null;
                            var n = r.edge,
                              i = t - e - this.edgeStalled,
                              a = n - r.totalduration,
                              s =
                                n -
                                ((this.config.lowLatencyMode && r.partTarget) || r.targetduration);
                            return Math.min(Math.max(a, i), s);
                          },
                        },
                        {
                          key: 'drift',
                          get: function () {
                            var t = this.levelDetails;
                            return null === t ? 1 : t.drift;
                          },
                        },
                        {
                          key: 'edgeStalled',
                          get: function () {
                            var t = this.levelDetails;
                            if (null === t) return 0;
                            var e =
                              3 *
                              ((this.config.lowLatencyMode && t.partTarget) || t.targetduration);
                            return Math.max(t.age - e, 0);
                          },
                        },
                        {
                          key: 'forwardBufferLength',
                          get: function () {
                            var t = this.media,
                              e = this.levelDetails;
                            if (!t || !e) return 0;
                            var r = t.buffered.length;
                            return r ? t.buffered.end(r - 1) : e.edge - this.currentTime;
                          },
                        },
                      ]) && n(e.prototype, r),
                      o && n(e, o),
                      t
                    );
                  })();
              },
              './src/controller/level-controller.ts': function (t, e, r) {
                'use strict';
                function n() {
                  return (n =
                    Object.assign ||
                    function (t) {
                      for (var e, r = 1; r < arguments.length; r++)
                        for (var n in (e = arguments[r]))
                          Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                      return t;
                    }).apply(this, arguments);
                }
                function i(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                function a(t, e) {
                  return (a =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return v;
                  });
                var s = r('./src/types/level.ts'),
                  o = r('./src/events.ts'),
                  l = r('./src/errors.ts'),
                  u = r('./src/utils/codecs.ts'),
                  c = r('./src/controller/level-helper.ts'),
                  d = r('./src/controller/base-playlist-controller.ts'),
                  f = r('./src/types/loader.ts'),
                  h = /chrome|firefox/.test(navigator.userAgent.toLowerCase()),
                  v = (function (t) {
                    function e(e) {
                      var r;
                      return (
                        ((r = t.call(this, e, '[level-controller]') || this)._levels = []),
                        (r._firstLevel = -1),
                        (r._startLevel = void 0),
                        (r.currentLevelIndex = -1),
                        (r.manualLevelIndex = -1),
                        (r.onParsedComplete = void 0),
                        r._registerListeners(),
                        r
                      );
                    }
                    var r, d;
                    (d = t),
                      ((r = e).prototype = Object.create(d.prototype)),
                      (r.prototype.constructor = r),
                      a(r, d);
                    var v,
                      g,
                      p,
                      m = e.prototype;
                    return (
                      (m._registerListeners = function () {
                        var t = this.hls;
                        t.on(o.Events.MANIFEST_LOADED, this.onManifestLoaded, this),
                          t.on(o.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                          t.on(o.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this),
                          t.on(o.Events.FRAG_LOADED, this.onFragLoaded, this),
                          t.on(o.Events.ERROR, this.onError, this);
                      }),
                      (m._unregisterListeners = function () {
                        var t = this.hls;
                        t.off(o.Events.MANIFEST_LOADED, this.onManifestLoaded, this),
                          t.off(o.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                          t.off(o.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this),
                          t.off(o.Events.FRAG_LOADED, this.onFragLoaded, this),
                          t.off(o.Events.ERROR, this.onError, this);
                      }),
                      (m.destroy = function () {
                        this._unregisterListeners(),
                          (this.manualLevelIndex = -1),
                          (this._levels.length = 0),
                          t.prototype.destroy.call(this);
                      }),
                      (m.startLoad = function () {
                        this._levels.forEach(function (t) {
                          t.loadError = 0;
                        }),
                          t.prototype.startLoad.call(this);
                      }),
                      (m.onManifestLoaded = function (t, e) {
                        var r,
                          n,
                          i = [],
                          a = [],
                          d = [],
                          f = {},
                          v = !1,
                          g = !1,
                          p = !1;
                        if (
                          (e.levels.forEach(function (t) {
                            var e = t.attrs;
                            (v = v || !(!t.width || !t.height)),
                              (g = g || !!t.videoCodec),
                              (p = p || !!t.audioCodec),
                              h &&
                                t.audioCodec &&
                                -1 !== t.audioCodec.indexOf('mp4a.40.34') &&
                                (t.audioCodec = void 0);
                            var r = t.bitrate + '-' + t.attrs.RESOLUTION + '-' + t.attrs.CODECS;
                            (n = f[r])
                              ? n.url.push(t.url)
                              : ((n = new s.Level(t)), (f[r] = n), i.push(n)),
                              e &&
                                (e.AUDIO && Object(c.addGroupId)(n, 'audio', e.AUDIO),
                                e.SUBTITLES && Object(c.addGroupId)(n, 'text', e.SUBTITLES));
                          }),
                          (v || g) &&
                            p &&
                            (i = i.filter(function (t) {
                              var e = t.videoCodec,
                                r = t.width,
                                n = t.height;
                              return !!e || !(!r || !n);
                            })),
                          (i = i.filter(function (t) {
                            var e = t.audioCodec,
                              r = t.videoCodec;
                            return (
                              (!e || Object(u.isCodecSupportedInMp4)(e, 'audio')) &&
                              (!r || Object(u.isCodecSupportedInMp4)(r, 'video'))
                            );
                          })),
                          e.audioTracks &&
                            ((a = e.audioTracks.filter(function (t) {
                              return (
                                !t.audioCodec ||
                                Object(u.isCodecSupportedInMp4)(t.audioCodec, 'audio')
                              );
                            })),
                            Object(c.assignTrackIdsByGroup)(a)),
                          e.subtitles && ((d = e.subtitles), Object(c.assignTrackIdsByGroup)(d)),
                          0 < i.length)
                        ) {
                          (r = i[0].bitrate),
                            i.sort(function (t, e) {
                              return t.bitrate - e.bitrate;
                            }),
                            (this._levels = i);
                          for (var m = 0; m < i.length; m++)
                            if (i[m].bitrate === r) {
                              (this._firstLevel = m),
                                this.log(
                                  'manifest loaded, ' +
                                    i.length +
                                    ' level(s) found, first bitrate: ' +
                                    r
                                );
                              break;
                            }
                          var y = p && !g,
                            b = {
                              levels: i,
                              audioTracks: a,
                              subtitleTracks: d,
                              firstLevel: this._firstLevel,
                              stats: e.stats,
                              audio: p,
                              video: g,
                              altAudio:
                                !y &&
                                a.some(function (t) {
                                  return !!t.url;
                                }),
                            };
                          this.hls.trigger(o.Events.MANIFEST_PARSED, b),
                            (this.hls.config.autoStartLoad || this.hls.forceStartLoad) &&
                              this.hls.startLoad(this.hls.config.startPosition);
                        } else
                          this.hls.trigger(o.Events.ERROR, {
                            type: l.ErrorTypes.MEDIA_ERROR,
                            details: l.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                            fatal: !0,
                            url: e.url,
                            reason: 'no level with compatible codecs found in manifest',
                          });
                      }),
                      (m.onError = function (e, r) {
                        if ((t.prototype.onError.call(this, e, r), !r.fatal)) {
                          var n = r.context,
                            i = this._levels[this.currentLevelIndex];
                          if (
                            n &&
                            ((n.type === f.PlaylistContextType.AUDIO_TRACK &&
                              i.audioGroupIds &&
                              n.groupId === i.audioGroupIds[i.urlId]) ||
                              (n.type === f.PlaylistContextType.SUBTITLE_TRACK &&
                                i.textGroupIds &&
                                n.groupId === i.textGroupIds[i.urlId]))
                          )
                            return void this.redundantFailover(this.currentLevelIndex);
                          var a,
                            s = !1,
                            o = !0;
                          switch (r.details) {
                            case l.ErrorDetails.FRAG_LOAD_ERROR:
                            case l.ErrorDetails.FRAG_LOAD_TIMEOUT:
                            case l.ErrorDetails.KEY_LOAD_ERROR:
                            case l.ErrorDetails.KEY_LOAD_TIMEOUT:
                              if (r.frag) {
                                var u = this._levels[r.frag.level];
                                u
                                  ? (u.fragmentError++,
                                    u.fragmentError > this.hls.config.fragLoadingMaxRetry &&
                                      (a = r.frag.level))
                                  : (a = r.frag.level);
                              }
                              break;
                            case l.ErrorDetails.LEVEL_LOAD_ERROR:
                            case l.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                              n && (n.deliveryDirectives && (o = !1), (a = n.level)), (s = !0);
                              break;
                            case l.ErrorDetails.REMUX_ALLOC_ERROR:
                              (a = r.level), (s = !0);
                          }
                          void 0 !== a && this.recoverLevel(r, a, s, o);
                        }
                      }),
                      (m.recoverLevel = function (t, e, r, n) {
                        var i = t.details,
                          a = this._levels[e];
                        if ((a.loadError++, r)) {
                          if (!this.retryLoadingOrFail(t))
                            return void (this.currentLevelIndex = -1);
                          t.levelRetry = !0;
                        }
                        if (n) {
                          var s = a.url.length;
                          if (1 < s && a.loadError < s)
                            (t.levelRetry = !0), this.redundantFailover(e);
                          else if (-1 === this.manualLevelIndex) {
                            var o = 0 === e ? this._levels.length - 1 : e - 1;
                            this.currentLevelIndex !== o &&
                              0 === this._levels[o].loadError &&
                              (console.warn(i + ': switch to ' + o),
                              (t.levelRetry = !0),
                              (this.hls.nextAutoLevel = o));
                          }
                        }
                      }),
                      (m.redundantFailover = function (t) {
                        var e = this._levels[t],
                          r = e.url.length;
                        if (1 < r) {
                          var n = (e.urlId + 1) % r;
                          console.warn('Switching to redundant URL-id ' + n),
                            this._levels.forEach(function (t) {
                              t.urlId = n;
                            }),
                            (this.level = t);
                        }
                      }),
                      (m.onFragLoaded = function (t, e) {
                        var r = e.frag;
                        if (void 0 !== r && r.type === f.PlaylistLevelType.MAIN) {
                          var n = this._levels[r.level];
                          void 0 !== n && ((n.fragmentError = 0), (n.loadError = 0));
                        }
                      }),
                      (m.onLevelLoaded = function (t, e) {
                        var r,
                          n,
                          i = e.level,
                          a = e.details,
                          s = this._levels[i];
                        if (!s)
                          return (
                            console.warn('Invalid level index ' + i),
                            void (
                              null !== (n = e.deliveryDirectives) &&
                              void 0 !== n &&
                              n.skip &&
                              (a.deltaUpdateFailed = !0)
                            )
                          );
                        i === this.currentLevelIndex
                          ? (0 === s.fragmentError && ((s.loadError = 0), (this.retryCount = 0)),
                            this.playlistLoaded(i, e, s.details))
                          : null !== (r = e.deliveryDirectives) &&
                            void 0 !== r &&
                            r.skip &&
                            (a.deltaUpdateFailed = !0);
                      }),
                      (m.onAudioTrackSwitched = function (t, e) {
                        var r = this.hls.levels[this.currentLevelIndex];
                        if (r && r.audioGroupIds) {
                          for (
                            var n = -1, i = this.hls.audioTracks[e.id].groupId, a = 0;
                            a < r.audioGroupIds.length;
                            a++
                          )
                            if (r.audioGroupIds[a] === i) {
                              n = a;
                              break;
                            }
                          n !== r.urlId && ((r.urlId = n), this.startLoad());
                        }
                      }),
                      (m.loadPlaylist = function (t) {
                        var e = this.currentLevelIndex,
                          r = this._levels[e];
                        if (this.canLoad && r && 0 < r.url.length) {
                          var n = r.urlId,
                            i = r.url[n];
                          if (t)
                            try {
                              i = t.addDirectives(i);
                            } catch (t) {
                              console.warn(
                                'Could not construct new URL with HLS Delivery Directives: ' + t
                              );
                            }
                          this.log(
                            'Attempt loading level index ' +
                              e +
                              (t ? ' at sn ' + t.msn + ' part ' + t.part : '') +
                              ' with URL-id ' +
                              n +
                              ' ' +
                              i
                          ),
                            this.clearTimer(),
                            this.hls.trigger(o.Events.LEVEL_LOADING, {
                              url: i,
                              level: e,
                              id: n,
                              deliveryDirectives: t || null,
                            });
                        }
                      }),
                      (m.removeLevel = function (t, e) {
                        var r = function (t, r) {
                            return r !== e;
                          },
                          n = this._levels
                            .filter(function (n, i) {
                              return (
                                i !== t ||
                                (!!(1 < n.url.length && void 0 !== e) &&
                                  ((n.url = n.url.filter(r)),
                                  n.audioGroupIds && (n.audioGroupIds = n.audioGroupIds.filter(r)),
                                  n.textGroupIds && (n.textGroupIds = n.textGroupIds.filter(r)),
                                  (n.urlId = 0),
                                  !0))
                              );
                            })
                            .map(function (t, e) {
                              var r = t.details;
                              return (
                                null != r &&
                                  r.fragments &&
                                  r.fragments.forEach(function (t) {
                                    t.level = e;
                                  }),
                                t
                              );
                            });
                        (this._levels = n),
                          this.hls.trigger(o.Events.LEVELS_UPDATED, { levels: n });
                      }),
                      (v = e),
                      (g = [
                        {
                          key: 'levels',
                          get: function () {
                            return 0 === this._levels.length ? null : this._levels;
                          },
                        },
                        {
                          key: 'level',
                          get: function () {
                            return this.currentLevelIndex;
                          },
                          set: function (t) {
                            var e,
                              r = this._levels;
                            if (
                              0 !== r.length &&
                              (this.currentLevelIndex !== t ||
                                null === (e = r[t]) ||
                                void 0 === e ||
                                !e.details)
                            ) {
                              if (0 > t || t >= r.length) {
                                var i = 0 > t;
                                if (
                                  (this.hls.trigger(o.Events.ERROR, {
                                    type: l.ErrorTypes.OTHER_ERROR,
                                    details: l.ErrorDetails.LEVEL_SWITCH_ERROR,
                                    level: t,
                                    fatal: i,
                                    reason: 'invalid level idx',
                                  }),
                                  i)
                                )
                                  return;
                                t = Math.min(t, r.length - 1);
                              }
                              this.clearTimer();
                              var a = this.currentLevelIndex,
                                s = r[a],
                                u = r[t];
                              this.log('switching to level ' + t + ' from ' + a),
                                (this.currentLevelIndex = t);
                              var c = n({}, u, {
                                level: t,
                                maxBitrate: u.maxBitrate,
                                uri: u.uri,
                                urlId: u.urlId,
                              });
                              delete c._urlId, this.hls.trigger(o.Events.LEVEL_SWITCHING, c);
                              var d = u.details;
                              if (!d || d.live) {
                                var f = this.switchParams(u.uri, null == s ? void 0 : s.details);
                                this.loadPlaylist(f);
                              }
                            }
                          },
                        },
                        {
                          key: 'manualLevel',
                          get: function () {
                            return this.manualLevelIndex;
                          },
                          set: function (t) {
                            (this.manualLevelIndex = t),
                              void 0 === this._startLevel && (this._startLevel = t),
                              -1 !== t && (this.level = t);
                          },
                        },
                        {
                          key: 'firstLevel',
                          get: function () {
                            return this._firstLevel;
                          },
                          set: function (t) {
                            this._firstLevel = t;
                          },
                        },
                        {
                          key: 'startLevel',
                          get: function () {
                            if (void 0 === this._startLevel) {
                              var t = this.hls.config.startLevel;
                              return void 0 === t ? this._firstLevel : t;
                            }
                            return this._startLevel;
                          },
                          set: function (t) {
                            this._startLevel = t;
                          },
                        },
                        {
                          key: 'nextLoadLevel',
                          get: function () {
                            return -1 === this.manualLevelIndex
                              ? this.hls.nextAutoLevel
                              : this.manualLevelIndex;
                          },
                          set: function (t) {
                            (this.level = t),
                              -1 === this.manualLevelIndex && (this.hls.nextAutoLevel = t);
                          },
                        },
                      ]) && i(v.prototype, g),
                      p && i(v, p),
                      e
                    );
                  })(d.default);
              },
              './src/controller/level-helper.ts': function (t, e, r) {
                'use strict';
                function n(t, e, r) {
                  'audio' === e
                    ? (t.audioGroupIds || (t.audioGroupIds = []), t.audioGroupIds.push(r))
                    : 'text' === e &&
                      (t.textGroupIds || (t.textGroupIds = []), t.textGroupIds.push(r));
                }
                function i(t) {
                  var e = {};
                  t.forEach(function (t) {
                    var r = t.groupId || '';
                    (t.id = e[r] = e[r] || 0), e[r]++;
                  });
                }
                function a(t, e, r) {
                  s(t[e], t[r]);
                }
                function s(t, e) {
                  var r = e.startPTS;
                  if (Object(p.isFiniteNumber)(r)) {
                    var n,
                      i = 0;
                    e.sn > t.sn ? ((i = r - t.start), (n = t)) : ((i = t.start - r), (n = e)),
                      n.duration !== i && (n.duration = i);
                  } else if (e.sn > t.sn) {
                    var a = t.cc === e.cc;
                    e.start =
                      a && t.minEndPTS ? t.start + (t.minEndPTS - t.start) : t.start + t.duration;
                  } else e.start = Math.max(t.start - e.duration, 0);
                }
                function o(t, e, r, n, i, a) {
                  0 >= n - r &&
                    (m.logger.warn('Fragment should have a positive duration', e),
                    (n = r + e.duration),
                    (a = i + e.duration));
                  var o = r,
                    l = n,
                    u = e.startPTS,
                    c = e.endPTS;
                  if (Object(p.isFiniteNumber)(u)) {
                    var d = Math.abs(u - r);
                    (e.deltaPTS = Object(p.isFiniteNumber)(e.deltaPTS)
                      ? Math.max(d, e.deltaPTS)
                      : d),
                      (o = Math.max(r, u)),
                      (r = Math.min(r, u)),
                      (i = Math.min(i, e.startDTS)),
                      (l = Math.min(n, c)),
                      (n = Math.max(n, c)),
                      (a = Math.max(a, e.endDTS));
                  }
                  e.duration = n - r;
                  var f = r - e.start;
                  (e.appendedPTS = n),
                    (e.start = e.startPTS = r),
                    (e.maxStartPTS = o),
                    (e.startDTS = i),
                    (e.endPTS = n),
                    (e.minEndPTS = l),
                    (e.endDTS = a);
                  var h = e.sn;
                  if (!t || h < t.startSN || h > t.endSN) return 0;
                  var v,
                    g = h - t.startSN,
                    y = t.fragments;
                  for (y[g] = e, v = g; 0 < v; v--) s(y[v], y[v - 1]);
                  for (v = g; v < y.length - 1; v++) s(y[v], y[v + 1]);
                  return (
                    t.fragmentHint && s(y[y.length - 1], t.fragmentHint),
                    (t.PTSKnown = t.alignedSliding = !0),
                    f
                  );
                }
                function l(t, e) {
                  for (var r, n = null, i = t.fragments, a = i.length - 1; 0 <= a; a--)
                    if ((r = i[a].initSegment)) {
                      n = r;
                      break;
                    }
                  t.fragmentHint && delete t.fragmentHint.endPTS;
                  var s,
                    l = 0;
                  if (
                    (c(t, e, function (t, r) {
                      t.relurl && (l = t.cc - r.cc),
                        Object(p.isFiniteNumber)(t.startPTS) &&
                          Object(p.isFiniteNumber)(t.endPTS) &&
                          ((r.start = r.startPTS = t.startPTS),
                          (r.startDTS = t.startDTS),
                          (r.appendedPTS = t.appendedPTS),
                          (r.maxStartPTS = t.maxStartPTS),
                          (r.endPTS = t.endPTS),
                          (r.endDTS = t.endDTS),
                          (r.minEndPTS = t.minEndPTS),
                          (r.duration = t.endPTS - t.startPTS),
                          r.duration && (s = r),
                          (e.PTSKnown = e.alignedSliding = !0)),
                        (r.elementaryStreams = t.elementaryStreams),
                        (r.loader = t.loader),
                        (r.stats = t.stats),
                        (r.urlId = t.urlId),
                        t.initSegment && ((r.initSegment = t.initSegment), (n = t.initSegment));
                    }),
                    n &&
                      (e.fragmentHint ? e.fragments.concat(e.fragmentHint) : e.fragments).forEach(
                        function (t) {
                          var e;
                          (t.initSegment &&
                            t.initSegment.relurl !==
                              (null === (e = n) || void 0 === e ? void 0 : e.relurl)) ||
                            (t.initSegment = n);
                        }
                      ),
                    e.skippedSegments &&
                      ((e.deltaUpdateFailed = e.fragments.some(function (t) {
                        return !t;
                      })),
                      e.deltaUpdateFailed))
                  ) {
                    m.logger.warn(
                      '[level-helper] Previous playlist missing segments skipped in delta playlist'
                    );
                    for (var f = e.skippedSegments; f--; ) e.fragments.shift();
                    (e.startSN = e.fragments[0].sn), (e.startCC = e.fragments[0].cc);
                  }
                  var h = e.fragments;
                  if (l) {
                    m.logger.warn('discontinuity sliding from playlist, take drift into account');
                    for (var v = 0; v < h.length; v++) h[v].cc += l;
                  }
                  e.skippedSegments && (e.startCC = e.fragments[0].cc),
                    u(t.partList, e.partList, function (t, e) {
                      (e.elementaryStreams = t.elementaryStreams), (e.stats = t.stats);
                    }),
                    s ? o(e, s, s.startPTS, s.endPTS, s.startDTS, s.endDTS) : d(t, e),
                    h.length && (e.totalduration = e.edge - h[0].start),
                    (e.driftStartTime = t.driftStartTime),
                    (e.driftStart = t.driftStart);
                  var g = e.advancedDateTime;
                  if (e.advanced && g) {
                    var y = e.edge;
                    e.driftStart || ((e.driftStartTime = g), (e.driftStart = y)),
                      (e.driftEndTime = g),
                      (e.driftEnd = y);
                  } else
                    (e.driftEndTime = t.driftEndTime),
                      (e.driftEnd = t.driftEnd),
                      (e.advancedDateTime = t.advancedDateTime);
                }
                function u(t, e, r) {
                  if (t && e)
                    for (var n = 0, i = 0, a = t.length; i <= a; i++) {
                      var s = t[i],
                        o = e[i + n];
                      s && o && s.index === o.index && s.fragment.sn === o.fragment.sn
                        ? r(s, o)
                        : n--;
                    }
                }
                function c(t, e, r) {
                  for (
                    var n = e.skippedSegments,
                      i = Math.max(t.startSN, e.startSN) - e.startSN,
                      a =
                        (t.fragmentHint ? 1 : 0) +
                        (n ? e.endSN : Math.min(t.endSN, e.endSN)) -
                        e.startSN,
                      s = e.startSN - t.startSN,
                      o = e.fragmentHint ? e.fragments.concat(e.fragmentHint) : e.fragments,
                      l = t.fragmentHint ? t.fragments.concat(t.fragmentHint) : t.fragments,
                      u = i;
                    u <= a;
                    u++
                  ) {
                    var c = l[s + u],
                      d = o[u];
                    n && !d && u < n && (d = e.fragments[u] = c), c && d && r(c, d);
                  }
                }
                function d(t, e) {
                  var r = e.startSN + e.skippedSegments - t.startSN,
                    n = t.fragments;
                  0 > r || r >= n.length || f(e, n[r].start);
                }
                function f(t, e) {
                  if (e) {
                    for (var r = t.fragments, n = t.skippedSegments; n < r.length; n++)
                      r[n].start += e;
                    t.fragmentHint && (t.fragmentHint.start += e);
                  }
                }
                function h(t, e) {
                  var r,
                    n = 1e3 * t.levelTargetDuration,
                    i = n / 2,
                    a = t.age,
                    s = 0 < a && a < 3 * n,
                    o = e.loading.end - e.loading.start,
                    l = t.availabilityDelay;
                  if (!1 !== t.updated)
                    s
                      ? ((l = Math.min(l || n / 2, a)), (t.availabilityDelay = l), (r = l + n - a))
                      : (r = n - o);
                  else if (s) {
                    var u = 333 * t.misses;
                    (r = Math.max(Math.min(i, 2 * o), u)),
                      (t.availabilityDelay = (t.availabilityDelay || 0) + r);
                  } else r = i;
                  return Math.round(r);
                }
                function v(t, e, r) {
                  if (!t || !t.details) return null;
                  var n = t.details,
                    i = n.fragments[e - n.startSN];
                  return (
                    i ||
                    ((i = n.fragmentHint) && i.sn === e
                      ? i
                      : e < n.startSN && r && r.sn === e
                      ? r
                      : null)
                  );
                }
                function g(t, e, r) {
                  if (!t || !t.details) return null;
                  var n = t.details.partList;
                  if (n)
                    for (var i, a = n.length; a--; )
                      if ((i = n[a]).index === r && i.fragment.sn === e) return i;
                  return null;
                }
                r.r(e),
                  r.d(e, 'addGroupId', function () {
                    return n;
                  }),
                  r.d(e, 'assignTrackIdsByGroup', function () {
                    return i;
                  }),
                  r.d(e, 'updatePTS', function () {
                    return a;
                  }),
                  r.d(e, 'updateFragPTSDTS', function () {
                    return o;
                  }),
                  r.d(e, 'mergeDetails', function () {
                    return l;
                  }),
                  r.d(e, 'mapPartIntersection', function () {
                    return u;
                  }),
                  r.d(e, 'mapFragmentIntersection', function () {
                    return c;
                  }),
                  r.d(e, 'adjustSliding', function () {
                    return d;
                  }),
                  r.d(e, 'addSliding', function () {
                    return f;
                  }),
                  r.d(e, 'computeReloadInterval', function () {
                    return h;
                  }),
                  r.d(e, 'getFragmentWithSN', function () {
                    return v;
                  }),
                  r.d(e, 'getPartWith', function () {
                    return g;
                  });
                var p = r('./src/polyfills/number.ts'),
                  m = r('./src/utils/logger.ts');
              },
              './src/controller/stream-controller.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                function i(t, e) {
                  return (i =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return y;
                  });
                var a = r('./src/polyfills/number.ts'),
                  s = r('./src/controller/base-stream-controller.ts'),
                  o = r('./src/is-supported.ts'),
                  l = r('./src/events.ts'),
                  u = r('./src/utils/buffer-helper.ts'),
                  c = r('./src/controller/fragment-tracker.ts'),
                  d = r('./src/types/loader.ts'),
                  f = r('./src/loader/fragment.ts'),
                  h = r('./src/demux/transmuxer-interface.ts'),
                  v = r('./src/types/transmuxer.ts'),
                  g = r('./src/controller/gap-controller.ts'),
                  p = r('./src/errors.ts'),
                  m = r('./src/utils/logger.ts'),
                  y = (function (t) {
                    function e(e, r) {
                      var n;
                      return (
                        ((n = t.call(this, e, r, '[stream-controller]') || this).audioCodecSwap =
                          !1),
                        (n.gapController = null),
                        (n.level = -1),
                        (n._forceStartLoad = !1),
                        (n.altAudio = !1),
                        (n.audioOnly = !1),
                        (n.fragPlaying = null),
                        (n.onvplaying = null),
                        (n.onvseeked = null),
                        (n.fragLastKbps = 0),
                        (n.stalled = !1),
                        (n.couldBacktrack = !1),
                        (n.audioCodecSwitch = !1),
                        (n.videoBuffer = null),
                        n._registerListeners(),
                        n
                      );
                    }
                    var r, y;
                    (y = t),
                      ((r = e).prototype = Object.create(y.prototype)),
                      (r.prototype.constructor = r),
                      i(r, y);
                    var b,
                      E,
                      T,
                      A = e.prototype;
                    return (
                      (A._registerListeners = function () {
                        var t = this.hls;
                        t.on(l.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          t.on(l.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          t.on(l.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          t.on(l.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                          t.on(l.Events.LEVEL_LOADING, this.onLevelLoading, this),
                          t.on(l.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                          t.on(
                            l.Events.FRAG_LOAD_EMERGENCY_ABORTED,
                            this.onFragLoadEmergencyAborted,
                            this
                          ),
                          t.on(l.Events.ERROR, this.onError, this),
                          t.on(l.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this),
                          t.on(l.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this),
                          t.on(l.Events.BUFFER_CREATED, this.onBufferCreated, this),
                          t.on(l.Events.BUFFER_FLUSHED, this.onBufferFlushed, this),
                          t.on(l.Events.LEVELS_UPDATED, this.onLevelsUpdated, this),
                          t.on(l.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                      }),
                      (A._unregisterListeners = function () {
                        var t = this.hls;
                        t.off(l.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                          t.off(l.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                          t.off(l.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          t.off(l.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                          t.off(l.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                          t.off(
                            l.Events.FRAG_LOAD_EMERGENCY_ABORTED,
                            this.onFragLoadEmergencyAborted,
                            this
                          ),
                          t.off(l.Events.ERROR, this.onError, this),
                          t.off(l.Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this),
                          t.off(l.Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this),
                          t.off(l.Events.BUFFER_CREATED, this.onBufferCreated, this),
                          t.off(l.Events.BUFFER_FLUSHED, this.onBufferFlushed, this),
                          t.off(l.Events.LEVELS_UPDATED, this.onLevelsUpdated, this),
                          t.off(l.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                      }),
                      (A.onHandlerDestroying = function () {
                        this._unregisterListeners(), this.onMediaDetaching();
                      }),
                      (A.startLoad = function (t) {
                        if (this.levels) {
                          var e = this.lastCurrentTime,
                            r = this.hls;
                          if (
                            (this.stopLoad(),
                            this.setInterval(100),
                            (this.level = -1),
                            (this.fragLoadError = 0),
                            !this.startFragRequested)
                          ) {
                            var n = r.startLevel;
                            -1 === n &&
                              (r.config.testBandwidth
                                ? ((n = 0), (this.bitrateTest = !0))
                                : (n = r.nextAutoLevel)),
                              (this.level = r.nextLoadLevel = n),
                              (this.loadedmetadata = !1);
                          }
                          0 < e &&
                            -1 === t &&
                            (this.log(
                              'Override startPosition with lastCurrentTime @' + e.toFixed(3)
                            ),
                            (t = e)),
                            (this.state = s.State.IDLE),
                            (this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t),
                            this.tick();
                        } else (this._forceStartLoad = !0), (this.state = s.State.STOPPED);
                      }),
                      (A.stopLoad = function () {
                        (this._forceStartLoad = !1), t.prototype.stopLoad.call(this);
                      }),
                      (A.doTick = function () {
                        switch (this.state) {
                          case s.State.IDLE:
                            this.doTickIdle();
                            break;
                          case s.State.WAITING_LEVEL:
                            var t,
                              e = this.levels,
                              r = this.level,
                              n =
                                null == e || null === (t = e[r]) || void 0 === t
                                  ? void 0
                                  : t.details;
                            if (n && (!n.live || this.levelLastLoaded === this.level)) {
                              if (this.waitForCdnTuneIn(n)) break;
                              this.state = s.State.IDLE;
                              break;
                            }
                            break;
                          case s.State.FRAG_LOADING_WAITING_RETRY:
                            var i,
                              a = self.performance.now(),
                              o = this.retryDate;
                            (!o ||
                              a >= o ||
                              (null !== (i = this.media) && void 0 !== i && i.seeking)) &&
                              (this.log('retryDate reached, switch back to IDLE state'),
                              (this.state = s.State.IDLE));
                        }
                        this.onTickEnd();
                      }),
                      (A.onTickEnd = function () {
                        t.prototype.onTickEnd.call(this),
                          this.checkBuffer(),
                          this.checkFragmentChanged();
                      }),
                      (A.doTickIdle = function () {
                        var t,
                          e,
                          r = this.hls,
                          n = this.levelLastLoaded,
                          i = this.levels,
                          a = this.media,
                          o = r.config,
                          u = r.nextLoadLevel;
                        if (
                          null !== n &&
                          (a || (!this.startFragRequested && o.startFragPrefetch)) &&
                          (!this.altAudio || !this.audioOnly) &&
                          i &&
                          i[u]
                        ) {
                          var h = i[u];
                          this.level = r.nextLoadLevel = u;
                          var v = h.details;
                          if (
                            !v ||
                            this.state === s.State.WAITING_LEVEL ||
                            (v.live && this.levelLastLoaded !== u)
                          )
                            return void (this.state = s.State.WAITING_LEVEL);
                          var g = this.getFwdBufferInfo(
                            this.mediaBuffer ? this.mediaBuffer : a,
                            d.PlaylistLevelType.MAIN
                          );
                          if (null !== g && !(g.len >= this.getMaxBufferLength(h.maxBitrate))) {
                            if (this._streamEnded(g, v)) {
                              var p = {};
                              return (
                                this.altAudio && (p.type = 'video'),
                                this.hls.trigger(l.Events.BUFFER_EOS, p),
                                void (this.state = s.State.ENDED)
                              );
                            }
                            var m = g.end,
                              y = this.getNextFragment(m, v);
                            if (
                              this.couldBacktrack &&
                              !this.fragPrevious &&
                              y &&
                              'initSegment' !== y.sn
                            ) {
                              var b = y.sn - v.startSN;
                              1 < b &&
                                ((y = v.fragments[b - 1]), this.fragmentTracker.removeFragment(y));
                            }
                            if (
                              y &&
                              this.fragmentTracker.getState(y) === c.FragmentState.OK &&
                              this.nextLoadPosition > m
                            ) {
                              var E =
                                this.audioOnly && !this.altAudio
                                  ? f.ElementaryStreamTypes.AUDIO
                                  : f.ElementaryStreamTypes.VIDEO;
                              this.afterBufferFlushed(a, E, d.PlaylistLevelType.MAIN),
                                (y = this.getNextFragment(this.nextLoadPosition, v));
                            }
                            y &&
                              (y.initSegment &&
                                !y.initSegment.data &&
                                !this.bitrateTest &&
                                (y = y.initSegment),
                              'identity' !==
                                (null === (t = y.decryptdata) || void 0 === t
                                  ? void 0
                                  : t.keyFormat) ||
                              (null !== (e = y.decryptdata) && void 0 !== e && e.key)
                                ? this.loadFragment(y, v, m)
                                : this.loadKey(y, v));
                          }
                        }
                      }),
                      (A.loadFragment = function (e, r, n) {
                        var i,
                          a = this.fragmentTracker.getState(e);
                        if (((this.fragCurrent = e), a === c.FragmentState.BACKTRACKED)) {
                          var s = this.fragmentTracker.getBacktrackData(e);
                          if (s)
                            return (
                              this._handleFragmentLoadProgress(s),
                              void this._handleFragmentLoadComplete(s)
                            );
                          a = c.FragmentState.NOT_LOADED;
                        }
                        a === c.FragmentState.NOT_LOADED || a === c.FragmentState.PARTIAL
                          ? 'initSegment' === e.sn
                            ? this._loadInitSegment(e)
                            : this.bitrateTest
                            ? ((e.bitrateTest = !0),
                              this.log(
                                'Fragment ' +
                                  e.sn +
                                  ' of level ' +
                                  e.level +
                                  ' is being downloaded to test bitrate and will not be buffered'
                              ),
                              this._loadBitrateTestFrag(e))
                            : ((this.startFragRequested = !0),
                              t.prototype.loadFragment.call(this, e, r, n))
                          : a === c.FragmentState.APPENDING
                          ? this.reduceMaxBufferLength(e.duration) &&
                            this.fragmentTracker.removeFragment(e)
                          : 0 ===
                              (null === (i = this.media) || void 0 === i
                                ? void 0
                                : i.buffered.length) && this.fragmentTracker.removeAllFragments();
                      }),
                      (A.getAppendedFrag = function (t) {
                        var e = this.fragmentTracker.getAppendedFrag(t, d.PlaylistLevelType.MAIN);
                        return e && 'fragment' in e ? e.fragment : e;
                      }),
                      (A.getBufferedFrag = function (t) {
                        return this.fragmentTracker.getBufferedFrag(t, d.PlaylistLevelType.MAIN);
                      }),
                      (A.followingBufferedFrag = function (t) {
                        return t ? this.getBufferedFrag(t.end + 0.5) : null;
                      }),
                      (A.immediateLevelSwitch = function () {
                        this.abortCurrentFrag(), this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                      }),
                      (A.nextLevelSwitch = function () {
                        var t = this.levels,
                          e = this.media;
                        if (null != e && e.readyState) {
                          var r,
                            n = this.getAppendedFrag(e.currentTime);
                          if (
                            (n && 1 < n.start && this.flushMainBuffer(0, n.start - 1),
                            !e.paused && t)
                          ) {
                            var i = t[this.hls.nextLoadLevel],
                              a = this.fragLastKbps;
                            r =
                              a && this.fragCurrent
                                ? (this.fragCurrent.duration * i.maxBitrate) / (1e3 * a) + 1
                                : 0;
                          } else r = 0;
                          var s = this.getBufferedFrag(e.currentTime + r);
                          if (s) {
                            var o = this.followingBufferedFrag(s);
                            if (o) {
                              this.abortCurrentFrag();
                              var l = o.maxStartPTS ? o.maxStartPTS : o.start,
                                u = o.duration,
                                c = Math.max(
                                  s.end,
                                  l +
                                    Math.min(
                                      Math.max(u - this.config.maxFragLookUpTolerance, 0.5 * u),
                                      0.75 * u
                                    )
                                );
                              this.flushMainBuffer(c, Number.POSITIVE_INFINITY);
                            }
                          }
                        }
                      }),
                      (A.abortCurrentFrag = function () {
                        var t = this.fragCurrent;
                        (this.fragCurrent = null),
                          null != t && t.loader && t.loader.abort(),
                          this.state === s.State.KEY_LOADING && (this.state = s.State.IDLE),
                          (this.nextLoadPosition = this.getLoadPosition());
                      }),
                      (A.flushMainBuffer = function (e, r) {
                        t.prototype.flushMainBuffer.call(
                          this,
                          e,
                          r,
                          this.altAudio ? 'video' : null
                        );
                      }),
                      (A.onMediaAttached = function (e, r) {
                        t.prototype.onMediaAttached.call(this, e, r);
                        var n = r.media;
                        (this.onvplaying = this.onMediaPlaying.bind(this)),
                          (this.onvseeked = this.onMediaSeeked.bind(this)),
                          n.addEventListener('playing', this.onvplaying),
                          n.addEventListener('seeked', this.onvseeked),
                          (this.gapController = new g.default(
                            this.config,
                            n,
                            this.fragmentTracker,
                            this.hls
                          ));
                      }),
                      (A.onMediaDetaching = function () {
                        var e = this.media;
                        e &&
                          (e.removeEventListener('playing', this.onvplaying),
                          e.removeEventListener('seeked', this.onvseeked),
                          (this.onvplaying = this.onvseeked = null),
                          (this.videoBuffer = null)),
                          (this.fragPlaying = null),
                          this.gapController &&
                            (this.gapController.destroy(), (this.gapController = null)),
                          t.prototype.onMediaDetaching.call(this);
                      }),
                      (A.onMediaPlaying = function () {
                        this.tick();
                      }),
                      (A.onMediaSeeked = function () {
                        var t = this.media,
                          e = t ? t.currentTime : null;
                        Object(a.isFiniteNumber)(e) && this.log('Media seeked to ' + e.toFixed(3)),
                          this.tick();
                      }),
                      (A.onManifestLoading = function () {
                        this.log('Trigger BUFFER_RESET'),
                          this.hls.trigger(l.Events.BUFFER_RESET, void 0),
                          this.fragmentTracker.removeAllFragments(),
                          (this.couldBacktrack = this.stalled = !1),
                          (this.startPosition = this.lastCurrentTime = 0),
                          (this.fragPlaying = null);
                      }),
                      (A.onManifestParsed = function (t, e) {
                        var r,
                          n = !1,
                          i = !1;
                        e.levels.forEach(function (t) {
                          (r = t.audioCodec) &&
                            (-1 !== r.indexOf('mp4a.40.2') && (n = !0),
                            -1 !== r.indexOf('mp4a.40.5') && (i = !0));
                        }),
                          (this.audioCodecSwitch = n && i && !Object(o.changeTypeSupported)()),
                          this.audioCodecSwitch &&
                            this.log(
                              'Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC'
                            ),
                          (this.levels = e.levels),
                          (this.startFragRequested = !1);
                      }),
                      (A.onLevelLoading = function (t, e) {
                        var r = this.levels;
                        if (r && this.state === s.State.IDLE) {
                          var n = r[e.level];
                          (!n.details ||
                            (n.details.live && this.levelLastLoaded !== e.level) ||
                            this.waitForCdnTuneIn(n.details)) &&
                            (this.state = s.State.WAITING_LEVEL);
                        }
                      }),
                      (A.onLevelLoaded = function (t, e) {
                        var r,
                          n = this.levels,
                          i = e.level,
                          a = e.details,
                          o = a.totalduration;
                        if (n) {
                          this.log(
                            'Level ' +
                              i +
                              ' loaded [' +
                              a.startSN +
                              ',' +
                              a.endSN +
                              '], cc [' +
                              a.startCC +
                              ', ' +
                              a.endCC +
                              '] duration:' +
                              o
                          );
                          var u = this.fragCurrent;
                          u &&
                            (this.state === s.State.FRAG_LOADING ||
                              this.state === s.State.FRAG_LOADING_WAITING_RETRY) &&
                            u.level !== e.level &&
                            u.loader &&
                            ((this.state = s.State.IDLE), u.loader.abort());
                          var c = n[i],
                            d = 0;
                          if (a.live || (null !== (r = c.details) && void 0 !== r && r.live)) {
                            if ((a.fragments[0] || (a.deltaUpdateFailed = !0), a.deltaUpdateFailed))
                              return;
                            d = this.alignPlaylists(a, c.details);
                          }
                          if (
                            ((c.details = a),
                            (this.levelLastLoaded = i),
                            this.hls.trigger(l.Events.LEVEL_UPDATED, { details: a, level: i }),
                            this.state === s.State.WAITING_LEVEL)
                          ) {
                            if (this.waitForCdnTuneIn(a)) return;
                            this.state = s.State.IDLE;
                          }
                          this.startFragRequested
                            ? a.live && this.synchronizeToLiveEdge(a)
                            : this.setStartPosition(a, d),
                            this.tick();
                        } else console.warn('Levels were reset while loading level ' + i);
                      }),
                      (A._handleFragmentLoadProgress = function (t) {
                        var e,
                          r = t.frag,
                          n = t.part,
                          i = t.payload,
                          a = this.levels;
                        if (a) {
                          var s = a[r.level],
                            o = s.details;
                          if (o) {
                            var l = s.videoCodec,
                              u = o.PTSKnown || !o.live,
                              c = null === (e = r.initSegment) || void 0 === e ? void 0 : e.data,
                              f = this._getAudioCodec(s),
                              g = (this.transmuxer =
                                this.transmuxer ||
                                new h.default(
                                  this.hls,
                                  d.PlaylistLevelType.MAIN,
                                  this._handleTransmuxComplete.bind(this),
                                  this._handleTransmuxerFlush.bind(this)
                                )),
                              p = n ? n.index : -1,
                              m = -1 !== p,
                              y = new v.ChunkMetadata(
                                r.level,
                                r.sn,
                                r.stats.chunkCount,
                                i.byteLength,
                                p,
                                m
                              ),
                              b = this.initPTS[r.cc];
                            g.push(i, c, f, l, r, n, o.totalduration, u, y, b);
                          } else
                            console.warn(
                              'Dropping fragment ' +
                                r.sn +
                                ' of level ' +
                                r.level +
                                ' after level details were reset'
                            );
                        } else
                          console.warn(
                            'Levels were reset while fragment load was in progress. Fragment ' +
                              r.sn +
                              ' of level ' +
                              r.level +
                              ' will not be buffered'
                          );
                      }),
                      (A.onAudioTrackSwitching = function (t, e) {
                        console.log('onAudioTrackSwitching');
                        var r = this.altAudio;
                        var n = !!e.url;
                        var i = e.id;
                        if (!n) {
                          if (this.mediaBuffer !== this.media) {
                            this.log(
                              'Switching on main audio, use media.buffered to schedule main fragment loading'
                            );
                            this.mediaBuffer = this.media;
                            var a = this.fragCurrent;
                            null != a &&
                              a.loader &&
                              (this.log('Switching to main audio track, cancel main fragment load'),
                              a.loader.abort()),
                              this.resetTransmuxer(),
                              this.resetLoadingState();
                          } else {
                            this.audioOnly && this.resetTransmuxer();
                          }
                          var s = this.hls;
                          r &&
                            s.trigger(l.Events.BUFFER_FLUSHING, {
                              startOffset: 0,
                              endOffset: Number.POSITIVE_INFINITY,
                              type: 'audio',
                            }),
                            s.trigger(l.Events.AUDIO_TRACK_SWITCHED, { id: i });
                        }
                      }),
                      (A.onAudioTrackSwitched = function (t, e) {
                        console.log('onAudioTrackSwitched');
                        var r = e.id;
                        var n = !!this.hls.audioTracks[r].url;
                        if (n) {
                          var i = this.videoBuffer;
                          if (i && this.mediaBuffer !== i) {
                            this.log(
                              'Switching on alternate audio, use video.buffered to schedule main fragment loading'
                            );
                            this.mediaBuffer = i;
                          }
                        }
                        this.altAudio = n;
                        this.tick();
                      }),
                      (A.onBufferCreated = function (t, e) {
                        var r,
                          n,
                          i = e.tracks,
                          a = !1;
                        for (var s in i) {
                          var o = i[s];
                          if ('main' !== o.id) a = !0;
                          else if (((n = s), (r = o), 'video' === s)) {
                            var l = i[s];
                            l && (this.videoBuffer = l.buffer);
                          }
                        }
                        a && r
                          ? (this.log(
                              'Alternate track found, use ' +
                                n +
                                '.buffered to schedule main fragment loading'
                            ),
                            (this.mediaBuffer = r.buffer))
                          : (this.mediaBuffer = this.media);
                      }),
                      (A.onFragBuffered = function (t, e) {
                        var r = e.frag,
                          n = e.part;
                        if (!r || r.type === d.PlaylistLevelType.MAIN) {
                          if (this.fragContextChanged(r))
                            return (
                              console.warn(
                                'Fragment ' +
                                  r.sn +
                                  (n ? ' p: ' + n.index : '') +
                                  ' of level ' +
                                  r.level +
                                  ' finished buffering, but was aborted. state: ' +
                                  this.state
                              ),
                              void (this.state === s.State.PARSED && (this.state = s.State.IDLE))
                            );
                          var i = n ? n.stats : r.stats;
                          (this.fragLastKbps = Math.round(
                            (8 * i.total) / (i.buffering.end - i.loading.first)
                          )),
                            'initSegment' !== r.sn && (this.fragPrevious = r),
                            this.fragBufferedComplete(r, n);
                        }
                      }),
                      (A.onError = function (t, e) {
                        switch (e.details) {
                          case p.ErrorDetails.FRAG_LOAD_ERROR:
                          case p.ErrorDetails.FRAG_LOAD_TIMEOUT:
                          case p.ErrorDetails.KEY_LOAD_ERROR:
                          case p.ErrorDetails.KEY_LOAD_TIMEOUT:
                            this.onFragmentOrKeyLoadError(d.PlaylistLevelType.MAIN, e);
                            break;
                          case p.ErrorDetails.LEVEL_LOAD_ERROR:
                          case p.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                            this.state !== s.State.ERROR &&
                              (e.fatal
                                ? (console.warn('' + e.details), (this.state = s.State.ERROR))
                                : !e.levelRetry &&
                                  this.state === s.State.WAITING_LEVEL &&
                                  (this.state = s.State.IDLE));
                            break;
                          case p.ErrorDetails.BUFFER_FULL_ERROR:
                            if (
                              'main' === e.parent &&
                              (this.state === s.State.PARSING || this.state === s.State.PARSED)
                            ) {
                              var r = !0,
                                n = this.getFwdBufferInfo(this.media, d.PlaylistLevelType.MAIN);
                              n && 0.5 < n.len && (r = !this.reduceMaxBufferLength(n.len)),
                                r &&
                                  (console.warn(
                                    'buffer full error also media.currentTime is not buffered, flush main'
                                  ),
                                  this.immediateLevelSwitch()),
                                this.resetLoadingState();
                            }
                        }
                      }),
                      (A.checkBuffer = function () {
                        var t = this.media;
                        var e = this.gapController;

                        var readyState = t.readyState;

                        if (t && e && readyState) {
                          var r = u.BufferHelper.getBuffered(t);

                          var bufferedLength = r.length;

                          if (!this.loadedmetadata && bufferedLength) {
                            this.loadedmetadata = !0;
                            this.seekToStartPos();
                          } else {
                            e.poll(this.lastCurrentTime);
                            this.lastCurrentTime = t.currentTime;
                          }
                        }
                      }),
                      (A.onFragLoadEmergencyAborted = function () {
                        (this.state = s.State.IDLE),
                          this.loadedmetadata ||
                            ((this.startFragRequested = !1),
                            (this.nextLoadPosition = this.startPosition)),
                          this.tickImmediate();
                      }),
                      (A.onBufferFlushed = function (t, e) {
                        var r = e.type;
                        if (
                          r !== f.ElementaryStreamTypes.AUDIO ||
                          (this.audioOnly && !this.altAudio)
                        ) {
                          var n =
                            (r === f.ElementaryStreamTypes.VIDEO
                              ? this.videoBuffer
                              : this.mediaBuffer) || this.media;
                          this.afterBufferFlushed(n, r, d.PlaylistLevelType.MAIN);
                        }
                      }),
                      (A.onLevelsUpdated = function (t, e) {
                        this.levels = e.levels;
                      }),
                      (A.swapAudioCodec = function () {
                        this.audioCodecSwap = !this.audioCodecSwap;
                      }),
                      (A.seekToStartPos = function () {
                        var t = this.media,
                          e = t.currentTime,
                          r = this.startPosition;
                        if (0 <= r && e < r) {
                          if (t.seeking)
                            return void m.logger.log(
                              'could not seek to ' + r + ', already seeking at ' + e
                            );
                          var n = u.BufferHelper.getBuffered(t),
                            i = (n.length ? n.start(0) : 0) - r;
                          0 < i &&
                            (i < this.config.maxBufferHole ||
                              i < this.config.maxFragLookUpTolerance) &&
                            (m.logger.log(
                              'adjusting start position by ' + i + ' to match buffer start'
                            ),
                            (r += i),
                            (this.startPosition = r)),
                            this.log(
                              'seek to target start position ' + r + ' from current time ' + e
                            ),
                            (t.currentTime = r);
                        }
                      }),
                      (A._getAudioCodec = function (t) {
                        var e = this.config.defaultAudioCodec || t.audioCodec;
                        return (
                          this.audioCodecSwap &&
                            e &&
                            (this.log('Swapping audio codec'),
                            (e = -1 === e.indexOf('mp4a.40.5') ? 'mp4a.40.5' : 'mp4a.40.2')),
                          e
                        );
                      }),
                      (A._loadBitrateTestFrag = function (t) {
                        var e = this;
                        this._doFragLoad(t).then(function (r) {
                          var n = e.hls;
                          if (r && !n.nextLoadLevel && !e.fragContextChanged(t)) {
                            (e.fragLoadError = 0),
                              (e.state = s.State.IDLE),
                              (e.startFragRequested = !1),
                              (e.bitrateTest = !1);
                            var i = t.stats;
                            (i.parsing.start =
                              i.parsing.end =
                              i.buffering.start =
                              i.buffering.end =
                                self.performance.now()),
                              n.trigger(l.Events.FRAG_LOADED, r);
                          }
                        });
                      }),
                      (A._handleTransmuxComplete = function (t) {
                        var e,
                          r = this.hls,
                          n = t.remuxResult,
                          i = t.chunkMeta,
                          o = this.getCurrentContext(i);
                        if (!o)
                          return (
                            console.warn(
                              'The loading context changed while buffering fragment ' +
                                i.sn +
                                ' of level ' +
                                i.level +
                                '. This chunk will not be buffered.'
                            ),
                            void this.resetLiveStartWhenNotLoaded(i.level)
                          );
                        var u = o.frag,
                          c = o.part,
                          d = o.level,
                          h = n.video,
                          v = n.text,
                          g = n.id3,
                          p = n.initSegment,
                          m = this.altAudio ? void 0 : n.audio;
                        if (!this.fragContextChanged(u)) {
                          if (((this.state = s.State.PARSING), p)) {
                            p.tracks &&
                              (this._bufferInitSegment(d, p.tracks, u, i),
                              r.trigger(l.Events.FRAG_PARSING_INIT_SEGMENT, {
                                frag: u,
                                id: 'main',
                                tracks: p.tracks,
                              }));
                            var y = p.initPTS,
                              b = p.timescale;
                            Object(a.isFiniteNumber)(y) &&
                              ((this.initPTS[u.cc] = y),
                              r.trigger(l.Events.INIT_PTS_FOUND, {
                                frag: u,
                                id: 'main',
                                initPTS: y,
                                timescale: b,
                              }));
                          }
                          if (h && !1 !== n.independent) {
                            if (d.details) {
                              var E = h.startPTS,
                                T = h.endPTS,
                                A = h.startDTS,
                                S = h.endDTS;
                              if (c)
                                c.elementaryStreams[h.type] = {
                                  startPTS: E,
                                  endPTS: T,
                                  startDTS: A,
                                  endDTS: S,
                                };
                              else if (
                                (h.firstKeyFrame && h.independent && (this.couldBacktrack = !0),
                                h.dropped && h.independent)
                              ) {
                                if (this.getLoadPosition() + this.config.maxBufferHole < E)
                                  return void this.backtrack(u);
                                u.setElementaryStreamInfo(h.type, u.start, T, u.start, S, !0);
                              }
                              u.setElementaryStreamInfo(h.type, E, T, A, S),
                                this.bufferFragmentData(h, u, c, i);
                            }
                          } else if (!1 === n.independent) return void this.backtrack(u);
                          if (m) {
                            var L = m.startPTS,
                              _ = m.endPTS,
                              k = m.startDTS,
                              D = m.endDTS;
                            c &&
                              (c.elementaryStreams[f.ElementaryStreamTypes.AUDIO] = {
                                startPTS: L,
                                endPTS: _,
                                startDTS: k,
                                endDTS: D,
                              }),
                              u.setElementaryStreamInfo(f.ElementaryStreamTypes.AUDIO, L, _, k, D),
                              this.bufferFragmentData(m, u, c, i);
                          }
                          if (null != g && null !== (e = g.samples) && void 0 !== e && e.length) {
                            var w = { frag: u, id: 'main', samples: g.samples };
                            r.trigger(l.Events.FRAG_PARSING_METADATA, w);
                          }
                          if (v) {
                            var R = { frag: u, id: 'main', samples: v.samples };
                            r.trigger(l.Events.FRAG_PARSING_USERDATA, R);
                          }
                        }
                      }),
                      (A._bufferInitSegment = function (t, e, r, n) {
                        var i = this;
                        if (this.state === s.State.PARSING) {
                          (this.audioOnly = !!e.audio && !e.video),
                            this.altAudio && !this.audioOnly && delete e.audio;
                          var a = e.audio,
                            o = e.video,
                            u = e.audiovideo;
                          if (a) {
                            var c = t.audioCodec,
                              d = navigator.userAgent.toLowerCase();
                            this.audioCodecSwitch &&
                              (c && (c = -1 === c.indexOf('mp4a.40.5') ? 'mp4a.40.5' : 'mp4a.40.2'),
                              1 !== a.metadata.channelCount &&
                                -1 === d.indexOf('firefox') &&
                                (c = 'mp4a.40.5')),
                              -1 !== d.indexOf('android') &&
                                'audio/mpeg' !== a.container &&
                                ((c = 'mp4a.40.2'), this.log('Android: force audio codec to ' + c)),
                              t.audioCodec &&
                                t.audioCodec !== c &&
                                this.log(
                                  'Swapping manifest audio codec "' +
                                    t.audioCodec +
                                    '" for "' +
                                    c +
                                    '"'
                                ),
                              (a.levelCodec = c),
                              (a.id = 'main'),
                              this.log(
                                'Init audio buffer, container:' +
                                  a.container +
                                  ', codecs[selected/level/parsed]=[' +
                                  (c || '') +
                                  '/' +
                                  (t.audioCodec || '') +
                                  '/' +
                                  a.codec +
                                  ']'
                              );
                          }
                          o &&
                            ((o.levelCodec = t.videoCodec),
                            (o.id = 'main'),
                            this.log(
                              'Init video buffer, container:' +
                                o.container +
                                ', codecs[level/parsed]=[' +
                                (t.videoCodec || '') +
                                '/' +
                                o.codec +
                                ']'
                            )),
                            u &&
                              this.log(
                                'Init audiovideo buffer, container:' +
                                  u.container +
                                  ', codecs[level/parsed]=[' +
                                  (t.attrs.CODECS || '') +
                                  '/' +
                                  u.codec +
                                  ']'
                              ),
                            this.hls.trigger(l.Events.BUFFER_CODECS, e),
                            Object.keys(e).forEach(function (t) {
                              var a = e[t].initSegment;
                              null != a &&
                                a.byteLength &&
                                i.hls.trigger(l.Events.BUFFER_APPENDING, {
                                  type: t,
                                  data: a,
                                  frag: r,
                                  part: null,
                                  chunkMeta: n,
                                  parent: r.type,
                                });
                            }),
                            this.tick();
                        }
                      }),
                      (A.backtrack = function (t) {
                        (this.couldBacktrack = !0), this.resetTransmuxer(), this.flushBufferGap(t);
                        var e = this.fragmentTracker.backtrack(t);
                        (this.fragPrevious = null),
                          (this.nextLoadPosition = t.start),
                          e ? this.resetFragmentLoading(t) : (this.state = s.State.BACKTRACKING);
                      }),
                      (A.checkFragmentChanged = function () {
                        var t = this.media,
                          e = null;
                        if (t && 1 < t.readyState && !1 === t.seeking) {
                          var r = t.currentTime;
                          if (
                            (u.BufferHelper.isBuffered(t, r)
                              ? (e = this.getAppendedFrag(r))
                              : u.BufferHelper.isBuffered(t, r + 0.1) &&
                                (e = this.getAppendedFrag(r + 0.1)),
                            e)
                          ) {
                            var n = this.fragPlaying,
                              i = e.level;
                            (n && e.sn === n.sn && n.level === i && e.urlId === n.urlId) ||
                              (this.hls.trigger(l.Events.FRAG_CHANGED, { frag: e }),
                              (!n || n.level !== i) &&
                                this.hls.trigger(l.Events.LEVEL_SWITCHED, { level: i }),
                              (this.fragPlaying = e));
                          }
                        }
                      }),
                      (b = e),
                      (E = [
                        {
                          key: 'nextLevel',
                          get: function () {
                            var t = this.nextBufferedFrag;
                            return t ? t.level : -1;
                          },
                        },
                        {
                          key: 'currentLevel',
                          get: function () {
                            var t = this.media;
                            if (t) {
                              var e = this.getAppendedFrag(t.currentTime);
                              if (e) return e.level;
                            }
                            return -1;
                          },
                        },
                        {
                          key: 'nextBufferedFrag',
                          get: function () {
                            var t = this.media;
                            if (t) {
                              var e = this.getAppendedFrag(t.currentTime);
                              return this.followingBufferedFrag(e);
                            }
                            return null;
                          },
                        },
                        {
                          key: 'forceStartLoad',
                          get: function () {
                            return this._forceStartLoad;
                          },
                        },
                      ]) && n(b.prototype, E),
                      T && n(b, T),
                      e
                    );
                  })(s.default);
              },
              './src/crypt/aes-crypto.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return n;
                  });
                var n = (function () {
                  function t(t, e) {
                    (this.subtle = void 0),
                      (this.aesIV = void 0),
                      (this.subtle = t),
                      (this.aesIV = e);
                  }
                  return (
                    (t.prototype.decrypt = function (t, e) {
                      return this.subtle.decrypt({ name: 'AES-CBC', iv: this.aesIV }, e, t);
                    }),
                    t
                  );
                })();
              },
              './src/crypt/aes-decryptor.ts': function (t, e, r) {
                'use strict';
                function n(t) {
                  var e = t.byteLength,
                    r = e && new DataView(t.buffer).getUint8(e - 1);
                  return r ? Object(i.sliceUint8)(t, 0, e - r) : t;
                }
                r.r(e),
                  r.d(e, 'removePadding', function () {
                    return n;
                  }),
                  r.d(e, 'default', function () {
                    return a;
                  });
                var i = r('./src/utils/typed-array.ts'),
                  a = (function () {
                    function t() {
                      (this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54]),
                        (this.subMix = [
                          new Uint32Array(256),
                          new Uint32Array(256),
                          new Uint32Array(256),
                          new Uint32Array(256),
                        ]),
                        (this.invSubMix = [
                          new Uint32Array(256),
                          new Uint32Array(256),
                          new Uint32Array(256),
                          new Uint32Array(256),
                        ]),
                        (this.sBox = new Uint32Array(256)),
                        (this.invSBox = new Uint32Array(256)),
                        (this.key = new Uint32Array(0)),
                        (this.ksRows = 0),
                        (this.keySize = 0),
                        (this.keySchedule = void 0),
                        (this.invKeySchedule = void 0),
                        this.initTable();
                    }
                    var e = t.prototype;
                    return (
                      (e.uint8ArrayToUint32Array_ = function (t) {
                        for (var e = new DataView(t), r = new Uint32Array(4), n = 0; 4 > n; n++)
                          r[n] = e.getUint32(4 * n);
                        return r;
                      }),
                      (e.initTable = function () {
                        var t = this.sBox,
                          e = this.invSBox,
                          r = this.subMix,
                          n = r[0],
                          i = r[1],
                          a = r[2],
                          s = r[3],
                          o = this.invSubMix,
                          l = o[0],
                          u = o[1],
                          c = o[2],
                          d = o[3],
                          f = new Uint32Array(256),
                          h = 0,
                          v = 0,
                          g = 0;
                        for (g = 0; 256 > g; g++) f[g] = 128 > g ? g << 1 : 283 ^ (g << 1);
                        for (g = 0; 256 > g; g++) {
                          var p = v ^ (v << 1) ^ (v << 2) ^ (v << 3) ^ (v << 4);
                          (p = (p >>> 8) ^ (255 & p) ^ 99), (t[h] = p), (e[p] = h);
                          var m = f[h],
                            y = f[m],
                            b = f[y],
                            E = (257 * f[p]) ^ (16843008 * p);
                          (n[h] = (E << 24) | (E >>> 8)),
                            (i[h] = (E << 16) | (E >>> 16)),
                            (a[h] = (E << 8) | (E >>> 24)),
                            (s[h] = E),
                            (E = (16843009 * b) ^ (65537 * y) ^ (257 * m) ^ (16843008 * h)),
                            (l[p] = (E << 24) | (E >>> 8)),
                            (u[p] = (E << 16) | (E >>> 16)),
                            (c[p] = (E << 8) | (E >>> 24)),
                            (d[p] = E),
                            h ? ((h = m ^ f[f[f[b ^ m]]]), (v ^= f[f[v]])) : (h = v = 1);
                        }
                      }),
                      (e.expandKey = function (t) {
                        for (
                          var e = this.uint8ArrayToUint32Array_(t), r = !0, n = 0;
                          n < e.length && r;

                        )
                          (r = e[n] === this.key[n]), n++;
                        if (!r) {
                          this.key = e;
                          var i = (this.keySize = e.length);
                          if (4 !== i && 6 !== i && 8 !== i)
                            throw new Error('Invalid aes key size=' + i);
                          var a,
                            s,
                            o,
                            l,
                            u = (this.ksRows = 4 * (i + 6 + 1)),
                            c = (this.keySchedule = new Uint32Array(u)),
                            d = (this.invKeySchedule = new Uint32Array(u)),
                            f = this.sBox,
                            h = this.rcon,
                            v = this.invSubMix,
                            g = v[0],
                            p = v[1],
                            m = v[2],
                            y = v[3];
                          for (a = 0; a < u; a++)
                            a < i
                              ? (o = c[a] = e[a])
                              : ((l = o),
                                0 == a % i
                                  ? ((l =
                                      (f[(l = (l << 8) | (l >>> 24)) >>> 24] << 24) |
                                      (f[255 & (l >>> 16)] << 16) |
                                      (f[255 & (l >>> 8)] << 8) |
                                      f[255 & l]),
                                    (l ^= h[0 | (a / i)] << 24))
                                  : 6 < i &&
                                    4 == a % i &&
                                    (l =
                                      (f[l >>> 24] << 24) |
                                      (f[255 & (l >>> 16)] << 16) |
                                      (f[255 & (l >>> 8)] << 8) |
                                      f[255 & l]),
                                (c[a] = o = (c[a - i] ^ l) >>> 0));
                          for (s = 0; s < u; s++)
                            (a = u - s),
                              (l = 3 & s ? c[a] : c[a - 4]),
                              (d[s] =
                                4 > s || 4 >= a
                                  ? l
                                  : g[f[l >>> 24]] ^
                                    p[f[255 & (l >>> 16)]] ^
                                    m[f[255 & (l >>> 8)]] ^
                                    y[f[255 & l]]),
                              (d[s] >>>= 0);
                        }
                      }),
                      (e.networkToHostOrderSwap = function (t) {
                        return (t << 24) | ((65280 & t) << 8) | ((16711680 & t) >> 8) | (t >>> 24);
                      }),
                      (e.decrypt = function (t, e, r) {
                        for (
                          var n,
                            i,
                            a,
                            s,
                            o,
                            l,
                            u,
                            c,
                            d,
                            f,
                            h,
                            v,
                            g,
                            p,
                            m = this.keySize + 6,
                            y = this.invKeySchedule,
                            b = this.invSBox,
                            E = this.invSubMix,
                            T = E[0],
                            A = E[1],
                            S = E[2],
                            L = E[3],
                            _ = this.uint8ArrayToUint32Array_(r),
                            k = _[0],
                            D = _[1],
                            w = _[2],
                            R = _[3],
                            C = new Int32Array(t),
                            x = new Int32Array(C.length),
                            I = this.networkToHostOrderSwap;
                          e < C.length;

                        ) {
                          for (
                            d = I(C[e]),
                              f = I(C[e + 1]),
                              h = I(C[e + 2]),
                              v = I(C[e + 3]),
                              o = d ^ y[0],
                              l = v ^ y[1],
                              u = h ^ y[2],
                              c = f ^ y[3],
                              g = 4,
                              p = 1;
                            p < m;
                            p++
                          )
                            (n =
                              T[o >>> 24] ^
                              A[255 & (l >> 16)] ^
                              S[255 & (u >> 8)] ^
                              L[255 & c] ^
                              y[g]),
                              (i =
                                T[l >>> 24] ^
                                A[255 & (u >> 16)] ^
                                S[255 & (c >> 8)] ^
                                L[255 & o] ^
                                y[g + 1]),
                              (a =
                                T[u >>> 24] ^
                                A[255 & (c >> 16)] ^
                                S[255 & (o >> 8)] ^
                                L[255 & l] ^
                                y[g + 2]),
                              (s =
                                T[c >>> 24] ^
                                A[255 & (o >> 16)] ^
                                S[255 & (l >> 8)] ^
                                L[255 & u] ^
                                y[g + 3]),
                              (o = n),
                              (l = i),
                              (u = a),
                              (c = s),
                              (g += 4);
                          (n =
                            (b[o >>> 24] << 24) ^
                            (b[255 & (l >> 16)] << 16) ^
                            (b[255 & (u >> 8)] << 8) ^
                            b[255 & c] ^
                            y[g]),
                            (i =
                              (b[l >>> 24] << 24) ^
                              (b[255 & (u >> 16)] << 16) ^
                              (b[255 & (c >> 8)] << 8) ^
                              b[255 & o] ^
                              y[g + 1]),
                            (a =
                              (b[u >>> 24] << 24) ^
                              (b[255 & (c >> 16)] << 16) ^
                              (b[255 & (o >> 8)] << 8) ^
                              b[255 & l] ^
                              y[g + 2]),
                            (s =
                              (b[c >>> 24] << 24) ^
                              (b[255 & (o >> 16)] << 16) ^
                              (b[255 & (l >> 8)] << 8) ^
                              b[255 & u] ^
                              y[g + 3]),
                            (x[e] = I(n ^ k)),
                            (x[e + 1] = I(s ^ D)),
                            (x[e + 2] = I(a ^ w)),
                            (x[e + 3] = I(i ^ R)),
                            (k = d),
                            (D = f),
                            (w = h),
                            (R = v),
                            (e += 4);
                        }
                        return x.buffer;
                      }),
                      t
                    );
                  })();
              },
              './src/crypt/decrypter.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return u;
                  });
                var n = r('./src/crypt/aes-crypto.ts'),
                  i = r('./src/crypt/fast-aes-key.ts'),
                  a = r('./src/crypt/aes-decryptor.ts'),
                  s = r('./src/utils/logger.ts'),
                  o = r('./src/utils/mp4-tools.ts'),
                  l = r('./src/utils/typed-array.ts'),
                  u = (function () {
                    function t(t, e, r) {
                      var n = (void 0 === r ? {} : r).removePKCS7Padding,
                        i = void 0 === n || n;
                      if (
                        ((this.logEnabled = !0),
                        (this.observer = void 0),
                        (this.config = void 0),
                        (this.removePKCS7Padding = void 0),
                        (this.subtle = null),
                        (this.softwareDecrypter = null),
                        (this.key = null),
                        (this.fastAesKey = null),
                        (this.remainderData = null),
                        (this.currentIV = null),
                        (this.currentResult = null),
                        (this.observer = t),
                        (this.config = e),
                        (this.removePKCS7Padding = i),
                        i)
                      )
                        try {
                          var a = self.crypto;
                          a && (this.subtle = a.subtle || a.webkitSubtle);
                        } catch (t) {}
                      null === this.subtle && (this.config.enableSoftwareAES = !0);
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {
                        this.observer = null;
                      }),
                      (e.isSync = function () {
                        return this.config.enableSoftwareAES;
                      }),
                      (e.flush = function () {
                        var t = this.currentResult;
                        if (t) {
                          var e = new Uint8Array(t);
                          return (
                            this.reset(), this.removePKCS7Padding ? Object(a.removePadding)(e) : e
                          );
                        }
                        this.reset();
                      }),
                      (e.reset = function () {
                        (this.currentResult = null),
                          (this.currentIV = null),
                          (this.remainderData = null),
                          this.softwareDecrypter && (this.softwareDecrypter = null);
                      }),
                      (e.decrypt = function (t, e, r, n) {
                        if (this.config.enableSoftwareAES) {
                          this.softwareDecrypt(new Uint8Array(t), e, r);
                          var i = this.flush();
                          i && n(i.buffer);
                        } else this.webCryptoDecrypt(new Uint8Array(t), e, r).then(n);
                      }),
                      (e.softwareDecrypt = function (t, e, r) {
                        var n = this.currentIV,
                          i = this.currentResult,
                          s = this.remainderData;
                        this.logOnce('JS AES decrypt'),
                          s &&
                            ((t = Object(o.appendUint8Array)(s, t)), (this.remainderData = null));
                        var u = this.getValidChunk(t);
                        if (!u.length) return null;
                        n && (r = n);
                        var c = this.softwareDecrypter;
                        c || (c = this.softwareDecrypter = new a.default()), c.expandKey(e);
                        var d = i;
                        return (
                          (this.currentResult = c.decrypt(u.buffer, 0, r)),
                          (this.currentIV = Object(l.sliceUint8)(u, -16).buffer),
                          d || null
                        );
                      }),
                      (e.webCryptoDecrypt = function (t, e, r) {
                        var a = this,
                          s = this.subtle;
                        return (
                          (this.key === e && this.fastAesKey) ||
                            ((this.key = e), (this.fastAesKey = new i.default(s, e))),
                          this.fastAesKey
                            .expandKey()
                            .then(function (e) {
                              return s
                                ? new n.default(s, r).decrypt(t.buffer, e)
                                : Promise.reject(new Error('web crypto not initialized'));
                            })
                            .catch(function (n) {
                              return a.onWebCryptoError(n, t, e, r);
                            })
                        );
                      }),
                      (e.onWebCryptoError = function (t, e, r, n) {
                        return (
                          s.logger.warn(
                            '[decrypter.ts]: WebCrypto Error, disable WebCrypto API:',
                            t
                          ),
                          (this.config.enableSoftwareAES = !0),
                          (this.logEnabled = !0),
                          this.softwareDecrypt(e, r, n)
                        );
                      }),
                      (e.getValidChunk = function (t) {
                        var e = t,
                          r = t.length - (t.length % 16);
                        return (
                          r !== t.length &&
                            ((e = Object(l.sliceUint8)(t, 0, r)),
                            (this.remainderData = Object(l.sliceUint8)(t, r))),
                          e
                        );
                      }),
                      (e.logOnce = function (t) {
                        this.logEnabled &&
                          (s.logger.log('[decrypter.ts]: ' + t), (this.logEnabled = !1));
                      }),
                      t
                    );
                  })();
              },
              './src/crypt/fast-aes-key.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return n;
                  });
                var n = (function () {
                  function t(t, e) {
                    (this.subtle = void 0), (this.key = void 0), (this.subtle = t), (this.key = e);
                  }
                  return (
                    (t.prototype.expandKey = function () {
                      return this.subtle.importKey('raw', this.key, { name: 'AES-CBC' }, !1, [
                        'encrypt',
                        'decrypt',
                      ]);
                    }),
                    t
                  );
                })();
              },
              './src/demux/aacdemuxer.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  return (n =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                r.r(e);
                var i = r('./src/demux/base-audio-demuxer.ts'),
                  a = r('./src/demux/adts.ts'),
                  s = r('./src/utils/logger.ts'),
                  o = r('./src/demux/id3.ts'),
                  l = (function (t) {
                    function e(e, r) {
                      var n;
                      return (
                        ((n = t.call(this) || this).observer = void 0),
                        (n.config = void 0),
                        (n.observer = e),
                        (n.config = r),
                        n
                      );
                    }
                    var r, i;
                    (i = t),
                      ((r = e).prototype = Object.create(i.prototype)),
                      (r.prototype.constructor = r),
                      n(r, i);
                    var l = e.prototype;
                    return (
                      (l.resetInitSegment = function (e, r, n) {
                        t.prototype.resetInitSegment.call(this, e, r, n),
                          (this._audioTrack = {
                            container: 'audio/adts',
                            type: 'audio',
                            id: 2,
                            pid: -1,
                            sequenceNumber: 0,
                            isAAC: !0,
                            samples: [],
                            manifestCodec: e,
                            duration: n,
                            inputTimeScale: 9e4,
                            dropped: 0,
                          });
                      }),
                      (e.probe = function (t) {
                        if (!t) return !1;
                        for (var e = (o.getID3Data(t, 0) || []).length, r = t.length; e < r; e++)
                          if (a.probe(t, e)) return s.logger.log('ADTS sync word found !'), !0;
                        return !1;
                      }),
                      (l.canParse = function (t, e) {
                        return a.canParse(t, e);
                      }),
                      (l.appendFrame = function (t, e, r) {
                        a.initTrackConfig(t, this.observer, e, r, t.manifestCodec);
                        var n = a.appendFrame(t, e, r, this.initPTS, this.frameIndex);
                        if (n && 0 === n.missing) return n;
                      }),
                      e
                    );
                  })(i.default);
                (l.minProbeByteLength = 9), (e.default = l);
              },
              './src/demux/adts.ts': function (t, e, r) {
                'use strict';
                function n(t, e, r, n) {
                  var i,
                    a,
                    s,
                    o,
                    l = navigator.userAgent.toLowerCase(),
                    u = n,
                    c = [
                      96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3,
                      7350,
                    ];
                  i = 1 + ((192 & e[r + 2]) >>> 6);
                  var d = (60 & e[r + 2]) >>> 2;
                  return d > c.length - 1
                    ? void t.trigger(p.Events.ERROR, {
                        type: g.ErrorTypes.MEDIA_ERROR,
                        details: g.ErrorDetails.FRAG_PARSING_ERROR,
                        fatal: !0,
                        reason: 'invalid ADTS sampling index:' + d,
                      })
                    : ((s = (1 & e[r + 2]) << 2),
                      (s |= (192 & e[r + 3]) >>> 6),
                      /firefox/i.test(l)
                        ? 6 <= d
                          ? ((i = 5), (o = [, , , ,]), (a = d - 3))
                          : ((i = 2), (o = [, ,]), (a = d))
                        : -1 === l.indexOf('android')
                        ? ((i = 5),
                          (o = [, , , ,]),
                          (n &&
                            (-1 !== n.indexOf('mp4a.40.29') || -1 !== n.indexOf('mp4a.40.5'))) ||
                          (!n && 6 <= d)
                            ? (a = d - 3)
                            : (((n &&
                                -1 !== n.indexOf('mp4a.40.2') &&
                                ((6 <= d && 1 === s) || /vivaldi/i.test(l))) ||
                                (!n && 1 === s)) &&
                                ((i = 2), (o = [, ,])),
                              (a = d)))
                        : ((i = 2), (o = [, ,]), (a = d)),
                      (o[0] = i << 3),
                      (o[0] |= (14 & d) >> 1),
                      (o[1] |= (1 & d) << 7),
                      (o[1] |= s << 3),
                      5 === i &&
                        ((o[1] |= (14 & a) >> 1), (o[2] = (1 & a) << 7), (o[2] |= 8), (o[3] = 0)),
                      {
                        config: o,
                        samplerate: c[d],
                        channelCount: s,
                        codec: 'mp4a.40.' + i,
                        manifestCodec: u,
                      });
                }
                function i(t, e) {
                  return 255 === t[e] && 240 == (246 & t[e + 1]);
                }
                function a(t, e) {
                  return 1 & t[e + 1] ? 7 : 9;
                }
                function s(t, e) {
                  return ((3 & t[e + 3]) << 11) | (t[e + 4] << 3) | ((224 & t[e + 5]) >>> 5);
                }
                function o(t, e) {
                  return e + 5 < t.length;
                }
                function l(t, e) {
                  return e + 1 < t.length && i(t, e);
                }
                function u(t, e) {
                  return o(t, e) && i(t, e) && s(t, e) <= t.length - e;
                }
                function c(t, e) {
                  if (l(t, e)) {
                    var r = a(t, e);
                    if (e + r >= t.length) return !1;
                    var n = s(t, e);
                    if (n <= r) return !1;
                    var i = e + n;
                    return i === t.length || l(t, i);
                  }
                  return !1;
                }
                function d(t, e, r, i, a) {
                  if (!t.samplerate) {
                    var s = n(e, r, i, a);
                    if (!s) return;
                    (t.config = s.config),
                      (t.samplerate = s.samplerate),
                      (t.channelCount = s.channelCount),
                      (t.codec = s.codec),
                      (t.manifestCodec = s.manifestCodec);
                  }
                }
                function f(t) {
                  return 9216e4 / t;
                }
                function h(t, e, r, n, i) {
                  var o = a(t, e),
                    l = s(t, e);
                  if (0 < (l -= o)) return { headerLength: o, frameLength: l, stamp: r + n * i };
                }
                function v(t, e, r, n, i) {
                  var a = h(e, r, n, i, f(t.samplerate));
                  if (a) {
                    var s,
                      o = a.frameLength,
                      l = a.headerLength,
                      u = a.stamp,
                      c = l + o,
                      d = Math.max(0, r + c - e.length);
                    d
                      ? (s = new Uint8Array(c - l)).set(e.subarray(r + l, e.length), 0)
                      : (s = e.subarray(r + l, r + c));
                    var v = { unit: s, pts: u };
                    return d || t.samples.push(v), { sample: v, length: c, missing: d };
                  }
                }
                r.r(e),
                  r.d(e, 'getAudioConfig', function () {
                    return n;
                  }),
                  r.d(e, 'isHeaderPattern', function () {
                    return i;
                  }),
                  r.d(e, 'getHeaderLength', function () {
                    return a;
                  }),
                  r.d(e, 'getFullFrameLength', function () {
                    return s;
                  }),
                  r.d(e, 'canGetFrameLength', function () {
                    return o;
                  }),
                  r.d(e, 'isHeader', function () {
                    return l;
                  }),
                  r.d(e, 'canParse', function () {
                    return u;
                  }),
                  r.d(e, 'probe', function () {
                    return c;
                  }),
                  r.d(e, 'initTrackConfig', function () {
                    return d;
                  }),
                  r.d(e, 'getFrameDuration', function () {
                    return f;
                  }),
                  r.d(e, 'parseFrameHeader', function () {
                    return h;
                  }),
                  r.d(e, 'appendFrame', function () {
                    return v;
                  });
                var g = r('./src/errors.ts'),
                  p = r('./src/events.ts');
              },
              './src/demux/base-audio-demuxer.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'initPTSFn', function () {
                    return u;
                  });
                var n = r('./src/polyfills/number.ts'),
                  i = r('./src/demux/id3.ts'),
                  a = r('./src/demux/dummy-demuxed-track.ts'),
                  s = r('./src/utils/mp4-tools.ts'),
                  o = r('./src/utils/typed-array.ts'),
                  l = (function () {
                    function t() {
                      (this._audioTrack = void 0),
                        (this._id3Track = void 0),
                        (this.frameIndex = 0),
                        (this.cachedData = null),
                        (this.initPTS = null);
                    }
                    var e = t.prototype;
                    return (
                      (e.resetInitSegment = function (t, e, r) {
                        this._id3Track = {
                          type: 'id3',
                          id: 3,
                          pid: -1,
                          inputTimeScale: 9e4,
                          sequenceNumber: 0,
                          samples: [],
                          dropped: 0,
                        };
                      }),
                      (e.resetTimeStamp = function () {}),
                      (e.resetContiguity = function () {}),
                      (e.canParse = function (t, e) {
                        return !1;
                      }),
                      (e.appendFrame = function (t, e, r) {}),
                      (e.demux = function (t, e) {
                        this.cachedData &&
                          ((t = Object(s.appendUint8Array)(this.cachedData, t)),
                          (this.cachedData = null));
                        var r,
                          n,
                          l = i.getID3Data(t, 0),
                          c = l ? l.length : 0,
                          d = this._audioTrack,
                          f = this._id3Track,
                          h = l ? i.getTimeStamp(l) : void 0,
                          v = t.length;
                        for (
                          (0 === this.frameIndex || null === this.initPTS) &&
                            (this.initPTS = u(h, e)),
                            l &&
                              0 < l.length &&
                              f.samples.push({ pts: this.initPTS, dts: this.initPTS, data: l }),
                            n = this.initPTS;
                          c < v;

                        ) {
                          if (this.canParse(t, c)) {
                            var g = this.appendFrame(d, t, c);
                            g
                              ? (this.frameIndex++, (n = g.sample.pts), (r = c += g.length))
                              : (c = v);
                          } else
                            i.canParse(t, c)
                              ? ((l = i.getID3Data(t, c)),
                                f.samples.push({ pts: n, dts: n, data: l }),
                                (r = c += l.length))
                              : c++;
                          if (c === v && r !== v) {
                            var p = Object(o.sliceUint8)(t, r);
                            this.cachedData = this.cachedData
                              ? Object(s.appendUint8Array)(this.cachedData, p)
                              : p;
                          }
                        }
                        return {
                          audioTrack: d,
                          avcTrack: Object(a.dummyTrack)(),
                          id3Track: f,
                          textTrack: Object(a.dummyTrack)(),
                        };
                      }),
                      (e.demuxSampleAes = function (t, e, r) {
                        return Promise.reject(
                          new Error(
                            '[' + this + '] This demuxer does not support Sample-AES decryption'
                          )
                        );
                      }),
                      (e.flush = function (t) {
                        var e = this.cachedData;
                        return (
                          e && ((this.cachedData = null), this.demux(e, 0)),
                          (this.frameIndex = 0),
                          {
                            audioTrack: this._audioTrack,
                            avcTrack: Object(a.dummyTrack)(),
                            id3Track: this._id3Track,
                            textTrack: Object(a.dummyTrack)(),
                          }
                        );
                      }),
                      (e.destroy = function () {}),
                      t
                    );
                  })(),
                  u = function (t, e) {
                    return Object(n.isFiniteNumber)(t) ? 90 * t : 9e4 * e;
                  };
                e.default = l;
              },
              './src/demux/chunk-cache.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return n;
                  });
                var n = (function () {
                  function t() {
                    (this.chunks = []), (this.dataLength = 0);
                  }
                  var e = t.prototype;
                  return (
                    (e.push = function (t) {
                      this.chunks.push(t), (this.dataLength += t.length);
                    }),
                    (e.flush = function () {
                      var t,
                        e = this.chunks,
                        r = this.dataLength;
                      return e.length
                        ? ((t =
                            1 === e.length
                              ? e[0]
                              : (function (t, e) {
                                  for (
                                    var r, n = new Uint8Array(e), i = 0, a = 0;
                                    a < t.length;
                                    a++
                                  )
                                    (r = t[a]), n.set(r, i), (i += r.length);
                                  return n;
                                })(e, r)),
                          this.reset(),
                          t)
                        : new Uint8Array(0);
                    }),
                    (e.reset = function () {
                      (this.chunks.length = 0), (this.dataLength = 0);
                    }),
                    t
                  );
                })();
              },
              './src/demux/dummy-demuxed-track.ts': function (t, e, r) {
                'use strict';
                function n() {
                  return {
                    type: '',
                    id: -1,
                    pid: -1,
                    inputTimeScale: 9e4,
                    sequenceNumber: -1,
                    samples: [],
                    dropped: 0,
                  };
                }
                r.r(e),
                  r.d(e, 'dummyTrack', function () {
                    return n;
                  });
              },
              './src/demux/exp-golomb.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = r('./src/utils/logger.ts'),
                  i = (function () {
                    function t(t) {
                      (this.data = void 0),
                        (this.bytesAvailable = void 0),
                        (this.word = void 0),
                        (this.bitsAvailable = void 0),
                        (this.data = t),
                        (this.bytesAvailable = t.byteLength),
                        (this.word = 0),
                        (this.bitsAvailable = 0);
                    }
                    var e = t.prototype;
                    return (
                      (e.loadWord = function () {
                        var t = this.data,
                          e = this.bytesAvailable,
                          r = t.byteLength - e,
                          n = new Uint8Array(4),
                          i = Math.min(4, e);
                        if (0 === i) throw new Error('no bytes available');
                        n.set(t.subarray(r, r + i)),
                          (this.word = new DataView(n.buffer).getUint32(0)),
                          (this.bitsAvailable = 8 * i),
                          (this.bytesAvailable -= i);
                      }),
                      (e.skipBits = function (t) {
                        var e;
                        this.bitsAvailable > t
                          ? ((this.word <<= t), (this.bitsAvailable -= t))
                          : ((t -= this.bitsAvailable),
                            (t -= (e = t >> 3) >> 3),
                            (this.bytesAvailable -= e),
                            this.loadWord(),
                            (this.word <<= t),
                            (this.bitsAvailable -= t));
                      }),
                      (e.readBits = function (t) {
                        var e = Math.min(this.bitsAvailable, t),
                          r = this.word >>> (32 - e);
                        return (
                          32 < t && n.logger.error('Cannot read more than 32 bits at a time'),
                          (this.bitsAvailable -= e),
                          0 < this.bitsAvailable
                            ? (this.word <<= e)
                            : 0 < this.bytesAvailable && this.loadWord(),
                          0 < (e = t - e) && this.bitsAvailable ? (r << e) | this.readBits(e) : r
                        );
                      }),
                      (e.skipLZ = function () {
                        var t;
                        for (t = 0; t < this.bitsAvailable; ++t)
                          if (0 != (this.word & (2147483648 >>> t)))
                            return (this.word <<= t), (this.bitsAvailable -= t), t;
                        return this.loadWord(), t + this.skipLZ();
                      }),
                      (e.skipUEG = function () {
                        this.skipBits(1 + this.skipLZ());
                      }),
                      (e.skipEG = function () {
                        this.skipBits(1 + this.skipLZ());
                      }),
                      (e.readUEG = function () {
                        var t = this.skipLZ();
                        return this.readBits(t + 1) - 1;
                      }),
                      (e.readEG = function () {
                        var t = this.readUEG();
                        return 1 & t ? (1 + t) >>> 1 : -1 * (t >>> 1);
                      }),
                      (e.readBoolean = function () {
                        return 1 === this.readBits(1);
                      }),
                      (e.readUByte = function () {
                        return this.readBits(8);
                      }),
                      (e.readUShort = function () {
                        return this.readBits(16);
                      }),
                      (e.readUInt = function () {
                        return this.readBits(32);
                      }),
                      (e.skipScalingList = function (t) {
                        for (var e = 8, r = 8, n = 0; n < t; n++)
                          0 !== r && (r = (e + this.readEG() + 256) % 256), (e = 0 === r ? e : r);
                      }),
                      (e.readSPS = function () {
                        var t,
                          e,
                          r,
                          n = 0,
                          i = 0,
                          a = 0,
                          s = 0,
                          o = this.readUByte.bind(this),
                          l = this.readBits.bind(this),
                          u = this.readUEG.bind(this),
                          c = this.readBoolean.bind(this),
                          d = this.skipBits.bind(this),
                          f = this.skipEG.bind(this),
                          h = this.skipUEG.bind(this),
                          v = this.skipScalingList.bind(this);
                        o();
                        var g = o();
                        if (
                          (l(5),
                          d(3),
                          o(),
                          h(),
                          100 === g ||
                            110 === g ||
                            122 === g ||
                            244 === g ||
                            44 === g ||
                            83 === g ||
                            86 === g ||
                            118 === g ||
                            128 === g)
                        ) {
                          var p = u();
                          if ((3 === p && d(1), h(), h(), d(1), c()))
                            for (e = 3 === p ? 12 : 8, r = 0; r < e; r++) c() && v(6 > r ? 16 : 64);
                        }
                        h();
                        var m = u();
                        if (0 === m) u();
                        else if (1 === m) for (d(1), f(), f(), t = u(), r = 0; r < t; r++) f();
                        h(), d(1);
                        var y = u(),
                          b = u(),
                          E = l(1);
                        0 === E && d(1), d(1), c() && ((n = u()), (i = u()), (a = u()), (s = u()));
                        var T = [1, 1];
                        if (c() && c())
                          switch (o()) {
                            case 1:
                              T = [1, 1];
                              break;
                            case 2:
                              T = [12, 11];
                              break;
                            case 3:
                              T = [10, 11];
                              break;
                            case 4:
                              T = [16, 11];
                              break;
                            case 5:
                              T = [40, 33];
                              break;
                            case 6:
                              T = [24, 11];
                              break;
                            case 7:
                              T = [20, 11];
                              break;
                            case 8:
                              T = [32, 11];
                              break;
                            case 9:
                              T = [80, 33];
                              break;
                            case 10:
                              T = [18, 11];
                              break;
                            case 11:
                              T = [15, 11];
                              break;
                            case 12:
                              T = [64, 33];
                              break;
                            case 13:
                              T = [160, 99];
                              break;
                            case 14:
                              T = [4, 3];
                              break;
                            case 15:
                              T = [3, 2];
                              break;
                            case 16:
                              T = [2, 1];
                              break;
                            case 255:
                              T = [(o() << 8) | o(), (o() << 8) | o()];
                          }
                        return {
                          width: Math.ceil(16 * (y + 1) - 2 * n - 2 * i),
                          height: (2 - E) * (b + 1) * 16 - (E ? 2 : 4) * (a + s),
                          pixelRatio: T,
                        };
                      }),
                      (e.readSliceType = function () {
                        return this.readUByte(), this.readUEG(), this.readUEG();
                      }),
                      t
                    );
                  })();
                e.default = i;
              },
              './src/demux/id3.ts': function (t, e, r) {
                'use strict';
                function n() {
                  return i || void 0 === self.TextDecoder || (i = new self.TextDecoder('utf-8')), i;
                }
                r.r(e),
                  r.d(e, 'isHeader', function () {
                    return a;
                  }),
                  r.d(e, 'isFooter', function () {
                    return s;
                  }),
                  r.d(e, 'getID3Data', function () {
                    return o;
                  }),
                  r.d(e, 'canParse', function () {
                    return u;
                  }),
                  r.d(e, 'getTimeStamp', function () {
                    return c;
                  }),
                  r.d(e, 'isTimeStampFrame', function () {
                    return d;
                  }),
                  r.d(e, 'getID3Frames', function () {
                    return h;
                  }),
                  r.d(e, 'decodeFrame', function () {
                    return v;
                  }),
                  r.d(e, 'utf8ArrayToStr', function () {
                    return b;
                  }),
                  r.d(e, 'testables', function () {
                    return E;
                  });
                var i,
                  a = function (t, e) {
                    return !!(
                      e + 10 <= t.length &&
                      73 === t[e] &&
                      68 === t[e + 1] &&
                      51 === t[e + 2] &&
                      255 > t[e + 3] &&
                      255 > t[e + 4] &&
                      128 > t[e + 6] &&
                      128 > t[e + 7] &&
                      128 > t[e + 8] &&
                      128 > t[e + 9]
                    );
                  },
                  s = function (t, e) {
                    return !!(
                      e + 10 <= t.length &&
                      51 === t[e] &&
                      68 === t[e + 1] &&
                      73 === t[e + 2] &&
                      255 > t[e + 3] &&
                      255 > t[e + 4] &&
                      128 > t[e + 6] &&
                      128 > t[e + 7] &&
                      128 > t[e + 8] &&
                      128 > t[e + 9]
                    );
                  },
                  o = function (t, e) {
                    for (var r = e, n = 0; a(t, e); )
                      (n += 10), (n += l(t, e + 6)), s(t, e + 10) && (n += 10), (e += n);
                    return 0 < n ? t.subarray(r, r + n) : void 0;
                  },
                  l = function (t, e) {
                    var r = 0;
                    return (
                      (r = (127 & t[e]) << 21),
                      (r |= (127 & t[e + 1]) << 14),
                      (r |= (127 & t[e + 2]) << 7),
                      (r |= 127 & t[e + 3])
                    );
                  },
                  u = function (t, e) {
                    return a(t, e) && l(t, e + 6) + 10 <= t.length - e;
                  },
                  c = function (t) {
                    for (var e, r = h(t), n = 0; n < r.length; n++)
                      if (((e = r[n]), d(e))) return y(e);
                  },
                  d = function (t) {
                    return (
                      t &&
                      'PRIV' === t.key &&
                      'com.apple.streaming.transportStreamTimestamp' === t.info
                    );
                  },
                  f = function (t) {
                    var e = String.fromCharCode(t[0], t[1], t[2], t[3]),
                      r = l(t, 4);
                    return { type: e, size: r, data: t.subarray(10, 10 + r) };
                  },
                  h = function (t) {
                    for (var e, r = 0, n = []; a(t, r); ) {
                      e = l(t, r + 6);
                      for (var i = (r += 10) + e; r + 8 < i; ) {
                        var o = f(t.subarray(r)),
                          u = v(o);
                        u && n.push(u), (r += o.size + 10);
                      }
                      s(t, r) && (r += 10);
                    }
                    return n;
                  },
                  v = function (t) {
                    return 'PRIV' === t.type ? g(t) : 'W' === t.type[0] ? m(t) : p(t);
                  },
                  g = function (t) {
                    if (!(2 > t.size)) {
                      var e = b(t.data, !0),
                        r = new Uint8Array(t.data.subarray(e.length + 1));
                      return { key: t.type, info: e, data: r.buffer };
                    }
                  },
                  p = function (t) {
                    if (!(2 > t.size)) {
                      if ('TXXX' === t.type) {
                        var e = 1,
                          r = b(t.data.subarray(e), !0);
                        e += r.length + 1;
                        var n = b(t.data.subarray(e));
                        return { key: t.type, info: r, data: n };
                      }
                      var i = b(t.data.subarray(1));
                      return { key: t.type, data: i };
                    }
                  },
                  m = function (t) {
                    if ('WXXX' === t.type) {
                      if (2 > t.size) return;
                      var e = 1,
                        r = b(t.data.subarray(e), !0);
                      e += r.length + 1;
                      var n = b(t.data.subarray(e));
                      return { key: t.type, info: r, data: n };
                    }
                    var i = b(t.data);
                    return { key: t.type, data: i };
                  },
                  y = function (t) {
                    if (8 === t.data.byteLength) {
                      var e = new Uint8Array(t.data),
                        r = 1 & e[3],
                        n = (e[4] << 23) + (e[5] << 15) + (e[6] << 7) + e[7];
                      return (n /= 45), r && (n += 47721858.84), Math.round(n);
                    }
                  },
                  b = function (t, e) {
                    void 0 === e && (e = !1);
                    var r = n();
                    if (r) {
                      var i = r.decode(t);
                      if (e) {
                        var a = i.indexOf('\0');
                        return -1 === a ? i : i.substring(0, a);
                      }
                      return i.replace(/\0/g, '');
                    }
                    for (var s, o, l, u = t.length, c = '', d = 0; d < u; ) {
                      if (0 === (s = t[d++]) && e) return c;
                      if (0 !== s && 3 !== s)
                        switch (s >> 4) {
                          case 0:
                          case 1:
                          case 2:
                          case 3:
                          case 4:
                          case 5:
                          case 6:
                          case 7:
                            c += String.fromCharCode(s);
                            break;
                          case 12:
                          case 13:
                            (o = t[d++]), (c += String.fromCharCode(((31 & s) << 6) | (63 & o)));
                            break;
                          case 14:
                            (o = t[d++]),
                              (l = t[d++]),
                              (c += String.fromCharCode(
                                ((15 & s) << 12) | ((63 & o) << 6) | ((63 & l) << 0)
                              ));
                        }
                    }
                    return c;
                  },
                  E = { decodeTextFrame: p };
              },
              './src/demux/mp3demuxer.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  return (n =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                r.r(e);
                var i = r('./src/demux/base-audio-demuxer.ts'),
                  a = r('./src/demux/id3.ts'),
                  s = r('./src/utils/logger.ts'),
                  o = r('./src/demux/mpegaudio.ts'),
                  l = (function (t) {
                    function e() {
                      return t.apply(this, arguments) || this;
                    }
                    var r, i;
                    (i = t),
                      ((r = e).prototype = Object.create(i.prototype)),
                      (r.prototype.constructor = r),
                      n(r, i);
                    var l = e.prototype;
                    return (
                      (l.resetInitSegment = function (e, r, n) {
                        t.prototype.resetInitSegment.call(this, e, r, n),
                          (this._audioTrack = {
                            container: 'audio/mpeg',
                            type: 'audio',
                            id: 2,
                            pid: -1,
                            sequenceNumber: 0,
                            isAAC: !1,
                            samples: [],
                            manifestCodec: e,
                            duration: n,
                            inputTimeScale: 9e4,
                            dropped: 0,
                          });
                      }),
                      (e.probe = function (t) {
                        if (!t) return !1;
                        for (var e = (a.getID3Data(t, 0) || []).length, r = t.length; e < r; e++)
                          if (o.probe(t, e))
                            return s.logger.log('MPEG Audio sync word found !'), !0;
                        return !1;
                      }),
                      (l.canParse = function (t, e) {
                        return o.canParse(t, e);
                      }),
                      (l.appendFrame = function (t, e, r) {
                        return null === this.initPTS
                          ? void 0
                          : o.appendFrame(t, e, r, this.initPTS, this.frameIndex);
                      }),
                      e
                    );
                  })(i.default);
                (l.minProbeByteLength = 4), (e.default = l);
              },
              './src/demux/mp4demuxer.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = r('./src/utils/mp4-tools.ts'),
                  i = r('./src/demux/dummy-demuxed-track.ts'),
                  a = (function () {
                    function t(t, e) {
                      (this.remainderData = null), (this.config = void 0), (this.config = e);
                    }
                    var e = t.prototype;
                    return (
                      (e.resetTimeStamp = function () {}),
                      (e.resetInitSegment = function () {}),
                      (e.resetContiguity = function () {}),
                      (t.probe = function (t) {
                        return (
                          0 <
                          Object(n.findBox)({ data: t, start: 0, end: Math.min(t.length, 16384) }, [
                            'moof',
                          ]).length
                        );
                      }),
                      (e.demux = function (t) {
                        var e = t,
                          r = Object(i.dummyTrack)();
                        if (this.config.progressive) {
                          this.remainderData &&
                            (e = Object(n.appendUint8Array)(this.remainderData, t));
                          var a = Object(n.segmentValidRange)(e);
                          (this.remainderData = a.remainder),
                            (r.samples = a.valid || new Uint8Array());
                        } else r.samples = e;
                        return {
                          audioTrack: Object(i.dummyTrack)(),
                          avcTrack: r,
                          id3Track: Object(i.dummyTrack)(),
                          textTrack: Object(i.dummyTrack)(),
                        };
                      }),
                      (e.flush = function () {
                        var t = Object(i.dummyTrack)();
                        return (
                          (t.samples = this.remainderData || new Uint8Array()),
                          (this.remainderData = null),
                          {
                            audioTrack: Object(i.dummyTrack)(),
                            avcTrack: t,
                            id3Track: Object(i.dummyTrack)(),
                            textTrack: Object(i.dummyTrack)(),
                          }
                        );
                      }),
                      (e.demuxSampleAes = function (t, e, r) {
                        return Promise.reject(
                          new Error('The MP4 demuxer does not support SAMPLE-AES decryption')
                        );
                      }),
                      (e.destroy = function () {}),
                      t
                    );
                  })();
                (a.minProbeByteLength = 1024), (e.default = a);
              },
              './src/demux/mpegaudio.ts': function (t, e, r) {
                'use strict';
                function n(t, e, r, n, a) {
                  if (!(r + 24 > e.length)) {
                    var s = i(e, r);
                    if (s && r + s.frameLength <= e.length) {
                      var o = n + a * ((9e4 * s.samplesPerFrame) / s.sampleRate),
                        l = { unit: e.subarray(r, r + s.frameLength), pts: o, dts: o };
                      return (
                        (t.config = []),
                        (t.channelCount = s.channelCount),
                        (t.samplerate = s.sampleRate),
                        t.samples.push(l),
                        { sample: l, length: s.frameLength, missing: 0 }
                      );
                    }
                  }
                }
                function i(t, e) {
                  var r = 3 & (t[e + 1] >> 3),
                    n = 3 & (t[e + 1] >> 1),
                    i = 15 & (t[e + 2] >> 4),
                    a = 3 & (t[e + 2] >> 2);
                  if (1 != r && 0 !== i && 15 !== i && 3 !== a) {
                    var s = 1 & (t[e + 2] >> 1),
                      o = t[e + 3] >> 6,
                      l = 1e3 * c[14 * (3 === r ? 3 - n : 3 === n ? 3 : 4) + i - 1],
                      v = d[3 * (3 === r ? 0 : 2 === r ? 1 : 2) + a],
                      g = 3 === o ? 1 : 2,
                      p = f[r][n],
                      m = h[n],
                      y = 8 * p * m,
                      b = Math.floor((p * l) / v + s) * m;
                    if (null === u) {
                      var E = (navigator.userAgent || '').match(/Chrome\/(\d+)/i);
                      u = E ? parseInt(E[1]) : 0;
                    }
                    return (
                      !!u &&
                        87 >= u &&
                        2 === n &&
                        224e3 <= l &&
                        0 === o &&
                        (t[e + 3] = 128 | t[e + 3]),
                      { sampleRate: v, channelCount: g, frameLength: b, samplesPerFrame: y }
                    );
                  }
                }
                function a(t, e) {
                  return 255 === t[e] && 224 == (224 & t[e + 1]) && 0 != (6 & t[e + 1]);
                }
                function s(t, e) {
                  return e + 1 < t.length && a(t, e);
                }
                function o(t, e) {
                  return a(t, e) && 4 <= t.length - e;
                }
                function l(t, e) {
                  if (e + 1 < t.length && a(t, e)) {
                    var r = i(t, e),
                      n = 4;
                    null != r && r.frameLength && (n = r.frameLength);
                    var o = e + n;
                    return o === t.length || s(t, o);
                  }
                  return !1;
                }
                r.r(e),
                  r.d(e, 'appendFrame', function () {
                    return n;
                  }),
                  r.d(e, 'parseHeader', function () {
                    return i;
                  }),
                  r.d(e, 'isHeaderPattern', function () {
                    return a;
                  }),
                  r.d(e, 'isHeader', function () {
                    return s;
                  }),
                  r.d(e, 'canParse', function () {
                    return o;
                  }),
                  r.d(e, 'probe', function () {
                    return l;
                  });
                var u = null,
                  c = [
                    32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56,
                    64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96,
                    112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160,
                    176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160,
                  ],
                  d = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3],
                  f = [
                    [0, 72, 144, 12],
                    [0, 0, 0, 0],
                    [0, 72, 144, 12],
                    [0, 144, 144, 12],
                  ],
                  h = [0, 1, 1, 4];
              },
              './src/demux/sample-aes.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = r('./src/crypt/decrypter.ts'),
                  i = r('./src/demux/tsdemuxer.ts'),
                  a = (function () {
                    function t(t, e, r) {
                      (this.keyData = void 0),
                        (this.decrypter = void 0),
                        (this.keyData = r),
                        (this.decrypter = new n.default(t, e, { removePKCS7Padding: !1 }));
                    }
                    var e = t.prototype;
                    return (
                      (e.decryptBuffer = function (t, e) {
                        this.decrypter.decrypt(
                          t,
                          this.keyData.key.buffer,
                          this.keyData.iv.buffer,
                          e
                        );
                      }),
                      (e.decryptAacSample = function (t, e, r, n) {
                        var i = t[e].unit,
                          a = i.subarray(16, i.length - (i.length % 16)),
                          s = a.buffer.slice(a.byteOffset, a.byteOffset + a.length),
                          o = this;
                        this.decryptBuffer(s, function (a) {
                          var s = new Uint8Array(a);
                          i.set(s, 16), n || o.decryptAacSamples(t, e + 1, r);
                        });
                      }),
                      (e.decryptAacSamples = function (t, e, r) {
                        for (; ; e++) {
                          if (e >= t.length) return void r();
                          if (!(32 > t[e].unit.length)) {
                            var n = this.decrypter.isSync();
                            if ((this.decryptAacSample(t, e, r, n), !n)) return;
                          }
                        }
                      }),
                      (e.getAvcEncryptedData = function (t) {
                        for (
                          var e = 16 * Math.floor((t.length - 48) / 160) + 16,
                            r = new Int8Array(e),
                            n = 0,
                            i = 32;
                          i <= t.length - 16;
                          i += 160, n += 16
                        )
                          r.set(t.subarray(i, i + 16), n);
                        return r;
                      }),
                      (e.getAvcDecryptedUnit = function (t, e) {
                        for (
                          var r = new Uint8Array(e), n = 0, i = 32;
                          i <= t.length - 16;
                          i += 160, n += 16
                        )
                          t.set(r.subarray(n, n + 16), i);
                        return t;
                      }),
                      (e.decryptAvcSample = function (t, e, r, n, a, s) {
                        var o = Object(i.discardEPB)(a.data),
                          l = this.getAvcEncryptedData(o),
                          u = this;
                        this.decryptBuffer(l.buffer, function (i) {
                          (a.data = u.getAvcDecryptedUnit(o, i)),
                            s || u.decryptAvcSamples(t, e, r + 1, n);
                        });
                      }),
                      (e.decryptAvcSamples = function (t, e, r, n) {
                        if (t instanceof Uint8Array)
                          throw new Error('Cannot decrypt samples of type Uint8Array');
                        for (; ; e++, r = 0) {
                          if (e >= t.length) return void n();
                          for (var i = t[e].units; !(r >= i.length); r++) {
                            var a = i[r];
                            if (!(48 >= a.data.length || (1 !== a.type && 5 !== a.type))) {
                              var s = this.decrypter.isSync();
                              if ((this.decryptAvcSample(t, e, r, n, a, s), !s)) return;
                            }
                          }
                        }
                      }),
                      t
                    );
                  })();
                e.default = a;
              },
              './src/demux/transmuxer-interface.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return d;
                  });
                var n = r('./node_modules/webworkify-webpack/index.js'),
                  i = r('./src/events.ts'),
                  a = r('./src/demux/transmuxer.ts'),
                  s = r('./src/utils/logger.ts'),
                  o = r('./src/errors.ts'),
                  l = r('./src/utils/mediasource-helper.ts'),
                  u = r('./node_modules/eventemitter3/index.js'),
                  c = Object(l.getMediaSource)() || {
                    isTypeSupported: function () {
                      return !1;
                    },
                  },
                  d = (function () {
                    function t(t, e, r, l) {
                      var d = this;
                      (this.hls = void 0),
                        (this.id = void 0),
                        (this.observer = void 0),
                        (this.frag = null),
                        (this.part = null),
                        (this.worker = void 0),
                        (this.onwmsg = void 0),
                        (this.transmuxer = null),
                        (this.onTransmuxComplete = void 0),
                        (this.onFlush = void 0),
                        (this.hls = t),
                        (this.id = e),
                        (this.onTransmuxComplete = r),
                        (this.onFlush = l);
                      var f = t.config,
                        h = function (e, r) {
                          ((r = r || {}).frag = d.frag), (r.id = d.id), t.trigger(e, r);
                        };
                      (this.observer = new u.EventEmitter()),
                        this.observer.on(i.Events.FRAG_DECRYPTED, h),
                        this.observer.on(i.Events.ERROR, h);

                      var v = {
                          mp4: c.isTypeSupported('video/mp4'),
                          mpeg: c.isTypeSupported('audio/mpeg'),
                          mp3: c.isTypeSupported('audio/mp4; codecs="mp3"'),
                        },
                        g = navigator.vendor;

                      if (f.enableWorker && 'undefined' != typeof Worker) {
                        var p;
                        s.logger.log('demuxing in webworker');

                        try {
                          p = this.worker = n('./src/demux/transmuxer-worker.ts');
                          this.onwmsg = this.onWorkerMessage.bind(this);
                          p.addEventListener('message', this.onwmsg);
                          p.onerror = function (e) {
                            t.trigger(i.Events.ERROR, {
                              type: o.ErrorTypes.OTHER_ERROR,
                              details: o.ErrorDetails.INTERNAL_EXCEPTION,
                              fatal: !0,
                              event: 'demuxerWorker',
                              error: new Error(
                                e.message + '  (' + e.filename + ':' + e.lineno + ')'
                              ),
                            });
                          };
                          p.postMessage({
                            cmd: 'init',
                            typeSupported: v,
                            vendor: g,
                            id: e,
                            config: JSON.stringify(f),
                          });
                        } catch (t) {
                          s.logger.warn('Error in worker:', t),
                            s.logger.error(
                              'Error while initializing DemuxerWorker, fallback to inline'
                            ),
                            p && self.URL.revokeObjectURL(p.objectURL),
                            (this.transmuxer = new a.default(this.observer, v, f, g, e)),
                            (this.worker = null);
                        }
                      } else {
                        this.transmuxer = new a.default(this.observer, v, f, g, e);
                      }
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {
                        var t = this.worker;
                        if (t)
                          t.removeEventListener('message', this.onwmsg),
                            t.terminate(),
                            (this.worker = null);
                        else {
                          var e = this.transmuxer;
                          e && (e.destroy(), (this.transmuxer = null));
                        }
                        var r = this.observer;
                        r && r.removeAllListeners(), (this.observer = null);
                      }),
                      (e.push = function (t, e, r, n, i, o, l, u, c, d) {
                        var f = this;
                        c.transmuxing.start = self.performance.now();
                        var h = this.transmuxer,
                          v = this.worker,
                          g = o ? o.start : i.start,
                          p = i.decryptdata,
                          m = this.frag,
                          y = !(m && i.cc === m.cc),
                          b = !(m && c.level === m.level),
                          E = m ? c.sn - m.sn : -1,
                          T = this.part ? c.part - this.part.index : 1,
                          A = !b && (1 === E || (0 === E && 1 === T)),
                          S = self.performance.now();
                        (b || E || 0 === i.stats.parsing.start) && (i.stats.parsing.start = S),
                          o && (T || !A) && (o.stats.parsing.start = S);
                        var L = new a.TransmuxState(y, A, u, b, g);
                        if (!A || y) {
                          s.logger.log(
                            '[transmuxer-interface, ' +
                              i.type +
                              ']: Starting new transmux session for sn: ' +
                              c.sn +
                              ' p: ' +
                              c.part +
                              ' level: ' +
                              c.level +
                              ' id: ' +
                              c.id +
                              '\n        discontinuity: ' +
                              y +
                              '\n        trackSwitch: ' +
                              b +
                              '\n        contiguous: ' +
                              A +
                              '\n        accurateTimeOffset: ' +
                              u +
                              '\n        timeOffset: ' +
                              g
                          );
                          var _ = new a.TransmuxConfig(r, n, e, l, d);
                          this.configureTransmuxer(_);
                        }
                        if (((this.frag = i), (this.part = o), v))
                          v.postMessage(
                            { cmd: 'demux', data: t, decryptdata: p, chunkMeta: c, state: L },
                            t instanceof ArrayBuffer ? [t] : []
                          );
                        else if (h) {
                          var k = h.push(t, p, c, L);
                          Object(a.isPromise)(k)
                            ? k.then(function (t) {
                                f.handleTransmuxComplete(t);
                              })
                            : this.handleTransmuxComplete(k);
                        }
                      }),
                      (e.flush = function (t) {
                        var e = this;
                        t.transmuxing.start = self.performance.now();
                        var r = this.transmuxer,
                          n = this.worker;
                        if (n) n.postMessage({ cmd: 'flush', chunkMeta: t });
                        else if (r) {
                          var i = r.flush(t);
                          Object(a.isPromise)(i)
                            ? i.then(function (r) {
                                e.handleFlushResult(r, t);
                              })
                            : this.handleFlushResult(i, t);
                        }
                      }),
                      (e.handleFlushResult = function (t, e) {
                        var r = this;
                        t.forEach(function (t) {
                          r.handleTransmuxComplete(t);
                        }),
                          this.onFlush(e);
                      }),
                      (e.onWorkerMessage = function (t) {
                        var e = t.data,
                          r = this.hls;
                        switch (e.event) {
                          case 'init':
                            self.URL.revokeObjectURL(this.worker.objectURL);
                            break;
                          case 'transmuxComplete':
                            this.handleTransmuxComplete(e.data);
                            break;
                          case 'flush':
                            this.onFlush(e.data);
                            break;
                          default:
                            (e.data = e.data || {}),
                              (e.data.frag = this.frag),
                              (e.data.id = this.id),
                              r.trigger(e.event, e.data);
                        }
                      }),
                      (e.configureTransmuxer = function (t) {
                        var e = this.worker,
                          r = this.transmuxer;
                        e ? e.postMessage({ cmd: 'configure', config: t }) : r && r.configure(t);
                      }),
                      (e.handleTransmuxComplete = function (t) {
                        (t.chunkMeta.transmuxing.end = self.performance.now()),
                          this.onTransmuxComplete(t);
                      }),
                      t
                    );
                  })();
              },
              './src/demux/transmuxer-worker.ts': function (t, e, r) {
                'use strict';
                function n(t) {
                  var e = new c.EventEmitter();
                  var r = function (e, r) {
                    t.postMessage({ event: e, data: r });
                  };

                  e.on(l.Events.FRAG_DECRYPTED, r);

                  e.on(l.Events.ERROR, r);

                  t.addEventListener('message', function (n) {
                    var a = n.data;
                    switch (a.cmd) {
                      case 'init':
                        var l = JSON.parse(a.config);
                        (t.transmuxer = new o.default(e, a.typeSupported, l, a.vendor, a.id)),
                          Object(u.enableLogs)(l.debug),
                          r('init', null);
                        break;
                      case 'configure':
                        t.transmuxer.configure(a.config);
                        break;
                      case 'demux':
                        var c = t.transmuxer.push(a.data, a.decryptdata, a.chunkMeta, a.state);
                        Object(o.isPromise)(c)
                          ? c.then(function (e) {
                              i(t, e);
                            })
                          : i(t, c);
                        break;
                      case 'flush':
                        var d = a.chunkMeta,
                          f = t.transmuxer.flush(d);
                        Object(o.isPromise)(f)
                          ? f.then(function (e) {
                              s(t, e, d);
                            })
                          : s(t, f, d);
                    }
                  });
                }

                function i(t, e) {
                  if ((o = e.remuxResult).audio || o.video || o.text || o.id3 || o.initSegment) {
                    var r = [],
                      n = e.remuxResult,
                      i = n.audio,
                      s = n.video;
                    i && a(r, i),
                      s && a(r, s),
                      t.postMessage({ event: 'transmuxComplete', data: e }, r);
                  }
                  var o;
                }

                function a(t, e) {
                  e.data1 && t.push(e.data1.buffer), e.data2 && t.push(e.data2.buffer);
                }

                function s(t, e, r) {
                  e.forEach(function (e) {
                    i(t, e);
                  }),
                    t.postMessage({ event: 'flush', data: r });
                }

                r.r(e);
                r.d(e, 'default', function () {
                  return n;
                });

                var o = r('./src/demux/transmuxer.ts'),
                  l = r('./src/events.ts'),
                  u = r('./src/utils/logger.ts'),
                  c = r('./node_modules/eventemitter3/index.js');
              },
              './src/demux/transmuxer.ts': function (t, e, r) {
                'use strict';
                function n(t) {
                  return 'then' in t && t.then instanceof Function;
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return b;
                  }),
                  r.d(e, 'isPromise', function () {
                    return n;
                  }),
                  r.d(e, 'TransmuxConfig', function () {
                    return T;
                  }),
                  r.d(e, 'TransmuxState', function () {
                    return A;
                  });
                var i,
                  a = r('./src/events.ts'),
                  s = r('./src/errors.ts'),
                  o = r('./src/crypt/decrypter.ts'),
                  l = r('./src/demux/aacdemuxer.ts'),
                  u = r('./src/demux/mp4demuxer.ts'),
                  c = r('./src/demux/tsdemuxer.ts'),
                  d = r('./src/demux/mp3demuxer.ts'),
                  f = r('./src/remux/mp4-remuxer.ts'),
                  h = r('./src/remux/passthrough-remuxer.ts'),
                  v = r('./src/demux/chunk-cache.ts'),
                  g = r('./src/utils/mp4-tools.ts'),
                  p = r('./src/utils/logger.ts');
                try {
                  i = self.performance.now.bind(self.performance);
                } catch (t) {
                  p.logger.debug('Unable to use Performance API on this environment'),
                    (i = self.Date.now);
                }
                var m = [
                    { demux: c.default, remux: f.default },
                    { demux: u.default, remux: h.default },
                    { demux: l.default, remux: f.default },
                    { demux: d.default, remux: f.default },
                  ],
                  y = 1024;
                m.forEach(function (t) {
                  var e = t.demux;
                  y = Math.max(y, e.minProbeByteLength);
                });
                var b = (function () {
                    function t(t, e, r, n, i) {
                      (this.observer = void 0),
                        (this.typeSupported = void 0),
                        (this.config = void 0),
                        (this.vendor = void 0),
                        (this.id = void 0),
                        (this.demuxer = void 0),
                        (this.remuxer = void 0),
                        (this.decrypter = void 0),
                        (this.probe = void 0),
                        (this.decryptionPromise = null),
                        (this.transmuxConfig = void 0),
                        (this.currentTransmuxState = void 0),
                        (this.cache = new v.default()),
                        (this.observer = t),
                        (this.typeSupported = e),
                        (this.config = r),
                        (this.vendor = n),
                        (this.id = i);
                    }
                    var e = t.prototype;
                    return (
                      (e.configure = function (t) {
                        (this.transmuxConfig = t), this.decrypter && this.decrypter.reset();
                      }),
                      (e.push = function (t, e, r, n) {
                        var a = this,
                          s = r.transmuxing;
                        s.executeStart = i();
                        var o = new Uint8Array(t),
                          l = this.cache,
                          u = this.config,
                          c = this.currentTransmuxState,
                          d = this.transmuxConfig;
                        n && (this.currentTransmuxState = n);
                        var f = (function (t, e) {
                          var r = null;
                          return (
                            0 < t.byteLength &&
                              null != e &&
                              null != e.key &&
                              null !== e.iv &&
                              null != e.method &&
                              (r = e),
                            r
                          );
                        })(o, e);
                        if (f && 'AES-128' === f.method) {
                          var h = this.getDecrypter();
                          if (!u.enableSoftwareAES)
                            return (
                              (this.decryptionPromise = h
                                .webCryptoDecrypt(o, f.key.buffer, f.iv.buffer)
                                .then(function (t) {
                                  var e = a.push(t, null, r);
                                  return (a.decryptionPromise = null), e;
                                })),
                              this.decryptionPromise
                            );
                          var v = h.softwareDecrypt(o, f.key.buffer, f.iv.buffer);
                          if (!v) return (s.executeEnd = i()), E(r);
                          o = new Uint8Array(v);
                        }
                        var p = n || c,
                          m = p.contiguous,
                          y = p.discontinuity,
                          b = p.trackSwitch,
                          T = p.accurateTimeOffset,
                          A = p.timeOffset,
                          S = d.audioCodec,
                          L = d.videoCodec,
                          _ = d.defaultInitPts,
                          k = d.duration,
                          D = d.initSegmentData;
                        if (
                          ((y || b) && this.resetInitSegment(D, S, L, k),
                          y && this.resetInitialTimestamp(_),
                          m || this.resetContiguity(),
                          this.needsProbing(o, y, b))
                        ) {
                          if (l.dataLength) {
                            var w = l.flush();
                            o = Object(g.appendUint8Array)(w, o);
                          }
                          this.configureTransmuxer(o, d);
                        }
                        var R = this.transmux(o, f, A, T, r),
                          C = this.currentTransmuxState;
                        return (
                          (C.contiguous = !0),
                          (C.discontinuity = !1),
                          (C.trackSwitch = !1),
                          (s.executeEnd = i()),
                          R
                        );
                      }),
                      (e.flush = function (t) {
                        var e = this,
                          r = t.transmuxing;
                        r.executeStart = i();
                        var o = this.decrypter,
                          l = this.cache,
                          u = this.currentTransmuxState,
                          c = this.decryptionPromise;
                        if (c)
                          return c.then(function () {
                            return e.flush(t);
                          });
                        var d = [],
                          f = u.timeOffset;
                        if (o) {
                          var h = o.flush();
                          h && d.push(this.push(h, null, t));
                        }
                        var v = l.dataLength;
                        l.reset();
                        var g = this.demuxer,
                          p = this.remuxer;
                        if (!g || !p)
                          return (
                            v >= y &&
                              this.observer.emit(a.Events.ERROR, a.Events.ERROR, {
                                type: s.ErrorTypes.MEDIA_ERROR,
                                details: s.ErrorDetails.FRAG_PARSING_ERROR,
                                fatal: !0,
                                reason: 'no demux matching with content found',
                              }),
                            (r.executeEnd = i()),
                            [E(t)]
                          );
                        var m = g.flush(f);
                        return n(m)
                          ? m.then(function (r) {
                              return e.flushRemux(d, r, t), d;
                            })
                          : (this.flushRemux(d, m, t), d);
                      }),
                      (e.flushRemux = function (t, e, r) {
                        var n = e.audioTrack,
                          a = e.avcTrack,
                          s = e.id3Track,
                          o = e.textTrack,
                          l = this.currentTransmuxState,
                          u = l.accurateTimeOffset,
                          c = l.timeOffset,
                          d = this.remuxer.remux(n, a, s, o, c, u, !0, this.id);
                        t.push({ remuxResult: d, chunkMeta: r }), (r.transmuxing.executeEnd = i());
                      }),
                      (e.resetInitialTimestamp = function (t) {
                        var e = this.demuxer,
                          r = this.remuxer;
                        e && r && (e.resetTimeStamp(t), r.resetTimeStamp(t));
                      }),
                      (e.resetContiguity = function () {
                        var t = this.demuxer,
                          e = this.remuxer;
                        t && e && (t.resetContiguity(), e.resetNextTimestamp());
                      }),
                      (e.resetInitSegment = function (t, e, r, n) {
                        var i = this.demuxer,
                          a = this.remuxer;
                        i && a && (i.resetInitSegment(e, r, n), a.resetInitSegment(t, e, r));
                      }),
                      (e.destroy = function () {
                        this.demuxer && (this.demuxer.destroy(), (this.demuxer = void 0)),
                          this.remuxer && (this.remuxer.destroy(), (this.remuxer = void 0));
                      }),
                      (e.transmux = function (t, e, r, n, i) {
                        return e && 'SAMPLE-AES' === e.method
                          ? this.transmuxSampleAes(t, e, r, n, i)
                          : this.transmuxUnencrypted(t, r, n, i);
                      }),
                      (e.transmuxUnencrypted = function (t, e, r, n) {
                        var i = this.demuxer.demux(t, e, !1, !this.config.progressive),
                          a = i.audioTrack,
                          s = i.avcTrack,
                          o = i.id3Track,
                          l = i.textTrack;
                        return {
                          remuxResult: this.remuxer.remux(a, s, o, l, e, r, !1, this.id),
                          chunkMeta: n,
                        };
                      }),
                      (e.transmuxSampleAes = function (t, e, r, n, i) {
                        var a = this;
                        return this.demuxer.demuxSampleAes(t, e, r).then(function (t) {
                          return {
                            remuxResult: a.remuxer.remux(
                              t.audioTrack,
                              t.avcTrack,
                              t.id3Track,
                              t.textTrack,
                              r,
                              n,
                              !1,
                              a.id
                            ),
                            chunkMeta: i,
                          };
                        });
                      }),
                      (e.configureTransmuxer = function (t, e) {
                        for (
                          var r,
                            n = this.config,
                            i = this.observer,
                            a = this.typeSupported,
                            s = this.vendor,
                            o = e.audioCodec,
                            l = e.defaultInitPts,
                            c = e.duration,
                            d = e.initSegmentData,
                            f = e.videoCodec,
                            v = 0,
                            g = m.length;
                          v < g;
                          v++
                        )
                          if (m[v].demux.probe(t)) {
                            r = m[v];
                            break;
                          }
                        r ||
                          (p.logger.warn(
                            'Failed to find demuxer by probing frag, treating as mp4 passthrough'
                          ),
                          (r = { demux: u.default, remux: h.default }));
                        var y = this.demuxer,
                          b = this.remuxer,
                          E = r.remux,
                          T = r.demux;
                        (b && b instanceof E) || (this.remuxer = new E(i, n, a, s)),
                          (y && y instanceof T) ||
                            ((this.demuxer = new T(i, n, a)), (this.probe = T.probe)),
                          this.resetInitSegment(d, o, f, c),
                          this.resetInitialTimestamp(l);
                      }),
                      (e.needsProbing = function (t, e, r) {
                        return !this.demuxer || !this.remuxer || e || r;
                      }),
                      (e.getDecrypter = function () {
                        var t = this.decrypter;
                        return (
                          t || (t = this.decrypter = new o.default(this.observer, this.config)), t
                        );
                      }),
                      t
                    );
                  })(),
                  E = function (t) {
                    return { remuxResult: {}, chunkMeta: t };
                  },
                  T = function (t, e, r, n, i) {
                    (this.audioCodec = void 0),
                      (this.videoCodec = void 0),
                      (this.initSegmentData = void 0),
                      (this.duration = void 0),
                      (this.defaultInitPts = void 0),
                      (this.audioCodec = t),
                      (this.videoCodec = e),
                      (this.initSegmentData = r),
                      (this.duration = n),
                      (this.defaultInitPts = i);
                  },
                  A = function (t, e, r, n, i) {
                    (this.discontinuity = void 0),
                      (this.contiguous = void 0),
                      (this.accurateTimeOffset = void 0),
                      (this.trackSwitch = void 0),
                      (this.timeOffset = void 0),
                      (this.discontinuity = t),
                      (this.contiguous = e),
                      (this.accurateTimeOffset = r),
                      (this.trackSwitch = n),
                      (this.timeOffset = i);
                  };
              },
              './src/demux/tsdemuxer.ts': function (t, e, r) {
                'use strict';
                function n(t, e, r, n) {
                  return { key: t, frame: !1, pts: e, dts: r, units: [], debug: n, length: 0 };
                }
                function i(t, e) {
                  return ((31 & t[e + 10]) << 8) | t[e + 11];
                }
                function a(t, e, r, n) {
                  var i = { audio: -1, avc: -1, id3: -1, isAAC: !0 },
                    a = e + 3 + (((15 & t[e + 1]) << 8) | t[e + 2]) - 4;
                  for (e += 12 + (((15 & t[e + 10]) << 8) | t[e + 11]); e < a; ) {
                    var s = ((31 & t[e + 1]) << 8) | t[e + 2];
                    switch (t[e]) {
                      case 207:
                        if (!n) {
                          m.logger.log(
                            'ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream'
                          );
                          break;
                        }
                      case 15:
                        -1 === i.audio && (i.audio = s);
                        break;
                      case 21:
                        -1 === i.id3 && (i.id3 = s);
                        break;
                      case 219:
                        if (!n) {
                          m.logger.log(
                            'H.264 with AES-128-CBC slice encryption found in unencrypted stream'
                          );
                          break;
                        }
                      case 27:
                        -1 === i.avc && (i.avc = s);
                        break;
                      case 3:
                      case 4:
                        r
                          ? -1 === i.audio && ((i.audio = s), (i.isAAC = !1))
                          : m.logger.log('MPEG audio found, not supported in this browser');
                        break;
                      case 36:
                        m.logger.warn('Unsupported HEVC stream type found');
                    }
                    e += 5 + (((15 & t[e + 3]) << 8) | t[e + 4]);
                  }
                  return i;
                }
                function s(t) {
                  var e,
                    r,
                    n,
                    i,
                    a,
                    s = 0,
                    o = t.data;
                  if (!t || 0 === t.size) return null;
                  for (; 19 > o[0].length && 1 < o.length; ) {
                    var l = new Uint8Array(o[0].length + o[1].length);
                    l.set(o[0]), l.set(o[1], o[0].length), (o[0] = l), o.splice(1, 1);
                  }
                  if (1 === ((e = o[0])[0] << 16) + (e[1] << 8) + e[2]) {
                    if ((r = (e[4] << 8) + e[5]) && r > t.size - 6) return null;
                    var u = e[7];
                    192 & u &&
                      ((i =
                        536870912 * (14 & e[9]) +
                        4194304 * (255 & e[10]) +
                        16384 * (254 & e[11]) +
                        128 * (255 & e[12]) +
                        (254 & e[13]) / 2),
                      64 & u
                        ? 54e5 <
                            i -
                              (a =
                                536870912 * (14 & e[14]) +
                                4194304 * (255 & e[15]) +
                                16384 * (254 & e[16]) +
                                128 * (255 & e[17]) +
                                (254 & e[18]) / 2) &&
                          (m.logger.warn(
                            Math.round((i - a) / 9e4) + 's delta between PTS and DTS, align them'
                          ),
                          (i = a))
                        : (a = i));
                    var c = (n = e[8]) + 9;
                    if (t.size <= c) return null;
                    t.size -= c;
                    for (var d = new Uint8Array(t.size), f = 0, h = o.length; f < h; f++) {
                      var v = (e = o[f]).byteLength;
                      if (c) {
                        if (c > v) {
                          c -= v;
                          continue;
                        }
                        (e = e.subarray(c)), (v -= c), (c = 0);
                      }
                      d.set(e, s), (s += v);
                    }
                    return r && (r -= n + 3), { data: d, pts: i, dts: a, len: r };
                  }
                  return null;
                }
                function o(t, e) {
                  if (t.units.length && t.frame) {
                    if (void 0 === t.pts) {
                      var r = e.samples,
                        n = r.length;
                      if (!n) return void e.dropped++;
                      var i = r[n - 1];
                      (t.pts = i.pts), (t.dts = i.dts);
                    }
                    e.samples.push(t);
                  }
                  t.debug.length && m.logger.log(t.pts + '/' + t.dts + ':' + t.debug);
                }
                function l(t, e) {
                  var r = t.length;
                  if (0 < r) {
                    if (e.pts >= t[r - 1].pts) t.push(e);
                    else
                      for (var n = r - 1; 0 <= n; n--)
                        if (e.pts < t[n].pts) {
                          t.splice(n, 0, e);
                          break;
                        }
                  } else t.push(e);
                }
                function u(t) {
                  for (var e = t.byteLength, r = [], n = 1; n < e - 2; )
                    0 === t[n] && 0 === t[n + 1] && 3 === t[n + 2]
                      ? (r.push(n + 2), (n += 2))
                      : n++;
                  if (0 === r.length) return t;
                  var i = e - r.length,
                    a = new Uint8Array(i),
                    s = 0;
                  for (n = 0; n < i; s++, n++) s === r[0] && (s++, r.shift()), (a[n] = t[s]);
                  return a;
                }
                r.r(e),
                  r.d(e, 'discardEPB', function () {
                    return u;
                  });
                var c = r('./src/demux/adts.ts'),
                  d = r('./src/demux/mpegaudio.ts'),
                  f = r('./src/demux/exp-golomb.ts'),
                  h = r('./src/demux/id3.ts'),
                  v = r('./src/demux/sample-aes.ts'),
                  g = r('./src/events.ts'),
                  p = r('./src/utils/mp4-tools.ts'),
                  m = r('./src/utils/logger.ts'),
                  y = r('./src/errors.ts'),
                  b = { video: 1, audio: 2, id3: 3, text: 4 },
                  E = (function () {
                    function t(t, e, r) {
                      (this.observer = void 0),
                        (this.config = void 0),
                        (this.typeSupported = void 0),
                        (this.sampleAes = null),
                        (this.pmtParsed = !1),
                        (this.audioCodec = void 0),
                        (this.videoCodec = void 0),
                        (this._duration = 0),
                        (this.aacLastPTS = null),
                        (this._initPTS = null),
                        (this._initDTS = null),
                        (this._pmtId = -1),
                        (this._avcTrack = void 0),
                        (this._audioTrack = void 0),
                        (this._id3Track = void 0),
                        (this._txtTrack = void 0),
                        (this.aacOverFlow = null),
                        (this.avcSample = null),
                        (this.remainderData = null),
                        (this.observer = t),
                        (this.config = e),
                        (this.typeSupported = r);
                    }
                    (t.probe = function (e) {
                      var r = t.syncOffset(e);
                      return !(
                        0 > r ||
                        (r &&
                          m.logger.warn(
                            'MPEG2-TS detected but first sync word found @ offset ' +
                              r +
                              ', junk ahead ?'
                          ),
                        0)
                      );
                    }),
                      (t.syncOffset = function (t) {
                        for (var e = Math.min(1e3, t.length - 564), r = 0; r < e; ) {
                          if (71 === t[r] && 71 === t[r + 188] && 71 === t[r + 376]) return r;
                          r++;
                        }
                        return -1;
                      }),
                      (t.createTrack = function (t, e) {
                        return {
                          container: 'video' === t || 'audio' === t ? 'video/mp2t' : void 0,
                          type: t,
                          id: b[t],
                          pid: -1,
                          inputTimeScale: 9e4,
                          sequenceNumber: 0,
                          samples: [],
                          dropped: 0,
                          duration: 'audio' === t ? e : void 0,
                        };
                      });
                    var e = t.prototype;
                    return (
                      (e.resetInitSegment = function (e, r, n) {
                        (this.pmtParsed = !1),
                          (this._pmtId = -1),
                          (this._avcTrack = t.createTrack('video', n)),
                          (this._audioTrack = t.createTrack('audio', n)),
                          (this._id3Track = t.createTrack('id3', n)),
                          (this._txtTrack = t.createTrack('text', n)),
                          (this._audioTrack.isAAC = !0),
                          (this.aacOverFlow = null),
                          (this.aacLastPTS = null),
                          (this.avcSample = null),
                          (this.audioCodec = e),
                          (this.videoCodec = r),
                          (this._duration = n);
                      }),
                      (e.resetTimeStamp = function () {}),
                      (e.resetContiguity = function () {
                        var t = this._audioTrack,
                          e = this._avcTrack,
                          r = this._id3Track;
                        t && (t.pesData = null),
                          e && (e.pesData = null),
                          r && (r.pesData = null),
                          (this.aacOverFlow = null),
                          (this.aacLastPTS = null);
                      }),
                      (e.demux = function (e, r, n, o) {
                        void 0 === n && (n = !1),
                          void 0 === o && (o = !1),
                          n || (this.sampleAes = null);
                        var l,
                          u = this._avcTrack,
                          c = this._audioTrack,
                          d = this._id3Track,
                          f = u.pid,
                          h = u.pesData,
                          v = c.pid,
                          b = d.pid,
                          E = c.pesData,
                          T = d.pesData,
                          A = !1,
                          S = this.pmtParsed,
                          L = this._pmtId,
                          _ = e.length;
                        if (
                          (this.remainderData &&
                            ((_ = (e = Object(p.appendUint8Array)(this.remainderData, e)).length),
                            (this.remainderData = null)),
                          188 > _ && !o)
                        )
                          return (
                            (this.remainderData = e),
                            { audioTrack: c, avcTrack: u, id3Track: d, textTrack: this._txtTrack }
                          );
                        var k = Math.max(0, t.syncOffset(e));
                        (_ -= (_ + k) % 188) < e.byteLength &&
                          !o &&
                          (this.remainderData = new Uint8Array(
                            e.buffer,
                            _,
                            e.buffer.byteLength - _
                          ));
                        for (var D = k; D < _; D += 188)
                          if (71 === e[D]) {
                            var w = !!(64 & e[D + 1]),
                              R = ((31 & e[D + 1]) << 8) + e[D + 2],
                              C = void 0;
                            if (1 < (48 & e[D + 3]) >> 4) {
                              if ((C = D + 5 + e[D + 4]) === D + 188) continue;
                            } else C = D + 4;
                            switch (R) {
                              case f:
                                w &&
                                  (h && (l = s(h)) && this.parseAVCPES(l, !1),
                                  (h = { data: [], size: 0 })),
                                  h &&
                                    (h.data.push(e.subarray(C, D + 188)), (h.size += D + 188 - C));
                                break;
                              case v:
                                w &&
                                  (E &&
                                    (l = s(E)) &&
                                    (c.isAAC ? this.parseAACPES(l) : this.parseMPEGPES(l)),
                                  (E = { data: [], size: 0 })),
                                  E &&
                                    (E.data.push(e.subarray(C, D + 188)), (E.size += D + 188 - C));
                                break;
                              case b:
                                w &&
                                  (T && (l = s(T)) && this.parseID3PES(l),
                                  (T = { data: [], size: 0 })),
                                  T &&
                                    (T.data.push(e.subarray(C, D + 188)), (T.size += D + 188 - C));
                                break;
                              case 0:
                                w && (C += e[C] + 1), (L = this._pmtId = i(e, C));
                                break;
                              case L:
                                w && (C += e[C] + 1);
                                var x = a(
                                  e,
                                  C,
                                  !0 === this.typeSupported.mpeg || !0 === this.typeSupported.mp3,
                                  n
                                );
                                0 < (f = x.avc) && (u.pid = f),
                                  0 < (v = x.audio) && ((c.pid = v), (c.isAAC = x.isAAC)),
                                  0 < (b = x.id3) && (d.pid = b),
                                  A &&
                                    !S &&
                                    (m.logger.log('reparse from beginning'),
                                    (A = !1),
                                    (D = k - 188)),
                                  (S = this.pmtParsed = !0);
                                break;
                              case 17:
                              case 8191:
                                break;
                              default:
                                A = !0;
                            }
                          } else
                            this.observer.emit(g.Events.ERROR, g.Events.ERROR, {
                              type: y.ErrorTypes.MEDIA_ERROR,
                              details: y.ErrorDetails.FRAG_PARSING_ERROR,
                              fatal: !1,
                              reason: 'TS packet did not start with 0x47',
                            });
                        (u.pesData = h), (c.pesData = E), (d.pesData = T);
                        var I = {
                          audioTrack: c,
                          avcTrack: u,
                          id3Track: d,
                          textTrack: this._txtTrack,
                        };
                        return o && this.extractRemainingSamples(I), I;
                      }),
                      (e.flush = function () {
                        var t,
                          e = this.remainderData;
                        return (
                          (this.remainderData = null),
                          (t = e
                            ? this.demux(e, -1, !1, !0)
                            : {
                                audioTrack: this._audioTrack,
                                avcTrack: this._avcTrack,
                                textTrack: this._txtTrack,
                                id3Track: this._id3Track,
                              }),
                          this.extractRemainingSamples(t),
                          this.sampleAes ? this.decrypt(t, this.sampleAes) : t
                        );
                      }),
                      (e.extractRemainingSamples = function (t) {
                        var e,
                          r = t.audioTrack,
                          n = t.avcTrack,
                          i = t.id3Track,
                          a = n.pesData,
                          o = r.pesData,
                          l = i.pesData;
                        a && (e = s(a))
                          ? (this.parseAVCPES(e, !0), (n.pesData = null))
                          : (n.pesData = a),
                          o && (e = s(o))
                            ? (r.isAAC ? this.parseAACPES(e) : this.parseMPEGPES(e),
                              (r.pesData = null))
                            : (null != o &&
                                o.size &&
                                m.logger.log(
                                  'last AAC PES packet truncated,might overlap between fragments'
                                ),
                              (r.pesData = o)),
                          l && (e = s(l))
                            ? (this.parseID3PES(e), (i.pesData = null))
                            : (i.pesData = l);
                      }),
                      (e.demuxSampleAes = function (t, e, r) {
                        var n = this.demux(t, r, !0, !this.config.progressive),
                          i = (this.sampleAes = new v.default(this.observer, this.config, e));
                        return this.decrypt(n, i);
                      }),
                      (e.decrypt = function (t, e) {
                        return new Promise(function (r) {
                          var n = t.audioTrack,
                            i = t.avcTrack;
                          n.samples && n.isAAC
                            ? e.decryptAacSamples(n.samples, 0, function () {
                                i.samples
                                  ? e.decryptAvcSamples(i.samples, 0, 0, function () {
                                      r(t);
                                    })
                                  : r(t);
                              })
                            : i.samples &&
                              e.decryptAvcSamples(i.samples, 0, 0, function () {
                                r(t);
                              });
                        });
                      }),
                      (e.destroy = function () {
                        (this._initPTS = this._initDTS = null), (this._duration = 0);
                      }),
                      (e.parseAVCPES = function (t, e) {
                        var r,
                          i = this,
                          a = this._avcTrack,
                          s = this.parseAVCNALu(t.data),
                          c = this.avcSample,
                          d = !1;
                        (t.data = null),
                          c &&
                            s.length &&
                            !a.audFound &&
                            (o(c, a), (c = this.avcSample = n(!1, t.pts, t.dts, ''))),
                          s.forEach(function (e) {
                            switch (e.type) {
                              case 1:
                                (r = !0),
                                  c || (c = i.avcSample = n(!0, t.pts, t.dts, '')),
                                  (c.frame = !0);
                                var s = e.data;
                                if (d && 4 < s.length) {
                                  var v = new f.default(s).readSliceType();
                                  (2 === v || 4 === v || 7 === v || 9 === v) && (c.key = !0);
                                }
                                break;
                              case 5:
                                (r = !0),
                                  c || (c = i.avcSample = n(!0, t.pts, t.dts, '')),
                                  (c.key = !0),
                                  (c.frame = !0);
                                break;
                              case 6:
                                r = !0;
                                var g = new f.default(u(e.data));
                                g.readUByte();
                                for (
                                  var p = 0, m = 0, y = !1, b = 0;
                                  !y && 1 < g.bytesAvailable;

                                ) {
                                  p = 0;
                                  do {
                                    p += b = g.readUByte();
                                  } while (255 === b);
                                  m = 0;
                                  do {
                                    m += b = g.readUByte();
                                  } while (255 === b);
                                  if (4 === p && 0 !== g.bytesAvailable) {
                                    if (
                                      ((y = !0),
                                      181 === g.readUByte() &&
                                        49 === g.readUShort() &&
                                        1195456820 === g.readUInt() &&
                                        3 === g.readUByte())
                                    ) {
                                      for (
                                        var E = g.readUByte(),
                                          T = 31 & E,
                                          A = [E, g.readUByte()],
                                          S = 0;
                                        S < T;
                                        S++
                                      )
                                        A.push(g.readUByte()),
                                          A.push(g.readUByte()),
                                          A.push(g.readUByte());
                                      l(i._txtTrack.samples, { type: 3, pts: t.pts, bytes: A });
                                    }
                                  } else if (5 === p && 0 !== g.bytesAvailable) {
                                    if (((y = !0), 16 < m)) {
                                      for (var L = [], _ = 0; 16 > _; _++)
                                        L.push(g.readUByte().toString(16)),
                                          (3 == _ || 5 === _ || 7 === _ || 9 === _) && L.push('-');
                                      for (var k = m - 16, D = new Uint8Array(k), w = 0; w < k; w++)
                                        D[w] = g.readUByte();
                                      l(i._txtTrack.samples, {
                                        pts: t.pts,
                                        payloadType: p,
                                        uuid: L.join(''),
                                        userData: Object(h.utf8ArrayToStr)(D),
                                        userDataBytes: D,
                                      });
                                    }
                                  } else if (m < g.bytesAvailable)
                                    for (var R = 0; R < m; R++) g.readUByte();
                                }
                                break;
                              case 7:
                                if (((r = !0), (d = !0), !a.sps)) {
                                  var C = new f.default(e.data).readSPS();
                                  (a.width = C.width),
                                    (a.height = C.height),
                                    (a.pixelRatio = C.pixelRatio),
                                    (a.sps = [e.data]),
                                    (a.duration = i._duration);
                                  for (
                                    var x, I = e.data.subarray(1, 4), O = 'avc1.', P = 0;
                                    3 > P;
                                    P++
                                  )
                                    2 > (x = I[P].toString(16)).length && (x = '0' + x), (O += x);
                                  a.codec = O;
                                }
                                break;
                              case 8:
                                (r = !0), a.pps || (a.pps = [e.data]);
                                break;
                              case 9:
                                (r = !1),
                                  (a.audFound = !0),
                                  c && o(c, a),
                                  (c = i.avcSample = n(!1, t.pts, t.dts, ''));
                                break;
                              case 12:
                                r = !1;
                                break;
                              default:
                                (r = !1), c && (c.debug += 'unknown NAL ' + e.type + ' ');
                            }
                            c && r && c.units.push(e);
                          }),
                          e && c && (o(c, a), (this.avcSample = null));
                      }),
                      (e.getLastNalUnit = function () {
                        var t,
                          e,
                          r = this.avcSample;
                        if (!r || 0 === r.units.length) {
                          var n = this._avcTrack.samples;
                          r = n[n.length - 1];
                        }
                        if (null !== (t = r) && void 0 !== t && t.units) {
                          var i = r.units;
                          e = i[i.length - 1];
                        }
                        return e;
                      }),
                      (e.parseAVCNALu = function (t) {
                        var e,
                          r,
                          n = t.byteLength,
                          i = this._avcTrack,
                          a = i.naluState || 0,
                          s = a,
                          o = [],
                          l = 0,
                          u = -1,
                          c = 0;
                        for (-1 === a && ((u = 0), (c = 31 & t[0]), (a = 0), (l = 1)); l < n; )
                          if (((e = t[l++]), a))
                            if (1 !== a)
                              if (e)
                                if (1 === e) {
                                  if (0 <= u) {
                                    var d = { data: t.subarray(u, l - a - 1), type: c };
                                    o.push(d);
                                  } else {
                                    var f = this.getLastNalUnit();
                                    if (
                                      f &&
                                      (s &&
                                        l <= 4 - s &&
                                        f.state &&
                                        (f.data = f.data.subarray(0, f.data.byteLength - s)),
                                      0 < (r = l - a - 1))
                                    ) {
                                      var h = new Uint8Array(f.data.byteLength + r);
                                      h.set(f.data, 0),
                                        h.set(t.subarray(0, r), f.data.byteLength),
                                        (f.data = h),
                                        (f.state = 0);
                                    }
                                  }
                                  l < n ? ((u = l), (c = 31 & t[l]), (a = 0)) : (a = -1);
                                } else a = 0;
                              else a = 3;
                            else a = e ? 0 : 2;
                          else a = e ? 0 : 1;
                        if (0 <= u && 0 <= a) {
                          var v = { data: t.subarray(u, n), type: c, state: a };
                          o.push(v);
                        }
                        if (0 === o.length) {
                          var g = this.getLastNalUnit();
                          if (g) {
                            var p = new Uint8Array(g.data.byteLength + t.byteLength);
                            p.set(g.data, 0), p.set(t, g.data.byteLength), (g.data = p);
                          }
                        }
                        return (i.naluState = a), o;
                      }),
                      (e.parseAACPES = function (t) {
                        var e,
                          r,
                          n,
                          i,
                          a,
                          s = 0,
                          o = this._audioTrack,
                          l = this.aacOverFlow,
                          u = t.data;
                        if (l) {
                          this.aacOverFlow = null;
                          var d = l.sample.unit.byteLength,
                            f = Math.min(l.missing, d),
                            h = d - f;
                          l.sample.unit.set(u.subarray(0, f), h),
                            o.samples.push(l.sample),
                            (s = l.missing);
                        }
                        for (e = s, r = u.length; e < r - 1 && !c.isHeader(u, e); e++);
                        if (
                          e === s ||
                          (e < r - 1
                            ? ((n = 'AAC PES did not start with ADTS header,offset:' + e), (i = !1))
                            : ((n = 'no ADTS header found in AAC PES'), (i = !0)),
                          m.logger.warn('parsing error:' + n),
                          this.observer.emit(g.Events.ERROR, g.Events.ERROR, {
                            type: y.ErrorTypes.MEDIA_ERROR,
                            details: y.ErrorDetails.FRAG_PARSING_ERROR,
                            fatal: i,
                            reason: n,
                          }),
                          !i)
                        ) {
                          if (
                            (c.initTrackConfig(o, this.observer, u, e, this.audioCodec),
                            void 0 !== t.pts)
                          )
                            a = t.pts;
                          else {
                            if (!l) return void m.logger.warn('[tsdemuxer]: AAC PES unknown PTS');
                            var v = c.getFrameDuration(o.samplerate);
                            a = l.sample.pts + v;
                          }
                          for (var p = 0; e < r; ) {
                            if (c.isHeader(u, e)) {
                              if (e + 5 < r) {
                                var b = c.appendFrame(o, u, e, a, p);
                                if (b) {
                                  if (!b.missing) {
                                    (e += b.length), p++;
                                    continue;
                                  }
                                  this.aacOverFlow = b;
                                }
                              }
                              break;
                            }
                            e++;
                          }
                        }
                      }),
                      (e.parseMPEGPES = function (t) {
                        var e = t.data,
                          r = e.length,
                          n = 0,
                          i = 0,
                          a = t.pts;
                        if (void 0 !== a)
                          for (; i < r; )
                            if (d.isHeader(e, i)) {
                              var s = d.appendFrame(this._audioTrack, e, i, a, n);
                              if (!s) break;
                              (i += s.length), n++;
                            } else i++;
                        else m.logger.warn('[tsdemuxer]: MPEG PES unknown PTS');
                      }),
                      (e.parseID3PES = function (t) {
                        return void 0 === t.pts
                          ? void m.logger.warn('[tsdemuxer]: ID3 PES unknown PTS')
                          : void this._id3Track.samples.push(t);
                      }),
                      t
                    );
                  })();
                (E.minProbeByteLength = 188), (e.default = E);
              },
              './src/empty.js': function (t, e) {
                t.exports = void 0;
              },
              './src/errors.ts': function (t, e, r) {
                'use strict';
                var n, i;
                r.r(e),
                  r.d(e, 'ErrorTypes', function () {
                    return n;
                  }),
                  r.d(e, 'ErrorDetails', function () {
                    return i;
                  }),
                  (function (t) {
                    (t.NETWORK_ERROR = 'networkError'),
                      (t.MEDIA_ERROR = 'mediaError'),
                      (t.KEY_SYSTEM_ERROR = 'keySystemError'),
                      (t.MUX_ERROR = 'muxError'),
                      (t.OTHER_ERROR = 'otherError');
                  })(n || (n = {})),
                  (function (t) {
                    (t.KEY_SYSTEM_NO_KEYS = 'keySystemNoKeys'),
                      (t.KEY_SYSTEM_NO_ACCESS = 'keySystemNoAccess'),
                      (t.KEY_SYSTEM_NO_SESSION = 'keySystemNoSession'),
                      (t.KEY_SYSTEM_LICENSE_REQUEST_FAILED = 'keySystemLicenseRequestFailed'),
                      (t.KEY_SYSTEM_NO_INIT_DATA = 'keySystemNoInitData'),
                      (t.MANIFEST_LOAD_ERROR = 'manifestLoadError'),
                      (t.MANIFEST_LOAD_TIMEOUT = 'manifestLoadTimeOut'),
                      (t.MANIFEST_PARSING_ERROR = 'manifestParsingError'),
                      (t.MANIFEST_INCOMPATIBLE_CODECS_ERROR = 'manifestIncompatibleCodecsError'),
                      (t.LEVEL_EMPTY_ERROR = 'levelEmptyError'),
                      (t.LEVEL_LOAD_ERROR = 'levelLoadError'),
                      (t.LEVEL_LOAD_TIMEOUT = 'levelLoadTimeOut'),
                      (t.LEVEL_SWITCH_ERROR = 'levelSwitchError'),
                      (t.AUDIO_TRACK_LOAD_ERROR = 'audioTrackLoadError'),
                      (t.AUDIO_TRACK_LOAD_TIMEOUT = 'audioTrackLoadTimeOut'),
                      (t.SUBTITLE_LOAD_ERROR = 'subtitleTrackLoadError'),
                      (t.SUBTITLE_TRACK_LOAD_TIMEOUT = 'subtitleTrackLoadTimeOut'),
                      (t.FRAG_LOAD_ERROR = 'fragLoadError'),
                      (t.FRAG_LOAD_TIMEOUT = 'fragLoadTimeOut'),
                      (t.FRAG_DECRYPT_ERROR = 'fragDecryptError'),
                      (t.FRAG_PARSING_ERROR = 'fragParsingError'),
                      (t.REMUX_ALLOC_ERROR = 'remuxAllocError'),
                      (t.KEY_LOAD_ERROR = 'keyLoadError'),
                      (t.KEY_LOAD_TIMEOUT = 'keyLoadTimeOut'),
                      (t.BUFFER_ADD_CODEC_ERROR = 'bufferAddCodecError'),
                      (t.BUFFER_INCOMPATIBLE_CODECS_ERROR = 'bufferIncompatibleCodecsError'),
                      (t.BUFFER_APPEND_ERROR = 'bufferAppendError'),
                      (t.BUFFER_APPENDING_ERROR = 'bufferAppendingError'),
                      (t.BUFFER_STALLED_ERROR = 'bufferStalledError'),
                      (t.BUFFER_FULL_ERROR = 'bufferFullError'),
                      (t.BUFFER_SEEK_OVER_HOLE = 'bufferSeekOverHole'),
                      (t.BUFFER_NUDGE_ON_STALL = 'bufferNudgeOnStall'),
                      (t.INTERNAL_EXCEPTION = 'internalException'),
                      (t.INTERNAL_ABORTED = 'aborted'),
                      (t.UNKNOWN = 'unknown');
                  })(i || (i = {}));
              },
              './src/events.ts': function (t, e, r) {
                'use strict';
                var n;
                r.r(e),
                  r.d(e, 'Events', function () {
                    return n;
                  }),
                  (function (t) {
                    (t.MEDIA_ATTACHING = 'hlsMediaAttaching'),
                      (t.MEDIA_ATTACHED = 'hlsMediaAttached'),
                      (t.MEDIA_DETACHING = 'hlsMediaDetaching'),
                      (t.MEDIA_DETACHED = 'hlsMediaDetached'),
                      (t.BUFFER_RESET = 'hlsBufferReset'),
                      (t.BUFFER_CODECS = 'hlsBufferCodecs'),
                      (t.BUFFER_CREATED = 'hlsBufferCreated'),
                      (t.BUFFER_APPENDING = 'hlsBufferAppending'),
                      (t.BUFFER_APPENDED = 'hlsBufferAppended'),
                      (t.BUFFER_EOS = 'hlsBufferEos'),
                      (t.BUFFER_FLUSHING = 'hlsBufferFlushing'),
                      (t.BUFFER_FLUSHED = 'hlsBufferFlushed'),
                      (t.MANIFEST_LOADING = 'hlsManifestLoading'),
                      (t.MANIFEST_LOADED = 'hlsManifestLoaded'),
                      (t.MANIFEST_PARSED = 'hlsManifestParsed'),
                      (t.LEVEL_SWITCHING = 'hlsLevelSwitching'),
                      (t.LEVEL_SWITCHED = 'hlsLevelSwitched'),
                      (t.LEVEL_LOADING = 'hlsLevelLoading'),
                      (t.LEVEL_LOADED = 'hlsLevelLoaded'),
                      (t.LEVEL_UPDATED = 'hlsLevelUpdated'),
                      (t.LEVEL_PTS_UPDATED = 'hlsLevelPtsUpdated'),
                      (t.LEVELS_UPDATED = 'hlsLevelsUpdated'),
                      (t.AUDIO_TRACKS_UPDATED = 'hlsAudioTracksUpdated'),
                      (t.AUDIO_TRACK_SWITCHING = 'hlsAudioTrackSwitching'),
                      (t.AUDIO_TRACK_SWITCHED = 'hlsAudioTrackSwitched'),
                      (t.AUDIO_TRACK_LOADING = 'hlsAudioTrackLoading'),
                      (t.AUDIO_TRACK_LOADED = 'hlsAudioTrackLoaded'),
                      (t.SUBTITLE_TRACKS_UPDATED = 'hlsSubtitleTracksUpdated'),
                      (t.SUBTITLE_TRACKS_CLEARED = 'hlsSubtitleTracksCleared'),
                      (t.SUBTITLE_TRACK_SWITCH = 'hlsSubtitleTrackSwitch'),
                      (t.SUBTITLE_TRACK_LOADING = 'hlsSubtitleTrackLoading'),
                      (t.SUBTITLE_TRACK_LOADED = 'hlsSubtitleTrackLoaded'),
                      (t.SUBTITLE_FRAG_PROCESSED = 'hlsSubtitleFragProcessed'),
                      (t.CUES_PARSED = 'hlsCuesParsed'),
                      (t.NON_NATIVE_TEXT_TRACKS_FOUND = 'hlsNonNativeTextTracksFound'),
                      (t.INIT_PTS_FOUND = 'hlsInitPtsFound'),
                      (t.FRAG_LOADING = 'hlsFragLoading'),
                      (t.FRAG_LOAD_EMERGENCY_ABORTED = 'hlsFragLoadEmergencyAborted'),
                      (t.FRAG_LOADED = 'hlsFragLoaded'),
                      (t.FRAG_DECRYPTED = 'hlsFragDecrypted'),
                      (t.FRAG_PARSING_INIT_SEGMENT = 'hlsFragParsingInitSegment'),
                      (t.FRAG_PARSING_USERDATA = 'hlsFragParsingUserdata'),
                      (t.FRAG_PARSING_METADATA = 'hlsFragParsingMetadata'),
                      (t.FRAG_PARSED = 'hlsFragParsed'),
                      (t.FRAG_BUFFERED = 'hlsFragBuffered'),
                      (t.FRAG_CHANGED = 'hlsFragChanged'),
                      (t.FPS_DROP = 'hlsFpsDrop'),
                      (t.FPS_DROP_LEVEL_CAPPING = 'hlsFpsDropLevelCapping'),
                      (t.ERROR = 'hlsError'),
                      (t.DESTROYING = 'hlsDestroying'),
                      (t.KEY_LOADING = 'hlsKeyLoading'),
                      (t.KEY_LOADED = 'hlsKeyLoaded'),
                      (t.LIVE_BACK_BUFFER_REACHED = 'hlsLiveBackBufferReached'),
                      (t.BACK_BUFFER_REACHED = 'hlsBackBufferReached');
                  })(n || (n = {}));
              },
              './src/hls.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return y;
                  });
                var i = r('./node_modules/url-toolkit/src/url-toolkit.js'),
                  a = r('./src/loader/playlist-loader.ts'),
                  s = r('./src/loader/key-loader.ts'),
                  o = r('./src/controller/id3-track-controller.ts'),
                  l = r('./src/controller/latency-controller.ts'),
                  u = r('./src/controller/level-controller.ts'),
                  c = r('./src/controller/fragment-tracker.ts'),
                  d = r('./src/controller/stream-controller.ts'),
                  f = r('./src/is-supported.ts'),
                  h = r('./src/utils/logger.ts'),
                  v = r('./src/config.ts'),
                  g = r('./node_modules/eventemitter3/index.js'),
                  p = r('./src/events.ts'),
                  m = r('./src/errors.ts'),
                  y = (function () {
                    function t(e) {
                      void 0 === e && (e = {});
                      this.config = void 0;
                      this.userConfig = void 0;
                      this.coreComponents = void 0;
                      this.networkControllers = void 0;
                      this._emitter = new g.EventEmitter();
                      this._autoLevelCapping = void 0;
                      this.abrController = void 0;
                      this.bufferController = void 0;
                      this.capLevelController = void 0;
                      this.latencyController = void 0;
                      this.levelController = void 0;
                      this.streamController = void 0;
                      this.audioTrackController = void 0;
                      this.subtitleTrackController = void 0;
                      this.emeController = void 0;
                      this.cmcdController = void 0;
                      this._media = null;
                      this.url = null;

                      var r = (this.config = Object(v.mergeConfig)(t.DefaultConfig, e));
                      this.userConfig = e;
                      Object(h.enableLogs)(r.debug);
                      this._autoLevelCapping = -1;
                      r.progressive && Object(v.enableStreamingMode)(r);

                      var n = r.abrController;
                      var i = r.bufferController;
                      var f = r.capLevelController;
                      var p = r.fpsController;
                      var m = (this.abrController = new n(this));
                      var y = (this.bufferController = new i(this));
                      var b = (this.capLevelController = new f(this));
                      var E = new p(this);
                      var T = new a.default(this);
                      var A = new s.default(this);
                      var S = new o.default(this);
                      var L = (this.levelController = new u.default(this));
                      var _ = new c.FragmentTracker(this);
                      var k = (this.streamController = new d.default(this, _));

                      b.setStreamController(k), E.setStreamController(k);
                      var D = [L, k];
                      this.networkControllers = D;
                      var w = [T, A, m, y, b, E, S, _];

                      this.audioTrackController = this.createController(
                        r.audioTrackController,
                        null,
                        D
                      );
                      this.createController(r.audioStreamController, _, D);
                      this.subtitleTrackController = this.createController(
                        r.subtitleTrackController,
                        null,
                        D
                      );
                      this.createController(r.subtitleStreamController, _, D);
                      this.createController(r.timelineController, null, w);
                      this.emeController = this.createController(r.emeController, null, w);
                      this.cmcdController = this.createController(r.cmcdController, null, w);
                      this.latencyController = this.createController(l.default, null, w);
                      this.coreComponents = w;
                    }
                    t.isSupported = function () {
                      return Object(f.isSupported)();
                    };
                    var e,
                      r,
                      y,
                      b = t.prototype;
                    return (
                      (b.createController = function (t, e, r) {
                        if (t) {
                          var n = e ? new t(this, e) : new t(this);
                          return r && r.push(n), n;
                        }
                        return null;
                      }),
                      (b.on = function (t, e, r) {
                        void 0 === r && (r = this), this._emitter.on(t, e, r);
                      }),
                      (b.once = function (t, e, r) {
                        void 0 === r && (r = this), this._emitter.once(t, e, r);
                      }),
                      (b.removeAllListeners = function (t) {
                        this._emitter.removeAllListeners(t);
                      }),
                      (b.off = function (t, e, r, n) {
                        void 0 === r && (r = this), this._emitter.off(t, e, r, n);
                      }),
                      (b.listeners = function (t) {
                        return this._emitter.listeners(t);
                      }),
                      (b.emit = function (t, e, r) {
                        return this._emitter.emit(t, e, r);
                      }),
                      (b.trigger = function (t, e) {
                        if (this.config.debug) return this.emit(t, t, e);
                        try {
                          return this.emit(t, t, e);
                        } catch (e) {
                          h.logger.error(
                            'An internal error happened while handling event ' +
                              t +
                              '. Error message: "' +
                              e.message +
                              '". Here is a stacktrace:',
                            e
                          ),
                            this.trigger(p.Events.ERROR, {
                              type: m.ErrorTypes.OTHER_ERROR,
                              details: m.ErrorDetails.INTERNAL_EXCEPTION,
                              fatal: !1,
                              event: t,
                              error: e,
                            });
                        }
                        return !1;
                      }),
                      (b.listenerCount = function (t) {
                        return this._emitter.listenerCount(t);
                      }),
                      (b.destroy = function () {
                        h.logger.log('destroy'),
                          this.trigger(p.Events.DESTROYING, void 0),
                          this.detachMedia(),
                          this.removeAllListeners(),
                          (this._autoLevelCapping = -1),
                          (this.url = null),
                          this.networkControllers.forEach(function (t) {
                            return t.destroy();
                          }),
                          (this.networkControllers.length = 0),
                          this.coreComponents.forEach(function (t) {
                            return t.destroy();
                          }),
                          (this.coreComponents.length = 0);
                      }),
                      (b.attachMedia = function (t) {
                        h.logger.log('attachMedia'),
                          (this._media = t),
                          this.trigger(p.Events.MEDIA_ATTACHING, { media: t });
                      }),
                      (b.detachMedia = function () {
                        h.logger.log('detachMedia'),
                          this.trigger(p.Events.MEDIA_DETACHING, void 0),
                          (this._media = null);
                      }),
                      (b.loadSource = function (t) {
                        this.stopLoad();
                        var e = this.media;
                        var r = this.url;
                        var n = (this.url = i.buildAbsoluteURL(self.location.href, t, {
                          alwaysNormalize: !0,
                        }));
                        h.logger.log('loadSource:' + n),
                          e &&
                            r &&
                            r !== n &&
                            this.bufferController.hasSourceTypes() &&
                            (this.detachMedia(), this.attachMedia(e));
                        this.trigger(p.Events.MANIFEST_LOADING, { url: t });
                      }),
                      (b.startLoad = function (t) {
                        void 0 === t && (t = -1);
                        h.logger.log('startLoad(' + t + ')');
                        this.networkControllers.forEach(function (e) {
                          e.startLoad(t);
                        });
                      }),
                      (b.stopLoad = function () {
                        h.logger.log('stopLoad'),
                          this.networkControllers.forEach(function (t) {
                            t.stopLoad();
                          });
                      }),
                      (b.swapAudioCodec = function () {
                        h.logger.log('swapAudioCodec'), this.streamController.swapAudioCodec();
                      }),
                      (b.recoverMediaError = function () {
                        h.logger.log('recoverMediaError');
                        var t = this._media;
                        this.detachMedia(), t && this.attachMedia(t);
                      }),
                      (b.removeLevel = function (t, e) {
                        void 0 === e && (e = 0), this.levelController.removeLevel(t, e);
                      }),
                      (e = t),
                      (y = [
                        {
                          key: 'version',
                          get: function () {
                            return '1.1.2';
                          },
                        },
                        {
                          key: 'Events',
                          get: function () {
                            return p.Events;
                          },
                        },
                        {
                          key: 'ErrorTypes',
                          get: function () {
                            return m.ErrorTypes;
                          },
                        },
                        {
                          key: 'ErrorDetails',
                          get: function () {
                            return m.ErrorDetails;
                          },
                        },
                        {
                          key: 'DefaultConfig',
                          get: function () {
                            return t.defaultConfig ? t.defaultConfig : v.hlsDefaultConfig;
                          },
                          set: function (e) {
                            t.defaultConfig = e;
                          },
                        },
                      ]),
                      (r = [
                        {
                          key: 'levels',
                          get: function () {
                            var t = this.levelController.levels;
                            return t || [];
                          },
                        },
                        {
                          key: 'currentLevel',
                          get: function () {
                            return this.streamController.currentLevel;
                          },
                          set: function (t) {
                            h.logger.log('set currentLevel:' + t),
                              (this.loadLevel = t),
                              this.abrController.clearTimer(),
                              this.streamController.immediateLevelSwitch();
                          },
                        },
                        {
                          key: 'nextLevel',
                          get: function () {
                            return this.streamController.nextLevel;
                          },
                          set: function (t) {
                            h.logger.log('set nextLevel:' + t),
                              (this.levelController.manualLevel = t),
                              this.streamController.nextLevelSwitch();
                          },
                        },
                        {
                          key: 'loadLevel',
                          get: function () {
                            return this.levelController.level;
                          },
                          set: function (t) {
                            h.logger.log('set loadLevel:' + t),
                              (this.levelController.manualLevel = t);
                          },
                        },
                        {
                          key: 'nextLoadLevel',
                          get: function () {
                            return this.levelController.nextLoadLevel;
                          },
                          set: function (t) {
                            this.levelController.nextLoadLevel = t;
                          },
                        },
                        {
                          key: 'firstLevel',
                          get: function () {
                            return Math.max(this.levelController.firstLevel, this.minAutoLevel);
                          },
                          set: function (t) {
                            h.logger.log('set firstLevel:' + t),
                              (this.levelController.firstLevel = t);
                          },
                        },
                        {
                          key: 'startLevel',
                          get: function () {
                            return this.levelController.startLevel;
                          },
                          set: function (t) {
                            h.logger.log('set startLevel:' + t),
                              -1 !== t && (t = Math.max(t, this.minAutoLevel)),
                              (this.levelController.startLevel = t);
                          },
                        },
                        {
                          key: 'capLevelToPlayerSize',
                          get: function () {
                            return this.config.capLevelToPlayerSize;
                          },
                          set: function (t) {
                            var e = !!t;
                            e !== this.config.capLevelToPlayerSize &&
                              (e
                                ? this.capLevelController.startCapping()
                                : (this.capLevelController.stopCapping(),
                                  (this.autoLevelCapping = -1),
                                  this.streamController.nextLevelSwitch()),
                              (this.config.capLevelToPlayerSize = e));
                          },
                        },
                        {
                          key: 'autoLevelCapping',
                          get: function () {
                            return this._autoLevelCapping;
                          },
                          set: function (t) {
                            this._autoLevelCapping !== t &&
                              (h.logger.log('set autoLevelCapping:' + t),
                              (this._autoLevelCapping = t));
                          },
                        },
                        {
                          key: 'bandwidthEstimate',
                          get: function () {
                            var t = this.abrController.bwEstimator;
                            return t ? t.getEstimate() : NaN;
                          },
                        },
                        {
                          key: 'autoLevelEnabled',
                          get: function () {
                            return -1 === this.levelController.manualLevel;
                          },
                        },
                        {
                          key: 'manualLevel',
                          get: function () {
                            return this.levelController.manualLevel;
                          },
                        },
                        {
                          key: 'minAutoLevel',
                          get: function () {
                            var t = this.levels,
                              e = this.config.minAutoBitrate;
                            if (!t) return 0;
                            for (var r = t.length, n = 0; n < r; n++)
                              if (t[n].maxBitrate > e) return n;
                            return 0;
                          },
                        },
                        {
                          key: 'maxAutoLevel',
                          get: function () {
                            var t = this.levels,
                              e = this.autoLevelCapping;
                            return -1 === e && t && t.length ? t.length - 1 : e;
                          },
                        },
                        {
                          key: 'nextAutoLevel',
                          get: function () {
                            return Math.min(
                              Math.max(this.abrController.nextAutoLevel, this.minAutoLevel),
                              this.maxAutoLevel
                            );
                          },
                          set: function (t) {
                            this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, t);
                          },
                        },
                        {
                          key: 'audioTracks',
                          get: function () {
                            var t = this.audioTrackController;
                            if (t) {
                              return t.audioTracks;
                            } else {
                              return [];
                            }
                          },
                        },
                        {
                          key: 'audioTrack',
                          get: function () {
                            var t = this.audioTrackController;
                            return t ? t.audioTrack : -1;
                          },
                          set: function (t) {
                            var e = this.audioTrackController;
                            e && (e.audioTrack = t);
                          },
                        },
                        {
                          key: 'subtitleTracks',
                          get: function () {
                            var t = this.subtitleTrackController;
                            return t ? t.subtitleTracks : [];
                          },
                        },
                        {
                          key: 'subtitleTrack',
                          get: function () {
                            var t = this.subtitleTrackController;
                            return t ? t.subtitleTrack : -1;
                          },
                          set: function (t) {
                            var e = this.subtitleTrackController;
                            e && (e.subtitleTrack = t);
                          },
                        },
                        {
                          key: 'media',
                          get: function () {
                            return this._media;
                          },
                        },
                        {
                          key: 'subtitleDisplay',
                          get: function () {
                            var t = this.subtitleTrackController;
                            return !!t && t.subtitleDisplay;
                          },
                          set: function (t) {
                            var e = this.subtitleTrackController;
                            e && (e.subtitleDisplay = t);
                          },
                        },
                        {
                          key: 'lowLatencyMode',
                          get: function () {
                            return this.config.lowLatencyMode;
                          },
                          set: function (t) {
                            this.config.lowLatencyMode = t;
                          },
                        },
                        {
                          key: 'liveSyncPosition',
                          get: function () {
                            return this.latencyController.liveSyncPosition;
                          },
                        },
                        {
                          key: 'latency',
                          get: function () {
                            return this.latencyController.latency;
                          },
                        },
                        {
                          key: 'maxLatency',
                          get: function () {
                            return this.latencyController.maxLatency;
                          },
                        },
                        {
                          key: 'targetLatency',
                          get: function () {
                            return this.latencyController.targetLatency;
                          },
                        },
                        {
                          key: 'drift',
                          get: function () {
                            return this.latencyController.drift;
                          },
                        },
                        {
                          key: 'forceStartLoad',
                          get: function () {
                            return this.streamController.forceStartLoad;
                          },
                        },
                      ]) && n(e.prototype, r),
                      y && n(e, y),
                      t
                    );
                  })();
                y.defaultConfig = void 0;
              },
              './src/is-supported.ts': function (t, e, r) {
                'use strict';
                function n() {
                  return self.SourceBuffer || self.WebKitSourceBuffer;
                }
                function i() {
                  var t = Object(s.getMediaSource)();
                  if (!t) return !1;
                  var e = n(),
                    r =
                      t &&
                      'function' == typeof t.isTypeSupported &&
                      t.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'),
                    i =
                      !e ||
                      (e.prototype &&
                        'function' == typeof e.prototype.appendBuffer &&
                        'function' == typeof e.prototype.remove);
                  return !!r && !!i;
                }
                function a() {
                  var t,
                    e = n();
                  return (
                    'function' ==
                    typeof (null == e || null === (t = e.prototype) || void 0 === t
                      ? void 0
                      : t.changeType)
                  );
                }
                r.r(e),
                  r.d(e, 'isSupported', function () {
                    return i;
                  }),
                  r.d(e, 'changeTypeSupported', function () {
                    return a;
                  });
                var s = r('./src/utils/mediasource-helper.ts');
              },
              './src/loader/fragment-loader.ts': function (t, e, r) {
                'use strict';
                function n(t) {
                  var e = 'function' == typeof Map ? new Map() : void 0;
                  return (n = function (t) {
                    function r() {
                      return i(t, arguments, o(this).constructor);
                    }
                    if (
                      null === t ||
                      ((n = t), -1 === Function.toString.call(n).indexOf('[native code]'))
                    )
                      return t;
                    var n;
                    if ('function' != typeof t)
                      throw new TypeError('Super expression must either be null or a function');
                    if (void 0 !== e) {
                      if (e.has(t)) return e.get(t);
                      e.set(t, r);
                    }
                    return (
                      (r.prototype = Object.create(t.prototype, {
                        constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 },
                      })),
                      s(r, t)
                    );
                  })(t);
                }
                function i(t, e, r) {
                  return (i = a()
                    ? Reflect.construct
                    : function (t, e, r) {
                        var n = [null];
                        n.push.apply(n, e);
                        var i = new (Function.bind.apply(t, n))();
                        return r && s(i, r.prototype), i;
                      }).apply(null, arguments);
                }
                function a() {
                  if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
                  if (Reflect.construct.sham) return !1;
                  if ('function' == typeof Proxy) return !0;
                  try {
                    return (
                      Boolean.prototype.valueOf.call(
                        Reflect.construct(Boolean, [], function () {})
                      ),
                      !0
                    );
                  } catch (t) {
                    return !1;
                  }
                }
                function s(t, e) {
                  return (s =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                function o(t) {
                  return (o = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
                }
                function l(t, e) {
                  void 0 === e && (e = null);
                  var r = e || t,
                    n = {
                      frag: t,
                      part: e,
                      responseType: 'arraybuffer',
                      url: r.url,
                      headers: {},
                      rangeStart: 0,
                      rangeEnd: 0,
                    },
                    i = r.byteRangeStartOffset,
                    a = r.byteRangeEndOffset;
                  return (
                    Object(u.isFiniteNumber)(i) &&
                      Object(u.isFiniteNumber)(a) &&
                      ((n.rangeStart = i), (n.rangeEnd = a)),
                    n
                  );
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return d;
                  }),
                  r.d(e, 'LoadError', function () {
                    return f;
                  });
                var u = r('./src/polyfills/number.ts'),
                  c = r('./src/errors.ts'),
                  d =
                    (Math.pow(2, 17),
                    (function () {
                      function t(t) {
                        (this.config = void 0),
                          (this.loader = null),
                          (this.partLoadTimeout = -1),
                          (this.config = t);
                      }
                      var e = t.prototype;
                      return (
                        (e.destroy = function () {
                          this.loader && (this.loader.destroy(), (this.loader = null));
                        }),
                        (e.abort = function () {
                          this.loader && this.loader.abort();
                        }),
                        (e.load = function (t, e) {
                          var r = this,
                            n = t.url;
                          if (!n)
                            return Promise.reject(
                              new f(
                                {
                                  type: c.ErrorTypes.NETWORK_ERROR,
                                  details: c.ErrorDetails.FRAG_LOAD_ERROR,
                                  fatal: !1,
                                  frag: t,
                                  networkDetails: null,
                                },
                                'Fragment does not have a ' + (n ? 'part list' : 'url')
                              )
                            );
                          this.abort();
                          var i = this.config,
                            a = i.fLoader,
                            s = i.loader;
                          return new Promise(function (n, o) {
                            r.loader && r.loader.destroy();
                            var u = (r.loader = t.loader = a ? new a(i) : new s(i)),
                              d = l(t),
                              h = {
                                timeout: i.fragLoadingTimeOut,
                                maxRetry: 0,
                                retryDelay: 0,
                                maxRetryDelay: i.fragLoadingMaxRetryTimeout,
                                highWaterMark: 131072,
                              };
                            (t.stats = u.stats),
                              u.load(d, h, {
                                onSuccess: function (e, i, a, s) {
                                  r.resetLoader(t, u),
                                    n({ frag: t, part: null, payload: e.data, networkDetails: s });
                                },
                                onError: function (e, n, i) {
                                  r.resetLoader(t, u),
                                    o(
                                      new f({
                                        type: c.ErrorTypes.NETWORK_ERROR,
                                        details: c.ErrorDetails.FRAG_LOAD_ERROR,
                                        fatal: !1,
                                        frag: t,
                                        response: e,
                                        networkDetails: i,
                                      })
                                    );
                                },
                                onAbort: function (e, n, i) {
                                  r.resetLoader(t, u),
                                    o(
                                      new f({
                                        type: c.ErrorTypes.NETWORK_ERROR,
                                        details: c.ErrorDetails.INTERNAL_ABORTED,
                                        fatal: !1,
                                        frag: t,
                                        networkDetails: i,
                                      })
                                    );
                                },
                                onTimeout: function (e, n, i) {
                                  r.resetLoader(t, u),
                                    o(
                                      new f({
                                        type: c.ErrorTypes.NETWORK_ERROR,
                                        details: c.ErrorDetails.FRAG_LOAD_TIMEOUT,
                                        fatal: !1,
                                        frag: t,
                                        networkDetails: i,
                                      })
                                    );
                                },
                                onProgress: function (r, n, i, a) {
                                  e && e({ frag: t, part: null, payload: i, networkDetails: a });
                                },
                              });
                          });
                        }),
                        (e.loadPart = function (t, e, r) {
                          var n = this;
                          this.abort();
                          var i = this.config,
                            a = i.fLoader,
                            s = i.loader;
                          return new Promise(function (o, u) {
                            n.loader && n.loader.destroy();
                            var d = (n.loader = t.loader = a ? new a(i) : new s(i)),
                              h = l(t, e),
                              v = {
                                timeout: i.fragLoadingTimeOut,
                                maxRetry: 0,
                                retryDelay: 0,
                                maxRetryDelay: i.fragLoadingMaxRetryTimeout,
                                highWaterMark: 131072,
                              };
                            (e.stats = d.stats),
                              d.load(h, v, {
                                onSuccess: function (i, a, s, l) {
                                  n.resetLoader(t, d), n.updateStatsFromPart(t, e);
                                  var u = { frag: t, part: e, payload: i.data, networkDetails: l };
                                  r(u), o(u);
                                },
                                onError: function (r, i, a) {
                                  n.resetLoader(t, d),
                                    u(
                                      new f({
                                        type: c.ErrorTypes.NETWORK_ERROR,
                                        details: c.ErrorDetails.FRAG_LOAD_ERROR,
                                        fatal: !1,
                                        frag: t,
                                        part: e,
                                        response: r,
                                        networkDetails: a,
                                      })
                                    );
                                },
                                onAbort: function (r, i, a) {
                                  (t.stats.aborted = e.stats.aborted),
                                    n.resetLoader(t, d),
                                    u(
                                      new f({
                                        type: c.ErrorTypes.NETWORK_ERROR,
                                        details: c.ErrorDetails.INTERNAL_ABORTED,
                                        fatal: !1,
                                        frag: t,
                                        part: e,
                                        networkDetails: a,
                                      })
                                    );
                                },
                                onTimeout: function (r, i, a) {
                                  n.resetLoader(t, d),
                                    u(
                                      new f({
                                        type: c.ErrorTypes.NETWORK_ERROR,
                                        details: c.ErrorDetails.FRAG_LOAD_TIMEOUT,
                                        fatal: !1,
                                        frag: t,
                                        part: e,
                                        networkDetails: a,
                                      })
                                    );
                                },
                              });
                          });
                        }),
                        (e.updateStatsFromPart = function (t, e) {
                          var r = t.stats,
                            n = e.stats,
                            i = n.total;
                          if (((r.loaded += n.loaded), i)) {
                            var a = Math.round(t.duration / e.duration),
                              s = Math.min(Math.round(r.loaded / i), a),
                              o = (a - s) * Math.round(r.loaded / s);
                            r.total = r.loaded + o;
                          } else r.total = Math.max(r.loaded, r.total);
                          var l = r.loading,
                            u = n.loading;
                          l.start
                            ? (l.first += u.first - u.start)
                            : ((l.start = u.start), (l.first = u.first)),
                            (l.end = u.end);
                        }),
                        (e.resetLoader = function (t, e) {
                          (t.loader = null),
                            this.loader === e &&
                              (self.clearTimeout(this.partLoadTimeout), (this.loader = null)),
                            e.destroy();
                        }),
                        t
                      );
                    })()),
                  f = (function (t) {
                    function e(e) {
                      for (
                        var r, n = arguments.length, i = Array(1 < n ? n - 1 : 0), a = 1;
                        a < n;
                        a++
                      )
                        i[a - 1] = arguments[a];
                      return (
                        ((r = t.call.apply(t, [this].concat(i)) || this).data = void 0),
                        (r.data = e),
                        r
                      );
                    }
                    return (
                      (n = t),
                      ((r = e).prototype = Object.create(n.prototype)),
                      (r.prototype.constructor = r),
                      s(r, n),
                      e
                    );
                    var r, n;
                  })(n(Error));
              },
              './src/loader/fragment.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  (t.prototype = Object.create(e.prototype)),
                    (t.prototype.constructor = t),
                    i(t, e);
                }
                function i(t, e) {
                  return (i =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                function a(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                function s(t, e, r) {
                  return e && a(t.prototype, e), r && a(t, r), t;
                }
                r.r(e),
                  r.d(e, 'ElementaryStreamTypes', function () {
                    return o;
                  }),
                  r.d(e, 'BaseSegment', function () {
                    return h;
                  }),
                  r.d(e, 'Fragment', function () {
                    return v;
                  }),
                  r.d(e, 'Part', function () {
                    return g;
                  });
                var o,
                  l = r('./src/polyfills/number.ts'),
                  u = r('./node_modules/url-toolkit/src/url-toolkit.js'),
                  c = r('./src/utils/logger.ts'),
                  d = r('./src/loader/level-key.ts'),
                  f = r('./src/loader/load-stats.ts');
                !(function (t) {
                  (t.AUDIO = 'audio'), (t.VIDEO = 'video'), (t.AUDIOVIDEO = 'audiovideo');
                })(o || (o = {}));
                var h = (function () {
                    function t(t) {
                      var e;
                      (this._byteRange = null),
                        (this._url = null),
                        (this.baseurl = void 0),
                        (this.relurl = void 0),
                        (this.elementaryStreams =
                          (((e = {})[o.AUDIO] = null),
                          (e[o.VIDEO] = null),
                          (e[o.AUDIOVIDEO] = null),
                          e)),
                        (this.baseurl = t);
                    }
                    return (
                      (t.prototype.setByteRange = function (t, e) {
                        var r = t.split('@', 2),
                          n = [];
                        (n[0] = 1 === r.length ? (e ? e.byteRangeEndOffset : 0) : parseInt(r[1])),
                          (n[1] = parseInt(r[0]) + n[0]),
                          (this._byteRange = n);
                      }),
                      s(t, [
                        {
                          key: 'byteRange',
                          get: function () {
                            return this._byteRange ? this._byteRange : [];
                          },
                        },
                        {
                          key: 'byteRangeStartOffset',
                          get: function () {
                            return this.byteRange[0];
                          },
                        },
                        {
                          key: 'byteRangeEndOffset',
                          get: function () {
                            return this.byteRange[1];
                          },
                        },
                        {
                          key: 'url',
                          get: function () {
                            return (
                              !this._url &&
                                this.baseurl &&
                                this.relurl &&
                                (this._url = Object(u.buildAbsoluteURL)(this.baseurl, this.relurl, {
                                  alwaysNormalize: !0,
                                })),
                              this._url || ''
                            );
                          },
                          set: function (t) {
                            this._url = t;
                          },
                        },
                      ]),
                      t
                    );
                  })(),
                  v = (function (t) {
                    function e(e, r) {
                      var n;
                      return (
                        ((n = t.call(this, r) || this)._decryptdata = null),
                        (n.rawProgramDateTime = null),
                        (n.programDateTime = null),
                        (n.tagList = []),
                        (n.duration = 0),
                        (n.sn = 0),
                        (n.levelkey = void 0),
                        (n.type = void 0),
                        (n.loader = null),
                        (n.level = -1),
                        (n.cc = 0),
                        (n.startPTS = void 0),
                        (n.endPTS = void 0),
                        (n.appendedPTS = void 0),
                        (n.startDTS = void 0),
                        (n.endDTS = void 0),
                        (n.start = 0),
                        (n.deltaPTS = void 0),
                        (n.maxStartPTS = void 0),
                        (n.minEndPTS = void 0),
                        (n.stats = new f.LoadStats()),
                        (n.urlId = 0),
                        (n.data = void 0),
                        (n.bitrateTest = !1),
                        (n.title = null),
                        (n.initSegment = null),
                        (n.type = e),
                        n
                      );
                    }
                    n(e, t);
                    var r = e.prototype;
                    return (
                      (r.createInitializationVector = function (t) {
                        for (var e = new Uint8Array(16), r = 12; 16 > r; r++)
                          e[r] = 255 & (t >> (8 * (15 - r)));
                        return e;
                      }),
                      (r.setDecryptDataFromLevelKey = function (t, e) {
                        var r = t;
                        return (
                          'AES-128' === (null == t ? void 0 : t.method) &&
                            t.uri &&
                            !t.iv &&
                            (((r = d.LevelKey.fromURI(t.uri)).method = t.method),
                            (r.iv = this.createInitializationVector(e)),
                            (r.keyFormat = 'identity')),
                          r
                        );
                      }),
                      (r.setElementaryStreamInfo = function (t, e, r, n, i, a) {
                        void 0 === a && (a = !1);
                        var s = this.elementaryStreams,
                          o = s[t];
                        return o
                          ? ((o.startPTS = Math.min(o.startPTS, e)),
                            (o.endPTS = Math.max(o.endPTS, r)),
                            (o.startDTS = Math.min(o.startDTS, n)),
                            void (o.endDTS = Math.max(o.endDTS, i)))
                          : void (s[t] = {
                              startPTS: e,
                              endPTS: r,
                              startDTS: n,
                              endDTS: i,
                              partial: a,
                            });
                      }),
                      (r.clearElementaryStreamInfo = function () {
                        var t = this.elementaryStreams;
                        (t[o.AUDIO] = null), (t[o.VIDEO] = null), (t[o.AUDIOVIDEO] = null);
                      }),
                      s(e, [
                        {
                          key: 'decryptdata',
                          get: function () {
                            if (!this.levelkey && !this._decryptdata) return null;
                            if (!this._decryptdata && this.levelkey) {
                              var t = this.sn;
                              'number' != typeof t &&
                                (this.levelkey &&
                                  'AES-128' === this.levelkey.method &&
                                  !this.levelkey.iv &&
                                  c.logger.warn(
                                    'missing IV for initialization segment with method="' +
                                      this.levelkey.method +
                                      '" - compliance issue'
                                  ),
                                (t = 0)),
                                (this._decryptdata = this.setDecryptDataFromLevelKey(
                                  this.levelkey,
                                  t
                                ));
                            }
                            return this._decryptdata;
                          },
                        },
                        {
                          key: 'end',
                          get: function () {
                            return this.start + this.duration;
                          },
                        },
                        {
                          key: 'endProgramDateTime',
                          get: function () {
                            if (null === this.programDateTime) return null;
                            if (!Object(l.isFiniteNumber)(this.programDateTime)) return null;
                            var t = Object(l.isFiniteNumber)(this.duration) ? this.duration : 0;
                            return this.programDateTime + 1e3 * t;
                          },
                        },
                        {
                          key: 'encrypted',
                          get: function () {
                            var t;
                            return !(
                              null === (t = this.decryptdata) ||
                              void 0 === t ||
                              !t.keyFormat ||
                              !this.decryptdata.uri
                            );
                          },
                        },
                      ]),
                      e
                    );
                  })(h),
                  g = (function (t) {
                    function e(e, r, n, i, a) {
                      var s;
                      ((s = t.call(this, n) || this).fragOffset = 0),
                        (s.duration = 0),
                        (s.gap = !1),
                        (s.independent = !1),
                        (s.relurl = void 0),
                        (s.fragment = void 0),
                        (s.index = void 0),
                        (s.stats = new f.LoadStats()),
                        (s.duration = e.decimalFloatingPoint('DURATION')),
                        (s.gap = e.bool('GAP')),
                        (s.independent = e.bool('INDEPENDENT')),
                        (s.relurl = e.enumeratedString('URI')),
                        (s.fragment = r),
                        (s.index = i);
                      var o = e.enumeratedString('BYTERANGE');
                      return (
                        o && s.setByteRange(o, a),
                        a && (s.fragOffset = a.fragOffset + a.duration),
                        s
                      );
                    }
                    return (
                      n(e, t),
                      s(e, [
                        {
                          key: 'start',
                          get: function () {
                            return this.fragment.start + this.fragOffset;
                          },
                        },
                        {
                          key: 'end',
                          get: function () {
                            return this.start + this.duration;
                          },
                        },
                        {
                          key: 'loaded',
                          get: function () {
                            var t = this.elementaryStreams;
                            return !!(t.audio || t.video || t.audiovideo);
                          },
                        },
                      ]),
                      e
                    );
                  })(h);
              },
              './src/loader/key-loader.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return s;
                  });
                var n = r('./src/events.ts'),
                  i = r('./src/errors.ts'),
                  a = r('./src/utils/logger.ts'),
                  s = (function () {
                    function t(t) {
                      (this.hls = void 0),
                        (this.loaders = {}),
                        (this.decryptkey = null),
                        (this.decrypturl = null),
                        (this.hls = t),
                        this._registerListeners();
                    }
                    var e = t.prototype;
                    return (
                      (e._registerListeners = function () {
                        this.hls.on(n.Events.KEY_LOADING, this.onKeyLoading, this);
                      }),
                      (e._unregisterListeners = function () {
                        this.hls.off(n.Events.KEY_LOADING, this.onKeyLoading);
                      }),
                      (e.destroy = function () {
                        for (var t in (this._unregisterListeners(), this.loaders)) {
                          var e = this.loaders[t];
                          e && e.destroy();
                        }
                        this.loaders = {};
                      }),
                      (e.onKeyLoading = function (t, e) {
                        var r = e.frag,
                          i = r.type,
                          s = this.loaders[i];
                        if (r.decryptdata) {
                          var o = r.decryptdata.uri;
                          if (o !== this.decrypturl || null === this.decryptkey) {
                            var l = this.hls.config;
                            if (
                              (s &&
                                (a.logger.warn('abort previous key loader for type:' + i),
                                s.abort()),
                              !o)
                            )
                              return void a.logger.warn('key uri is falsy');
                            var u = l.loader,
                              c = (r.loader = this.loaders[i] = new u(l));
                            (this.decrypturl = o), (this.decryptkey = null);
                            var d = { url: o, frag: r, responseType: 'arraybuffer' },
                              f = {
                                timeout: l.fragLoadingTimeOut,
                                maxRetry: 0,
                                retryDelay: l.fragLoadingRetryDelay,
                                maxRetryDelay: l.fragLoadingMaxRetryTimeout,
                                highWaterMark: 0,
                              },
                              h = {
                                onSuccess: this.loadsuccess.bind(this),
                                onError: this.loaderror.bind(this),
                                onTimeout: this.loadtimeout.bind(this),
                              };
                            c.load(d, f, h);
                          } else
                            this.decryptkey &&
                              ((r.decryptdata.key = this.decryptkey),
                              this.hls.trigger(n.Events.KEY_LOADED, { frag: r }));
                        } else a.logger.warn('Missing decryption data on fragment in onKeyLoading');
                      }),
                      (e.loadsuccess = function (t, e, r) {
                        var i = r.frag;
                        return i.decryptdata
                          ? ((this.decryptkey = i.decryptdata.key = new Uint8Array(t.data)),
                            (i.loader = null),
                            delete this.loaders[i.type],
                            void this.hls.trigger(n.Events.KEY_LOADED, { frag: i }))
                          : void a.logger.error('after key load, decryptdata unset');
                      }),
                      (e.loaderror = function (t, e) {
                        var r = e.frag,
                          a = r.loader;
                        a && a.abort(),
                          delete this.loaders[r.type],
                          this.hls.trigger(n.Events.ERROR, {
                            type: i.ErrorTypes.NETWORK_ERROR,
                            details: i.ErrorDetails.KEY_LOAD_ERROR,
                            fatal: !1,
                            frag: r,
                            response: t,
                          });
                      }),
                      (e.loadtimeout = function (t, e) {
                        var r = e.frag,
                          a = r.loader;
                        a && a.abort(),
                          delete this.loaders[r.type],
                          this.hls.trigger(n.Events.ERROR, {
                            type: i.ErrorTypes.NETWORK_ERROR,
                            details: i.ErrorDetails.KEY_LOAD_TIMEOUT,
                            fatal: !1,
                            frag: r,
                          });
                      }),
                      t
                    );
                  })();
              },
              './src/loader/level-details.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                r.r(e),
                  r.d(e, 'LevelDetails', function () {
                    return a;
                  });
                var i = r('./src/polyfills/number.ts'),
                  a = (function () {
                    function t(t) {
                      (this.PTSKnown = !1),
                        (this.alignedSliding = !1),
                        (this.averagetargetduration = void 0),
                        (this.endCC = 0),
                        (this.endSN = 0),
                        (this.fragments = void 0),
                        (this.fragmentHint = void 0),
                        (this.partList = null),
                        (this.live = !0),
                        (this.ageHeader = 0),
                        (this.advancedDateTime = void 0),
                        (this.updated = !0),
                        (this.advanced = !0),
                        (this.availabilityDelay = void 0),
                        (this.misses = 0),
                        (this.needSidxRanges = !1),
                        (this.startCC = 0),
                        (this.startSN = 0),
                        (this.startTimeOffset = null),
                        (this.targetduration = 0),
                        (this.totalduration = 0),
                        (this.type = null),
                        (this.url = void 0),
                        (this.m3u8 = ''),
                        (this.version = null),
                        (this.canBlockReload = !1),
                        (this.canSkipUntil = 0),
                        (this.canSkipDateRanges = !1),
                        (this.skippedSegments = 0),
                        (this.recentlyRemovedDateranges = void 0),
                        (this.partHoldBack = 0),
                        (this.holdBack = 0),
                        (this.partTarget = 0),
                        (this.preloadHint = void 0),
                        (this.renditionReports = void 0),
                        (this.tuneInGoal = 0),
                        (this.deltaUpdateFailed = void 0),
                        (this.driftStartTime = 0),
                        (this.driftEndTime = 0),
                        (this.driftStart = 0),
                        (this.driftEnd = 0),
                        (this.fragments = []),
                        (this.url = t);
                    }
                    var e, r, a;
                    return (
                      (t.prototype.reloaded = function (t) {
                        if (!t) return (this.advanced = !0), void (this.updated = !0);
                        var e = this.lastPartSn - t.lastPartSn,
                          r = this.lastPartIndex - t.lastPartIndex;
                        (this.updated = this.endSN !== t.endSN || !!r || !!e),
                          (this.advanced = this.endSN > t.endSN || 0 < e || (0 === e && 0 < r)),
                          (this.misses =
                            this.updated || this.advanced
                              ? Math.floor(0.6 * t.misses)
                              : t.misses + 1),
                          (this.availabilityDelay = t.availabilityDelay);
                      }),
                      (e = t),
                      (r = [
                        {
                          key: 'hasProgramDateTime',
                          get: function () {
                            return (
                              !!this.fragments.length &&
                              Object(i.isFiniteNumber)(
                                this.fragments[this.fragments.length - 1].programDateTime
                              )
                            );
                          },
                        },
                        {
                          key: 'levelTargetDuration',
                          get: function () {
                            return this.averagetargetduration || this.targetduration || 10;
                          },
                        },
                        {
                          key: 'drift',
                          get: function () {
                            var t = this.driftEndTime - this.driftStartTime;
                            return 0 < t ? (1e3 * (this.driftEnd - this.driftStart)) / t : 1;
                          },
                        },
                        {
                          key: 'edge',
                          get: function () {
                            return this.partEnd || this.fragmentEnd;
                          },
                        },
                        {
                          key: 'partEnd',
                          get: function () {
                            var t;
                            return null !== (t = this.partList) && void 0 !== t && t.length
                              ? this.partList[this.partList.length - 1].end
                              : this.fragmentEnd;
                          },
                        },
                        {
                          key: 'fragmentEnd',
                          get: function () {
                            var t;
                            return null !== (t = this.fragments) && void 0 !== t && t.length
                              ? this.fragments[this.fragments.length - 1].end
                              : 0;
                          },
                        },
                        {
                          key: 'age',
                          get: function () {
                            return this.advancedDateTime
                              ? Math.max(Date.now() - this.advancedDateTime, 0) / 1e3
                              : 0;
                          },
                        },
                        {
                          key: 'lastPartIndex',
                          get: function () {
                            var t;
                            return null !== (t = this.partList) && void 0 !== t && t.length
                              ? this.partList[this.partList.length - 1].index
                              : -1;
                          },
                        },
                        {
                          key: 'lastPartSn',
                          get: function () {
                            var t;
                            return null !== (t = this.partList) && void 0 !== t && t.length
                              ? this.partList[this.partList.length - 1].fragment.sn
                              : this.endSN;
                          },
                        },
                      ]) && n(e.prototype, r),
                      a && n(e, a),
                      t
                    );
                  })();
              },
              './src/loader/level-key.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                r.r(e),
                  r.d(e, 'LevelKey', function () {
                    return a;
                  });
                var i = r('./node_modules/url-toolkit/src/url-toolkit.js'),
                  a = (function () {
                    function t(t, e) {
                      (this._uri = null),
                        (this.method = null),
                        (this.keyFormat = null),
                        (this.keyFormatVersions = null),
                        (this.keyID = null),
                        (this.key = null),
                        (this.iv = null),
                        (this._uri = e
                          ? Object(i.buildAbsoluteURL)(t, e, { alwaysNormalize: !0 })
                          : t);
                    }
                    return (
                      (t.fromURL = function (e, r) {
                        return new t(e, r);
                      }),
                      (t.fromURI = function (e) {
                        return new t(e);
                      }),
                      (e = t),
                      (r = [
                        {
                          key: 'uri',
                          get: function () {
                            return this._uri;
                          },
                        },
                      ]) && n(e.prototype, r),
                      a && n(e, a),
                      t
                    );
                    var e, r, a;
                  })();
              },
              './src/loader/load-stats.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'LoadStats', function () {
                    return n;
                  });
                var n = function () {
                  (this.aborted = !1),
                    (this.loaded = 0),
                    (this.retry = 0),
                    (this.total = 0),
                    (this.chunkCount = 0),
                    (this.bwEstimate = 0),
                    (this.loading = { start: 0, first: 0, end: 0 }),
                    (this.parsing = { start: 0, end: 0 }),
                    (this.buffering = { start: 0, first: 0, end: 0 });
                };
              },
              './src/loader/m3u8-parser.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  ['video', 'audio', 'text'].forEach(function (r) {
                    var n = t.filter(function (t) {
                      return Object(h.isCodecType)(t, r);
                    });
                    if (n.length) {
                      var i = n.filter(function (t) {
                        return 0 === t.lastIndexOf('avc1', 0) || 0 === t.lastIndexOf('mp4a', 0);
                      });
                      (e[r + 'Codec'] = 0 < i.length ? i[0] : n[0]),
                        (t = t.filter(function (t) {
                          return -1 === n.indexOf(t);
                        }));
                    }
                  }),
                    (e.unknownCodecs = t);
                }
                function i(t, e, r) {
                  var n = e[r];
                  n && (t[r] = n);
                }
                function a(t, e) {
                  t.rawProgramDateTime
                    ? (t.programDateTime = Date.parse(t.rawProgramDateTime))
                    : null != e && e.programDateTime && (t.programDateTime = e.endProgramDateTime),
                    Object(s.isFiniteNumber)(t.programDateTime) ||
                      ((t.programDateTime = null), (t.rawProgramDateTime = null));
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return b;
                  });
                var s = r('./src/polyfills/number.ts'),
                  o = r('./node_modules/url-toolkit/src/url-toolkit.js'),
                  l = r('./src/loader/fragment.ts'),
                  u = r('./src/loader/level-details.ts'),
                  c = r('./src/loader/level-key.ts'),
                  d = r('./src/utils/attr-list.ts'),
                  f = r('./src/utils/logger.ts'),
                  h = r('./src/utils/codecs.ts'),
                  v =
                    /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-SESSION-DATA:([^\r\n]*)[\r\n]+/g,
                  g = /#EXT-X-MEDIA:(.*)/g,
                  p = new RegExp(
                    [
                      /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
                      /(?!#) *(\S[\S ]*)/.source,
                      /#EXT-X-BYTERANGE:*(.+)/.source,
                      /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
                      /#.*/.source,
                    ].join('|'),
                    'g'
                  ),
                  m = new RegExp(
                    [
                      /#(EXTM3U)/.source,
                      /#EXT-X-(PLAYLIST-TYPE):(.+)/.source,
                      /#EXT-X-(MEDIA-SEQUENCE): *(\d+)/.source,
                      /#EXT-X-(SKIP):(.+)/.source,
                      /#EXT-X-(TARGETDURATION): *(\d+)/.source,
                      /#EXT-X-(KEY):(.+)/.source,
                      /#EXT-X-(START):(.+)/.source,
                      /#EXT-X-(ENDLIST)/.source,
                      /#EXT-X-(DISCONTINUITY-SEQ)UENCE: *(\d+)/.source,
                      /#EXT-X-(DIS)CONTINUITY/.source,
                      /#EXT-X-(VERSION):(\d+)/.source,
                      /#EXT-X-(MAP):(.+)/.source,
                      /#EXT-X-(SERVER-CONTROL):(.+)/.source,
                      /#EXT-X-(PART-INF):(.+)/.source,
                      /#EXT-X-(GAP)/.source,
                      /#EXT-X-(BITRATE):\s*(\d+)/.source,
                      /#EXT-X-(PART):(.+)/.source,
                      /#EXT-X-(PRELOAD-HINT):(.+)/.source,
                      /#EXT-X-(RENDITION-REPORT):(.+)/.source,
                      /(#)([^:]*):(.*)/.source,
                      /(#)(.*)(?:.*)\r?\n?/.source,
                    ].join('|')
                  ),
                  y = /\.(mp4|m4s|m4v|m4a)$/i,
                  b = (function () {
                    function t() {}
                    return (
                      (t.findGroup = function (t, e) {
                        for (var r, n = 0; n < t.length; n++) if ((r = t[n]).id === e) return r;
                      }),
                      (t.convertAVC1ToAVCOTI = function (t) {
                        var e = t.split('.');
                        if (2 < e.length) {
                          var r = e.shift() + '.';
                          return (
                            (r += parseInt(e.shift()).toString(16)),
                            (r += ('000' + parseInt(e.shift()).toString(16)).substr(-4))
                          );
                        }
                        return t;
                      }),
                      (t.resolve = function (t, e) {
                        return o.buildAbsoluteURL(e, t, { alwaysNormalize: !0 });
                      }),
                      (t.parseMasterPlaylist = function (e, r) {
                        var i,
                          a = [],
                          s = {},
                          o = !1;
                        for (v.lastIndex = 0; null != (i = v.exec(e)); )
                          if (i[1]) {
                            var l = new d.AttrList(i[1]),
                              u = {
                                attrs: l,
                                bitrate:
                                  l.decimalInteger('AVERAGE-BANDWIDTH') ||
                                  l.decimalInteger('BANDWIDTH'),
                                name: l.NAME,
                                url: t.resolve(i[2], r),
                              },
                              c = l.decimalResolution('RESOLUTION');
                            c && ((u.width = c.width), (u.height = c.height)),
                              n(
                                (l.CODECS || '').split(/[ ,]+/).filter(function (t) {
                                  return t;
                                }),
                                u
                              ),
                              u.videoCodec &&
                                -1 !== u.videoCodec.indexOf('avc1') &&
                                (u.videoCodec = t.convertAVC1ToAVCOTI(u.videoCodec)),
                              a.push(u);
                          } else if (i[3]) {
                            var f = new d.AttrList(i[3]);
                            f['DATA-ID'] && ((o = !0), (s[f['DATA-ID']] = f));
                          }
                        return { levels: a, sessionData: o ? s : null };
                      }),
                      (t.parseMasterPlaylistMedia = function (e, r, n, a) {
                        void 0 === a && (a = []);
                        var s,
                          o = [],
                          l = 0;
                        for (g.lastIndex = 0; null !== (s = g.exec(e)); ) {
                          var u = new d.AttrList(s[1]);
                          if (u.TYPE === n) {
                            var c = {
                              attrs: u,
                              bitrate: 0,
                              id: l++,
                              groupId: u['GROUP-ID'],
                              instreamId: u['INSTREAM-ID'],
                              name: u.NAME || u.LANGUAGE || '',
                              type: n,
                              default: u.bool('DEFAULT'),
                              autoselect: u.bool('AUTOSELECT'),
                              forced: u.bool('FORCED'),
                              lang: u.LANGUAGE,
                              url: u.URI ? t.resolve(u.URI, r) : '',
                            };
                            if (a.length) {
                              var f = t.findGroup(a, c.groupId) || a[0];
                              i(c, f, 'audioCodec'), i(c, f, 'textCodec');
                            }
                            o.push(c);
                          }
                        }
                        return o;
                      }),
                      (t.parseLevelPlaylist = function (t, e, r, n, i) {
                        var h,
                          v,
                          g,
                          b = new u.LevelDetails(e),
                          E = b.fragments,
                          T = null,
                          A = 0,
                          S = 0,
                          L = 0,
                          _ = 0,
                          k = null,
                          D = new l.Fragment(n, e),
                          w = -1,
                          R = !1;
                        for (p.lastIndex = 0, b.m3u8 = t; null !== (h = p.exec(t)); ) {
                          R &&
                            ((R = !1),
                            ((D = new l.Fragment(n, e)).start = L),
                            (D.sn = A),
                            (D.cc = _),
                            (D.level = r),
                            T &&
                              ((D.initSegment = T), (D.rawProgramDateTime = T.rawProgramDateTime)));
                          var C = h[1];
                          if (C) {
                            D.duration = parseFloat(C);
                            var x = (' ' + h[2]).slice(1);
                            (D.title = x || null), D.tagList.push(x ? ['INF', C, x] : ['INF', C]);
                          } else if (h[3])
                            Object(s.isFiniteNumber)(D.duration) &&
                              ((D.start = L),
                              g && (D.levelkey = g),
                              (D.sn = A),
                              (D.level = r),
                              (D.cc = _),
                              (D.urlId = i),
                              E.push(D),
                              (D.relurl = (' ' + h[3]).slice(1)),
                              a(D, k),
                              (k = D),
                              (L += D.duration),
                              A++,
                              (S = 0),
                              (R = !0));
                          else if (h[4]) {
                            var I = (' ' + h[4]).slice(1);
                            k ? D.setByteRange(I, k) : D.setByteRange(I);
                          } else if (h[5])
                            (D.rawProgramDateTime = (' ' + h[5]).slice(1)),
                              D.tagList.push(['PROGRAM-DATE-TIME', D.rawProgramDateTime]),
                              -1 === w && (w = E.length);
                          else {
                            if (!(h = h[0].match(m))) {
                              f.logger.warn('No matches on slow regex match for level playlist!');
                              continue;
                            }
                            for (v = 1; v < h.length && void 0 === h[v]; v++);
                            var O = (' ' + h[v]).slice(1),
                              P = (' ' + h[v + 1]).slice(1),
                              F = h[v + 2] ? (' ' + h[v + 2]).slice(1) : '';
                            switch (O) {
                              case 'PLAYLIST-TYPE':
                                b.type = P.toUpperCase();
                                break;
                              case 'MEDIA-SEQUENCE':
                                A = b.startSN = parseInt(P);
                                break;
                              case 'SKIP':
                                var M = new d.AttrList(P),
                                  B = M.decimalInteger('SKIPPED-SEGMENTS');
                                if (Object(s.isFiniteNumber)(B)) {
                                  b.skippedSegments = B;
                                  for (var N = B; N--; ) E.unshift(null);
                                  A += B;
                                }
                                var U = M.enumeratedString('RECENTLY-REMOVED-DATERANGES');
                                U && (b.recentlyRemovedDateranges = U.split('\t'));
                                break;
                              case 'TARGETDURATION':
                                b.targetduration = parseFloat(P);
                                break;
                              case 'VERSION':
                                b.version = parseInt(P);
                                break;
                              case 'EXTM3U':
                                break;
                              case 'ENDLIST':
                                b.live = !1;
                                break;
                              case '#':
                                (P || F) && D.tagList.push(F ? [P, F] : [P]);
                                break;
                              case 'DIS':
                                _++;
                              case 'GAP':
                                D.tagList.push([O]);
                                break;
                              case 'BITRATE':
                                D.tagList.push([O, P]);
                                break;
                              case 'DISCONTINUITY-SEQ':
                                _ = parseInt(P);
                                break;
                              case 'KEY':
                                var j,
                                  G = new d.AttrList(P),
                                  H = G.enumeratedString('METHOD'),
                                  V = G.URI,
                                  W = G.hexadecimalInteger('IV'),
                                  K = G.enumeratedString('KEYFORMATVERSIONS'),
                                  q = G.enumeratedString('KEYID'),
                                  z =
                                    null == (j = G.enumeratedString('KEYFORMAT')) ? 'identity' : j;
                                if (
                                  -1 <
                                  [
                                    'com.apple.streamingkeydelivery',
                                    'com.microsoft.playready',
                                    'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed',
                                    'com.widevine',
                                  ].indexOf(z)
                                ) {
                                  f.logger.warn(
                                    'Keyformat ' + z + ' is not supported from the manifest'
                                  );
                                  continue;
                                }
                                if ('identity' !== z) continue;
                                H &&
                                  ((g = c.LevelKey.fromURL(e, V)),
                                  V &&
                                    0 <= ['AES-128', 'SAMPLE-AES', 'SAMPLE-AES-CENC'].indexOf(H) &&
                                    ((g.method = H),
                                    (g.keyFormat = z),
                                    q && (g.keyID = q),
                                    K && (g.keyFormatVersions = K),
                                    (g.iv = W)));
                                break;
                              case 'START':
                                var Y = new d.AttrList(P).decimalFloatingPoint('TIME-OFFSET');
                                Object(s.isFiniteNumber)(Y) && (b.startTimeOffset = Y);
                                break;
                              case 'MAP':
                                var X = new d.AttrList(P);
                                (D.relurl = X.URI),
                                  X.BYTERANGE && D.setByteRange(X.BYTERANGE),
                                  (D.level = r),
                                  (D.sn = 'initSegment'),
                                  g && (D.levelkey = g),
                                  (D.initSegment = null),
                                  (T = D),
                                  (R = !0);
                                break;
                              case 'SERVER-CONTROL':
                                var Q = new d.AttrList(P);
                                (b.canBlockReload = Q.bool('CAN-BLOCK-RELOAD')),
                                  (b.canSkipUntil = Q.optionalFloat('CAN-SKIP-UNTIL', 0)),
                                  (b.canSkipDateRanges =
                                    0 < b.canSkipUntil && Q.bool('CAN-SKIP-DATERANGES')),
                                  (b.partHoldBack = Q.optionalFloat('PART-HOLD-BACK', 0)),
                                  (b.holdBack = Q.optionalFloat('HOLD-BACK', 0));
                                break;
                              case 'PART-INF':
                                var $ = new d.AttrList(P);
                                b.partTarget = $.decimalFloatingPoint('PART-TARGET');
                                break;
                              case 'PART':
                                var J = b.partList;
                                J || (J = b.partList = []);
                                var Z = 0 < S ? J[J.length - 1] : void 0,
                                  tt = S++,
                                  et = new l.Part(new d.AttrList(P), D, e, tt, Z);
                                J.push(et), (D.duration += et.duration);
                                break;
                              case 'PRELOAD-HINT':
                                var rt = new d.AttrList(P);
                                b.preloadHint = rt;
                                break;
                              case 'RENDITION-REPORT':
                                var nt = new d.AttrList(P);
                                (b.renditionReports = b.renditionReports || []),
                                  b.renditionReports.push(nt);
                                break;
                              default:
                                f.logger.warn('line parsed but not handled: ' + h);
                            }
                          }
                        }
                        k && !k.relurl
                          ? (E.pop(), (L -= k.duration), b.partList && (b.fragmentHint = k))
                          : b.partList && (a(D, k), (D.cc = _), (b.fragmentHint = D));
                        var it = E.length,
                          at = E[0],
                          st = E[it - 1];
                        if (0 < (L += b.skippedSegments * b.targetduration) && it && st) {
                          b.averagetargetduration = L / it;
                          var ot = st.sn;
                          (b.endSN = 'initSegment' === ot ? 0 : ot),
                            at &&
                              ((b.startCC = at.cc),
                              !at.initSegment &&
                                b.fragments.every(function (t) {
                                  return (
                                    t.relurl &&
                                    ((e = t.relurl),
                                    y.test(
                                      null ==
                                        (r =
                                          null === (n = o.parseURL(e)) || void 0 === n
                                            ? void 0
                                            : n.path)
                                        ? ''
                                        : r
                                    ))
                                  );
                                  var e, r, n;
                                }) &&
                                (f.logger.warn(
                                  'MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX'
                                ),
                                ((D = new l.Fragment(n, e)).relurl = st.relurl),
                                (D.level = r),
                                (D.sn = 'initSegment'),
                                (at.initSegment = D),
                                (b.needSidxRanges = !0)));
                        } else (b.endSN = 0), (b.startCC = 0);
                        return (
                          b.fragmentHint && (L += b.fragmentHint.duration),
                          (b.totalduration = L),
                          (b.endCC = _),
                          0 < w &&
                            (function (t, e) {
                              for (var r, n = t[e], i = e; i--; ) {
                                if (!(r = t[i])) return;
                                (r.programDateTime = n.programDateTime - 1e3 * r.duration), (n = r);
                              }
                            })(E, w),
                          b
                        );
                      }),
                      t
                    );
                  })();
              },
              './src/loader/playlist-loader.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  var r = t.url;
                  return (void 0 === r || 0 === r.indexOf('data:')) && (r = e.url), r;
                }
                r.r(e);
                var i = r('./src/polyfills/number.ts'),
                  a = r('./src/events.ts'),
                  s = r('./src/errors.ts'),
                  o = r('./src/utils/logger.ts'),
                  l = r('./src/utils/mp4-tools.ts'),
                  u = r('./src/loader/m3u8-parser.ts'),
                  c = r('./src/types/loader.ts'),
                  d = r('./src/utils/attr-list.ts'),
                  f = (function () {
                    function t(t) {
                      (this.hls = void 0),
                        (this.loaders = Object.create(null)),
                        (this.hls = t),
                        this.registerListeners();
                    }
                    var e = t.prototype;
                    return (
                      (e.registerListeners = function () {
                        var t = this.hls;
                        t.on(a.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          t.on(a.Events.LEVEL_LOADING, this.onLevelLoading, this),
                          t.on(a.Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this),
                          t.on(a.Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
                      }),
                      (e.unregisterListeners = function () {
                        var t = this.hls;
                        t.off(a.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                          t.off(a.Events.LEVEL_LOADING, this.onLevelLoading, this),
                          t.off(a.Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this),
                          t.off(a.Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
                      }),
                      (e.createInternalLoader = function (t) {
                        var e = this.hls.config,
                          r = e.pLoader,
                          n = e.loader,
                          i = new (r || n)(e);
                        return (t.loader = i), (this.loaders[t.type] = i), i;
                      }),
                      (e.getInternalLoader = function (t) {
                        return this.loaders[t.type];
                      }),
                      (e.resetInternalLoader = function (t) {
                        this.loaders[t] && delete this.loaders[t];
                      }),
                      (e.destroyInternalLoaders = function () {
                        for (var t in this.loaders) {
                          var e = this.loaders[t];
                          e && e.destroy(), this.resetInternalLoader(t);
                        }
                      }),
                      (e.destroy = function () {
                        this.unregisterListeners(), this.destroyInternalLoaders();
                      }),
                      (e.onManifestLoading = function (t, e) {
                        var r = e.url;
                        this.load({
                          id: null,
                          groupId: null,
                          level: 0,
                          responseType: 'text',
                          type: c.PlaylistContextType.MANIFEST,
                          url: r,
                          deliveryDirectives: null,
                        });
                      }),
                      (e.onLevelLoading = function (t, e) {
                        var r = e.id,
                          n = e.level,
                          i = e.url,
                          a = e.deliveryDirectives;
                        this.load({
                          id: r,
                          groupId: null,
                          level: n,
                          responseType: 'text',
                          type: c.PlaylistContextType.LEVEL,
                          url: i,
                          deliveryDirectives: a,
                        });
                      }),
                      (e.onAudioTrackLoading = function (t, e) {
                        var r = e.id,
                          n = e.groupId,
                          i = e.url,
                          a = e.deliveryDirectives;
                        this.load({
                          id: r,
                          groupId: n,
                          level: null,
                          responseType: 'text',
                          type: c.PlaylistContextType.AUDIO_TRACK,
                          url: i,
                          deliveryDirectives: a,
                        });
                      }),
                      (e.onSubtitleTrackLoading = function (t, e) {
                        var r = e.id,
                          n = e.groupId,
                          i = e.url,
                          a = e.deliveryDirectives;
                        this.load({
                          id: r,
                          groupId: n,
                          level: null,
                          responseType: 'text',
                          type: c.PlaylistContextType.SUBTITLE_TRACK,
                          url: i,
                          deliveryDirectives: a,
                        });
                      }),
                      (e.load = function (t) {
                        var e,
                          r,
                          n,
                          i,
                          a,
                          s,
                          l = this.hls.config,
                          u = this.getInternalLoader(t);
                        if (u) {
                          var d = u.context;
                          if (d && d.url === t.url)
                            return void o.logger.trace(
                              '[playlist-loader]: playlist request ongoing'
                            );
                          o.logger.log(
                            '[playlist-loader]: aborting previous loader for type: ' + t.type
                          ),
                            u.abort();
                        }
                        switch (t.type) {
                          case c.PlaylistContextType.MANIFEST:
                            (r = l.manifestLoadingMaxRetry),
                              (n = l.manifestLoadingTimeOut),
                              (i = l.manifestLoadingRetryDelay),
                              (a = l.manifestLoadingMaxRetryTimeout);
                            break;
                          case c.PlaylistContextType.LEVEL:
                          case c.PlaylistContextType.AUDIO_TRACK:
                          case c.PlaylistContextType.SUBTITLE_TRACK:
                            (r = 0), (n = l.levelLoadingTimeOut);
                            break;
                          default:
                            (r = l.levelLoadingMaxRetry),
                              (n = l.levelLoadingTimeOut),
                              (i = l.levelLoadingRetryDelay),
                              (a = l.levelLoadingMaxRetryTimeout);
                        }
                        if (
                          ((u = this.createInternalLoader(t)),
                          null !== (e = t.deliveryDirectives) &&
                            void 0 !== e &&
                            e.part &&
                            (t.type === c.PlaylistContextType.LEVEL && null !== t.level
                              ? (s = this.hls.levels[t.level].details)
                              : t.type === c.PlaylistContextType.AUDIO_TRACK && null !== t.id
                              ? (s = this.hls.audioTracks[t.id].details)
                              : t.type === c.PlaylistContextType.SUBTITLE_TRACK &&
                                null !== t.id &&
                                (s = this.hls.subtitleTracks[t.id].details),
                            s))
                        ) {
                          var f = s.partTarget,
                            h = s.targetduration;
                          f && h && (n = Math.min(1e3 * Math.max(3 * f, 0.8 * h), n));
                        }
                        var v = {
                            timeout: n,
                            maxRetry: r,
                            retryDelay: i,
                            maxRetryDelay: a,
                            highWaterMark: 0,
                          },
                          g = {
                            onSuccess: this.loadsuccess.bind(this),
                            onError: this.loaderror.bind(this),
                            onTimeout: this.loadtimeout.bind(this),
                          };
                        u.load(t, v, g);
                      }),
                      (e.loadsuccess = function (t, e, r, n) {
                        if ((void 0 === n && (n = null), r.isSidxRequest))
                          return (
                            this.handleSidxRequest(t, r), void this.handlePlaylistLoaded(t, e, r, n)
                          );
                        this.resetInternalLoader(r.type);
                        var i = t.data;
                        return 0 === i.indexOf('#EXTM3U')
                          ? ((e.parsing.start = performance.now()),
                            void (0 < i.indexOf('#EXTINF:') ||
                            0 < i.indexOf('#EXT-X-TARGETDURATION:')
                              ? this.handleTrackOrLevelPlaylist(t, e, r, n)
                              : this.handleMasterPlaylist(t, e, r, n)))
                          : void this.handleManifestParsingError(t, r, 'no EXTM3U delimiter', n);
                      }),
                      (e.loaderror = function (t, e, r) {
                        void 0 === r && (r = null), this.handleNetworkError(e, r, !1, t);
                      }),
                      (e.loadtimeout = function (t, e, r) {
                        void 0 === r && (r = null), this.handleNetworkError(e, r, !0);
                      }),
                      (e.handleMasterPlaylist = function (t, e, r, i) {
                        var s = this.hls,
                          l = t.data,
                          c = n(t, r),
                          f = u.default.parseMasterPlaylist(l, c),
                          h = f.levels,
                          v = f.sessionData;
                        if (h.length) {
                          var g = h.map(function (t) {
                              return { id: t.attrs.AUDIO, audioCodec: t.audioCodec };
                            }),
                            p = h.map(function (t) {
                              return { id: t.attrs.SUBTITLES, textCodec: t.textCodec };
                            }),
                            m = u.default.parseMasterPlaylistMedia(l, c, 'AUDIO', g),
                            y = u.default.parseMasterPlaylistMedia(l, c, 'SUBTITLES', p),
                            b = u.default.parseMasterPlaylistMedia(l, c, 'CLOSED-CAPTIONS');
                          m.length &&
                            (m.some(function (t) {
                              return !t.url;
                            }) ||
                              !h[0].audioCodec ||
                              h[0].attrs.AUDIO ||
                              (o.logger.log(
                                '[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one'
                              ),
                              m.unshift({
                                type: 'main',
                                name: 'main',
                                default: !1,
                                autoselect: !1,
                                forced: !1,
                                id: -1,
                                attrs: new d.AttrList({}),
                                bitrate: 0,
                                url: '',
                              }))),
                            s.trigger(a.Events.MANIFEST_LOADED, {
                              levels: h,
                              audioTracks: m,
                              subtitles: y,
                              captions: b,
                              url: c,
                              stats: e,
                              networkDetails: i,
                              sessionData: v,
                            });
                        } else
                          this.handleManifestParsingError(t, r, 'no level found in manifest', i);
                      }),
                      (e.handleTrackOrLevelPlaylist = function (t, e, r, o) {
                        var l = this.hls,
                          f = r.id,
                          h = r.level,
                          v = r.type,
                          g = n(t, r),
                          p = Object(i.isFiniteNumber)(f) ? f : 0,
                          m = Object(i.isFiniteNumber)(h) ? h : p,
                          y = (function (t) {
                            var e = t.type;
                            return e === c.PlaylistContextType.AUDIO_TRACK
                              ? c.PlaylistLevelType.AUDIO
                              : e === c.PlaylistContextType.SUBTITLE_TRACK
                              ? c.PlaylistLevelType.SUBTITLE
                              : c.PlaylistLevelType.MAIN;
                          })(r),
                          b = u.default.parseLevelPlaylist(t.data, g, m, y, p);
                        if (b.fragments.length) {
                          if (v === c.PlaylistContextType.MANIFEST) {
                            var E = {
                              attrs: new d.AttrList({}),
                              bitrate: 0,
                              details: b,
                              name: '',
                              url: g,
                            };
                            l.trigger(a.Events.MANIFEST_LOADED, {
                              levels: [E],
                              audioTracks: [],
                              url: g,
                              stats: e,
                              networkDetails: o,
                              sessionData: null,
                            });
                          }
                          if (((e.parsing.end = performance.now()), b.needSidxRanges)) {
                            var T,
                              A =
                                null === (T = b.fragments[0].initSegment) || void 0 === T
                                  ? void 0
                                  : T.url;
                            this.load({
                              url: A,
                              isSidxRequest: !0,
                              type: v,
                              level: h,
                              levelDetails: b,
                              id: f,
                              groupId: null,
                              rangeStart: 0,
                              rangeEnd: 2048,
                              responseType: 'arraybuffer',
                              deliveryDirectives: null,
                            });
                          } else (r.levelDetails = b), this.handlePlaylistLoaded(t, e, r, o);
                        } else
                          l.trigger(a.Events.ERROR, {
                            type: s.ErrorTypes.NETWORK_ERROR,
                            details: s.ErrorDetails.LEVEL_EMPTY_ERROR,
                            fatal: !1,
                            url: g,
                            reason: 'no fragments found in level',
                            level: 'number' == typeof r.level ? r.level : void 0,
                          });
                      }),
                      (e.handleSidxRequest = function (t, e) {
                        var r = Object(l.parseSegmentIndex)(new Uint8Array(t.data));
                        if (r) {
                          var n = r.references,
                            i = e.levelDetails;
                          n.forEach(function (t, e) {
                            var n = t.info,
                              a = i.fragments[e];
                            0 === a.byteRange.length &&
                              a.setByteRange(1 + n.end - n.start + '@' + n.start),
                              a.initSegment && a.initSegment.setByteRange(r.moovEndOffset + '@0');
                          });
                        }
                      }),
                      (e.handleManifestParsingError = function (t, e, r, n) {
                        this.hls.trigger(a.Events.ERROR, {
                          type: s.ErrorTypes.NETWORK_ERROR,
                          details: s.ErrorDetails.MANIFEST_PARSING_ERROR,
                          fatal: e.type === c.PlaylistContextType.MANIFEST,
                          url: t.url,
                          reason: r,
                          response: t,
                          context: e,
                          networkDetails: n,
                        });
                      }),
                      (e.handleNetworkError = function (t, e, r, n) {
                        void 0 === r && (r = !1),
                          o.logger.warn(
                            '[playlist-loader]: A network ' +
                              (r ? 'timeout' : 'error') +
                              ' occurred while loading ' +
                              t.type +
                              ' level: ' +
                              t.level +
                              ' id: ' +
                              t.id +
                              ' group-id: "' +
                              t.groupId +
                              '"'
                          );
                        var i = s.ErrorDetails.UNKNOWN,
                          l = !1,
                          u = this.getInternalLoader(t);
                        switch (t.type) {
                          case c.PlaylistContextType.MANIFEST:
                            (i = r
                              ? s.ErrorDetails.MANIFEST_LOAD_TIMEOUT
                              : s.ErrorDetails.MANIFEST_LOAD_ERROR),
                              (l = !0);
                            break;
                          case c.PlaylistContextType.LEVEL:
                            (i = r
                              ? s.ErrorDetails.LEVEL_LOAD_TIMEOUT
                              : s.ErrorDetails.LEVEL_LOAD_ERROR),
                              (l = !1);
                            break;
                          case c.PlaylistContextType.AUDIO_TRACK:
                            (i = r
                              ? s.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT
                              : s.ErrorDetails.AUDIO_TRACK_LOAD_ERROR),
                              (l = !1);
                            break;
                          case c.PlaylistContextType.SUBTITLE_TRACK:
                            (i = r
                              ? s.ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT
                              : s.ErrorDetails.SUBTITLE_LOAD_ERROR),
                              (l = !1);
                        }
                        u && this.resetInternalLoader(t.type);
                        var d = {
                          type: s.ErrorTypes.NETWORK_ERROR,
                          details: i,
                          fatal: l,
                          url: t.url,
                          loader: u,
                          context: t,
                          networkDetails: e,
                        };
                        n && (d.response = n), this.hls.trigger(a.Events.ERROR, d);
                      }),
                      (e.handlePlaylistLoaded = function (t, e, r, n) {
                        var i = r.type,
                          s = r.level,
                          o = r.id,
                          l = r.groupId,
                          u = r.loader,
                          d = r.levelDetails,
                          f = r.deliveryDirectives;
                        return null != d && d.targetduration
                          ? void (
                              u &&
                              (d.live &&
                                (u.getCacheAge && (d.ageHeader = u.getCacheAge() || 0),
                                (!u.getCacheAge || isNaN(d.ageHeader)) && (d.ageHeader = 0)),
                              i === c.PlaylistContextType.MANIFEST ||
                              i === c.PlaylistContextType.LEVEL
                                ? this.hls.trigger(a.Events.LEVEL_LOADED, {
                                    details: d,
                                    level: s || 0,
                                    id: o || 0,
                                    stats: e,
                                    networkDetails: n,
                                    deliveryDirectives: f,
                                  })
                                : i === c.PlaylistContextType.AUDIO_TRACK
                                ? this.hls.trigger(a.Events.AUDIO_TRACK_LOADED, {
                                    details: d,
                                    id: o || 0,
                                    groupId: l || '',
                                    stats: e,
                                    networkDetails: n,
                                    deliveryDirectives: f,
                                  })
                                : i === c.PlaylistContextType.SUBTITLE_TRACK &&
                                  this.hls.trigger(a.Events.SUBTITLE_TRACK_LOADED, {
                                    details: d,
                                    id: o || 0,
                                    groupId: l || '',
                                    stats: e,
                                    networkDetails: n,
                                    deliveryDirectives: f,
                                  }))
                            )
                          : void this.handleManifestParsingError(
                              t,
                              r,
                              'invalid target duration',
                              n
                            );
                      }),
                      t
                    );
                  })();
                e.default = f;
              },
              './src/polyfills/number.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'isFiniteNumber', function () {
                    return n;
                  }),
                  r.d(e, 'MAX_SAFE_INTEGER', function () {
                    return i;
                  });
                var n =
                    Number.isFinite ||
                    function (t) {
                      return 'number' == typeof t && isFinite(t);
                    },
                  i = Number.MAX_SAFE_INTEGER || 9007199254740991;
              },
              './src/remux/aac-helper.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = (function () {
                  function t() {}
                  return (
                    (t.getSilentFrame = function (t, e) {
                      switch (t) {
                        case 'mp4a.40.2':
                          if (1 === e) return new Uint8Array([0, 200, 0, 128, 35, 128]);
                          if (2 === e) return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                          if (3 === e)
                            return new Uint8Array([
                              0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142,
                            ]);
                          if (4 === e)
                            return new Uint8Array([
                              0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56,
                            ]);
                          if (5 === e)
                            return new Uint8Array([
                              0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33,
                              144, 2, 56,
                            ]);
                          if (6 === e)
                            return new Uint8Array([
                              0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33,
                              144, 2, 0, 178, 0, 32, 8, 224,
                            ]);
                          break;
                        default:
                          if (1 === e)
                            return new Uint8Array([
                              1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193,
                              10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                              90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                              90, 90, 90, 90, 90, 90, 90, 94,
                            ]);
                          if (2 === e)
                            return new Uint8Array([
                              1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241,
                              161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                              90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                              90, 90, 90, 90, 90, 90, 94,
                            ]);
                          if (3 === e)
                            return new Uint8Array([
                              1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241,
                              161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                              90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                              90, 90, 90, 90, 90, 90, 94,
                            ]);
                      }
                    }),
                    t
                  );
                })();
                e.default = n;
              },
              './src/remux/mp4-generator.ts': function (t, e, r) {
                'use strict';
                r.r(e), Math.pow(2, 32);
                var n = (function () {
                  function t() {}
                  return (
                    (t.init = function () {
                      var e;
                      for (e in ((t.types = {
                        'avc1': [],
                        'avcC': [],
                        'btrt': [],
                        'dinf': [],
                        'dref': [],
                        'esds': [],
                        'ftyp': [],
                        'hdlr': [],
                        'mdat': [],
                        'mdhd': [],
                        'mdia': [],
                        'mfhd': [],
                        'minf': [],
                        'moof': [],
                        'moov': [],
                        'mp4a': [],
                        '.mp3': [],
                        'mvex': [],
                        'mvhd': [],
                        'pasp': [],
                        'sdtp': [],
                        'stbl': [],
                        'stco': [],
                        'stsc': [],
                        'stsd': [],
                        'stsz': [],
                        'stts': [],
                        'tfdt': [],
                        'tfhd': [],
                        'traf': [],
                        'trak': [],
                        'trun': [],
                        'trex': [],
                        'tkhd': [],
                        'vmhd': [],
                        'smhd': [],
                      }),
                      t.types))
                        t.types.hasOwnProperty(e) &&
                          (t.types[e] = [
                            e.charCodeAt(0),
                            e.charCodeAt(1),
                            e.charCodeAt(2),
                            e.charCodeAt(3),
                          ]);
                      var r = new Uint8Array([
                          0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0,
                        ]),
                        n = new Uint8Array([
                          0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0,
                        ]);
                      t.HDLR_TYPES = { video: r, audio: n };
                      var i = new Uint8Array([
                          0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1,
                        ]),
                        a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                      (t.STTS = t.STSC = t.STCO = a),
                        (t.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])),
                        (t.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])),
                        (t.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
                        (t.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
                      var s = new Uint8Array([105, 115, 111, 109]),
                        o = new Uint8Array([97, 118, 99, 49]),
                        l = new Uint8Array([0, 0, 0, 1]);
                      (t.FTYP = t.box(t.types.ftyp, s, l, s, o)),
                        (t.DINF = t.box(t.types.dinf, t.box(t.types.dref, i)));
                    }),
                    (t.box = function (t) {
                      for (
                        var e = 8, r = arguments.length, n = Array(1 < r ? r - 1 : 0), i = 1;
                        i < r;
                        i++
                      )
                        n[i - 1] = arguments[i];
                      for (var a = n.length, s = a; a--; ) e += n[a].byteLength;
                      var o = new Uint8Array(e);
                      for (
                        o[0] = 255 & (e >> 24),
                          o[1] = 255 & (e >> 16),
                          o[2] = 255 & (e >> 8),
                          o[3] = 255 & e,
                          o.set(t, 4),
                          a = 0,
                          e = 8;
                        a < s;
                        a++
                      )
                        o.set(n[a], e), (e += n[a].byteLength);
                      return o;
                    }),
                    (t.hdlr = function (e) {
                      return t.box(t.types.hdlr, t.HDLR_TYPES[e]);
                    }),
                    (t.mdat = function (e) {
                      return t.box(t.types.mdat, e);
                    }),
                    (t.mdhd = function (e, r) {
                      r *= e;
                      var n = Math.floor(r / 4294967296),
                        i = Math.floor(r % 4294967296);
                      return t.box(
                        t.types.mdhd,
                        new Uint8Array([
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          2,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          3,
                          255 & (e >> 24),
                          255 & (e >> 16),
                          255 & (e >> 8),
                          255 & e,
                          n >> 24,
                          255 & (n >> 16),
                          255 & (n >> 8),
                          255 & n,
                          i >> 24,
                          255 & (i >> 16),
                          255 & (i >> 8),
                          255 & i,
                          85,
                          196,
                          0,
                          0,
                        ])
                      );
                    }),
                    (t.mdia = function (e) {
                      return t.box(
                        t.types.mdia,
                        t.mdhd(e.timescale, e.duration),
                        t.hdlr(e.type),
                        t.minf(e)
                      );
                    }),
                    (t.mfhd = function (e) {
                      return t.box(
                        t.types.mfhd,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          e >> 24,
                          255 & (e >> 16),
                          255 & (e >> 8),
                          255 & e,
                        ])
                      );
                    }),
                    (t.minf = function (e) {
                      return 'audio' === e.type
                        ? t.box(t.types.minf, t.box(t.types.smhd, t.SMHD), t.DINF, t.stbl(e))
                        : t.box(t.types.minf, t.box(t.types.vmhd, t.VMHD), t.DINF, t.stbl(e));
                    }),
                    (t.moof = function (e, r, n) {
                      return t.box(t.types.moof, t.mfhd(e), t.traf(n, r));
                    }),
                    (t.moov = function (e) {
                      for (var r = e.length, n = []; r--; ) n[r] = t.trak(e[r]);
                      return t.box.apply(
                        null,
                        [t.types.moov, t.mvhd(e[0].timescale, e[0].duration)]
                          .concat(n)
                          .concat(t.mvex(e))
                      );
                    }),
                    (t.mvex = function (e) {
                      for (var r = e.length, n = []; r--; ) n[r] = t.trex(e[r]);
                      return t.box.apply(null, [t.types.mvex].concat(n));
                    }),
                    (t.mvhd = function (e, r) {
                      r *= e;
                      var n = Math.floor(r / 4294967296),
                        i = Math.floor(r % 4294967296),
                        a = new Uint8Array([
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          2,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          3,
                          255 & (e >> 24),
                          255 & (e >> 16),
                          255 & (e >> 8),
                          255 & e,
                          n >> 24,
                          255 & (n >> 16),
                          255 & (n >> 8),
                          255 & n,
                          i >> 24,
                          255 & (i >> 16),
                          255 & (i >> 8),
                          255 & i,
                          0,
                          1,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          64,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          255,
                          255,
                          255,
                          255,
                        ]);
                      return t.box(t.types.mvhd, a);
                    }),
                    (t.sdtp = function (e) {
                      var r,
                        n,
                        i = e.samples || [],
                        a = new Uint8Array(4 + i.length);
                      for (r = 0; r < i.length; r++)
                        (n = i[r].flags),
                          (a[r + 4] = (n.dependsOn << 4) | (n.isDependedOn << 2) | n.hasRedundancy);
                      return t.box(t.types.sdtp, a);
                    }),
                    (t.stbl = function (e) {
                      return t.box(
                        t.types.stbl,
                        t.stsd(e),
                        t.box(t.types.stts, t.STTS),
                        t.box(t.types.stsc, t.STSC),
                        t.box(t.types.stsz, t.STSZ),
                        t.box(t.types.stco, t.STCO)
                      );
                    }),
                    (t.avc1 = function (e) {
                      var r,
                        n,
                        i,
                        a = [],
                        s = [];
                      for (r = 0; r < e.sps.length; r++)
                        (i = (n = e.sps[r]).byteLength),
                          a.push(255 & (i >>> 8)),
                          a.push(255 & i),
                          (a = a.concat(Array.prototype.slice.call(n)));
                      for (r = 0; r < e.pps.length; r++)
                        (i = (n = e.pps[r]).byteLength),
                          s.push(255 & (i >>> 8)),
                          s.push(255 & i),
                          (s = s.concat(Array.prototype.slice.call(n)));
                      var o = t.box(
                          t.types.avcC,
                          new Uint8Array(
                            [1, a[3], a[4], a[5], 255, 224 | e.sps.length]
                              .concat(a)
                              .concat([e.pps.length])
                              .concat(s)
                          )
                        ),
                        l = e.width,
                        u = e.height,
                        c = e.pixelRatio[0],
                        d = e.pixelRatio[1];
                      return t.box(
                        t.types.avc1,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          255 & (l >> 8),
                          255 & l,
                          255 & (u >> 8),
                          255 & u,
                          0,
                          72,
                          0,
                          0,
                          0,
                          72,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          18,
                          100,
                          97,
                          105,
                          108,
                          121,
                          109,
                          111,
                          116,
                          105,
                          111,
                          110,
                          47,
                          104,
                          108,
                          115,
                          46,
                          106,
                          115,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          24,
                          17,
                          17,
                        ]),
                        o,
                        t.box(
                          t.types.btrt,
                          new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])
                        ),
                        t.box(
                          t.types.pasp,
                          new Uint8Array([
                            c >> 24,
                            255 & (c >> 16),
                            255 & (c >> 8),
                            255 & c,
                            d >> 24,
                            255 & (d >> 16),
                            255 & (d >> 8),
                            255 & d,
                          ])
                        )
                      );
                    }),
                    (t.esds = function (t) {
                      var e = t.config.length;
                      return new Uint8Array(
                        [
                          0,
                          0,
                          0,
                          0,
                          3,
                          23 + e,
                          0,
                          1,
                          0,
                          4,
                          15 + e,
                          64,
                          21,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          5,
                        ]
                          .concat([e])
                          .concat(t.config)
                          .concat([6, 1, 2])
                      );
                    }),
                    (t.mp4a = function (e) {
                      var r = e.samplerate;
                      return t.box(
                        t.types.mp4a,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          e.channelCount,
                          0,
                          16,
                          0,
                          0,
                          0,
                          0,
                          255 & (r >> 8),
                          255 & r,
                          0,
                          0,
                        ]),
                        t.box(t.types.esds, t.esds(e))
                      );
                    }),
                    (t.mp3 = function (e) {
                      var r = e.samplerate;
                      return t.box(
                        t.types['.mp3'],
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          e.channelCount,
                          0,
                          16,
                          0,
                          0,
                          0,
                          0,
                          255 & (r >> 8),
                          255 & r,
                          0,
                          0,
                        ])
                      );
                    }),
                    (t.stsd = function (e) {
                      return 'audio' === e.type
                        ? e.isAAC || 'mp3' !== e.codec
                          ? t.box(t.types.stsd, t.STSD, t.mp4a(e))
                          : t.box(t.types.stsd, t.STSD, t.mp3(e))
                        : t.box(t.types.stsd, t.STSD, t.avc1(e));
                    }),
                    (t.tkhd = function (e) {
                      var r = e.id,
                        n = e.duration * e.timescale,
                        i = e.width,
                        a = e.height,
                        s = Math.floor(n / 4294967296),
                        o = Math.floor(n % 4294967296);
                      return t.box(
                        t.types.tkhd,
                        new Uint8Array([
                          1,
                          0,
                          0,
                          7,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          2,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          3,
                          255 & (r >> 24),
                          255 & (r >> 16),
                          255 & (r >> 8),
                          255 & r,
                          0,
                          0,
                          0,
                          0,
                          s >> 24,
                          255 & (s >> 16),
                          255 & (s >> 8),
                          255 & s,
                          o >> 24,
                          255 & (o >> 16),
                          255 & (o >> 8),
                          255 & o,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          64,
                          0,
                          0,
                          0,
                          255 & (i >> 8),
                          255 & i,
                          0,
                          0,
                          255 & (a >> 8),
                          255 & a,
                          0,
                          0,
                        ])
                      );
                    }),
                    (t.traf = function (e, r) {
                      var n = t.sdtp(e),
                        i = e.id,
                        a = Math.floor(r / 4294967296),
                        s = Math.floor(r % 4294967296);
                      return t.box(
                        t.types.traf,
                        t.box(
                          t.types.tfhd,
                          new Uint8Array([
                            0,
                            0,
                            0,
                            0,
                            i >> 24,
                            255 & (i >> 16),
                            255 & (i >> 8),
                            255 & i,
                          ])
                        ),
                        t.box(
                          t.types.tfdt,
                          new Uint8Array([
                            1,
                            0,
                            0,
                            0,
                            a >> 24,
                            255 & (a >> 16),
                            255 & (a >> 8),
                            255 & a,
                            s >> 24,
                            255 & (s >> 16),
                            255 & (s >> 8),
                            255 & s,
                          ])
                        ),
                        t.trun(e, n.length + 16 + 20 + 8 + 16 + 8 + 8),
                        n
                      );
                    }),
                    (t.trak = function (e) {
                      return (
                        (e.duration = e.duration || 4294967295),
                        t.box(t.types.trak, t.tkhd(e), t.mdia(e))
                      );
                    }),
                    (t.trex = function (e) {
                      var r = e.id;
                      return t.box(
                        t.types.trex,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          r >> 24,
                          255 & (r >> 16),
                          255 & (r >> 8),
                          255 & r,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          0,
                          1,
                        ])
                      );
                    }),
                    (t.trun = function (e, r) {
                      var n,
                        i,
                        a,
                        s,
                        o,
                        l,
                        u = e.samples || [],
                        c = u.length,
                        d = 12 + 16 * c,
                        f = new Uint8Array(d);
                      for (
                        r += 8 + d,
                          f.set(
                            [
                              0,
                              0,
                              15,
                              1,
                              255 & (c >>> 24),
                              255 & (c >>> 16),
                              255 & (c >>> 8),
                              255 & c,
                              255 & (r >>> 24),
                              255 & (r >>> 16),
                              255 & (r >>> 8),
                              255 & r,
                            ],
                            0
                          ),
                          n = 0;
                        n < c;
                        n++
                      )
                        (a = (i = u[n]).duration),
                          (s = i.size),
                          (o = i.flags),
                          (l = i.cts),
                          f.set(
                            [
                              255 & (a >>> 24),
                              255 & (a >>> 16),
                              255 & (a >>> 8),
                              255 & a,
                              255 & (s >>> 24),
                              255 & (s >>> 16),
                              255 & (s >>> 8),
                              255 & s,
                              (o.isLeading << 2) | o.dependsOn,
                              (o.isDependedOn << 6) |
                                (o.hasRedundancy << 4) |
                                (o.paddingValue << 1) |
                                o.isNonSync,
                              61440 & o.degradPrio,
                              15 & o.degradPrio,
                              255 & (l >>> 24),
                              255 & (l >>> 16),
                              255 & (l >>> 8),
                              255 & l,
                            ],
                            12 + 16 * n
                          );
                      return t.box(t.types.trun, f);
                    }),
                    (t.initSegment = function (e) {
                      t.types || t.init();
                      var r = t.moov(e),
                        n = new Uint8Array(t.FTYP.byteLength + r.byteLength);
                      return n.set(t.FTYP), n.set(r, t.FTYP.byteLength), n;
                    }),
                    t
                  );
                })();
                (n.types = void 0),
                  (n.HDLR_TYPES = void 0),
                  (n.STTS = void 0),
                  (n.STSC = void 0),
                  (n.STCO = void 0),
                  (n.STSZ = void 0),
                  (n.VMHD = void 0),
                  (n.SMHD = void 0),
                  (n.STSD = void 0),
                  (n.FTYP = void 0),
                  (n.DINF = void 0),
                  (e.default = n);
              },
              './src/remux/mp4-remuxer.ts': function (t, e, r) {
                'use strict';
                function n() {
                  return (n =
                    Object.assign ||
                    function (t) {
                      for (var e, r = 1; r < arguments.length; r++)
                        for (var n in (e = arguments[r]))
                          Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                      return t;
                    }).apply(this, arguments);
                }
                function i(t, e) {
                  var r;
                  if (null === e) return t;
                  for (r = e < t ? -8589934592 : 8589934592; 4294967296 < Math.abs(t - e); ) t += r;
                  return t;
                }
                r.r(e),
                  r.d(e, 'default', function () {
                    return p;
                  }),
                  r.d(e, 'normalizePts', function () {
                    return i;
                  });
                var a = r('./src/polyfills/number.ts'),
                  s = r('./src/remux/aac-helper.ts'),
                  o = r('./src/remux/mp4-generator.ts'),
                  l = r('./src/events.ts'),
                  u = r('./src/errors.ts'),
                  c = r('./src/utils/logger.ts'),
                  d = r('./src/types/loader.ts'),
                  f = r('./src/utils/timescale-conversion.ts'),
                  h = null,
                  v = null,
                  g = !1,
                  p = (function () {
                    function t(t, e, r, n) {
                      if (
                        (void 0 === n && (n = ''),
                        (this.observer = void 0),
                        (this.config = void 0),
                        (this.typeSupported = void 0),
                        (this.ISGenerated = !1),
                        (this._initPTS = void 0),
                        (this._initDTS = void 0),
                        (this.nextAvcDts = null),
                        (this.nextAudioPts = null),
                        (this.isAudioContiguous = !1),
                        (this.isVideoContiguous = !1),
                        (this.observer = t),
                        (this.config = e),
                        (this.typeSupported = r),
                        (this.ISGenerated = !1),
                        null === h)
                      ) {
                        var i = (navigator.userAgent || '').match(/Chrome\/(\d+)/i);
                        h = i ? parseInt(i[1]) : 0;
                      }
                      if (null === v) {
                        var a = navigator.userAgent.match(/Safari\/(\d+)/i);
                        v = a ? parseInt(a[1]) : 0;
                      }
                      g = (!!h && 75 > h) || (!!v && 600 > v);
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {}),
                      (e.resetTimeStamp = function (t) {
                        this._initPTS = this._initDTS = t;
                      }),
                      (e.resetNextTimestamp = function () {
                        (this.isVideoContiguous = !1), (this.isAudioContiguous = !1);
                      }),
                      (e.resetInitSegment = function () {
                        this.ISGenerated = !1;
                      }),
                      (e.getVideoStartPts = function (t) {
                        var e = !1,
                          r = t.reduce(function (t, r) {
                            var n = r.pts - t;
                            return -4294967296 > n ? ((e = !0), i(t, r.pts)) : 0 < n ? t : r.pts;
                          }, t[0].pts);
                        return e && c.logger.debug('PTS rollover detected'), r;
                      }),
                      (e.remux = function (t, e, r, n, a, s, o, l) {
                        var u,
                          f,
                          h,
                          v,
                          g,
                          p,
                          m = a,
                          y = a,
                          b = -1 < t.pid,
                          E = -1 < e.pid,
                          T = e.samples.length,
                          A = 0 < t.samples.length,
                          S = 1 < T;
                        if (((!b || A) && (!E || S)) || this.ISGenerated || o) {
                          this.ISGenerated || (h = this.generateIS(t, e, a));
                          var L = this.isVideoContiguous,
                            _ = -1;
                          if (
                            S &&
                            ((_ = (function (t) {
                              for (var e = 0; e < t.length; e++) if (t[e].key) return e;
                              return -1;
                            })(e.samples)),
                            !L && this.config.forceKeyFrameOnDiscontinuity)
                          )
                            if (((p = !0), 0 < _)) {
                              c.logger.warn(
                                '[mp4-remuxer]: Dropped ' +
                                  _ +
                                  ' out of ' +
                                  T +
                                  ' video samples due to a missing keyframe'
                              );
                              var k = this.getVideoStartPts(e.samples);
                              (e.samples = e.samples.slice(_)),
                                (e.dropped += _),
                                (y += (e.samples[0].pts - k) / (e.timescale || 9e4));
                            } else
                              -1 === _ &&
                                (c.logger.warn(
                                  '[mp4-remuxer]: No keyframe found out of ' + T + ' video samples'
                                ),
                                (p = !1));
                          if (this.ISGenerated) {
                            if (A && S) {
                              var D = this.getVideoStartPts(e.samples),
                                w = (i(t.samples[0].pts, D) - D) / e.inputTimeScale;
                              (m += Math.max(0, w)), (y += Math.max(0, -w));
                            }
                            if (A) {
                              if (
                                (t.samplerate ||
                                  (c.logger.warn(
                                    '[mp4-remuxer]: regenerate InitSegment as audio detected'
                                  ),
                                  (h = this.generateIS(t, e, a))),
                                (f = this.remuxAudio(
                                  t,
                                  m,
                                  this.isAudioContiguous,
                                  s,
                                  E || S || l === d.PlaylistLevelType.AUDIO ? y : void 0
                                )),
                                S)
                              ) {
                                var R = f ? f.endPTS - f.startPTS : 0;
                                e.inputTimeScale ||
                                  (c.logger.warn(
                                    '[mp4-remuxer]: regenerate InitSegment as video detected'
                                  ),
                                  (h = this.generateIS(t, e, a))),
                                  (u = this.remuxVideo(e, y, L, R));
                              }
                            } else S && (u = this.remuxVideo(e, y, L, 0));
                            u && ((u.firstKeyFrame = _), (u.independent = -1 !== _));
                          }
                        }
                        return (
                          this.ISGenerated &&
                            (r.samples.length && (g = this.remuxID3(r, a)),
                            n.samples.length && (v = this.remuxText(n, a))),
                          { audio: f, video: u, initSegment: h, independent: p, text: v, id3: g }
                        );
                      }),
                      (e.generateIS = function (t, e, r) {
                        var n,
                          s,
                          l,
                          u = t.samples,
                          c = e.samples,
                          d = this.typeSupported,
                          f = {},
                          h = !Object(a.isFiniteNumber)(this._initPTS),
                          v = 'audio/mp4';
                        if (
                          (h && (n = s = 1 / 0),
                          t.config &&
                            u.length &&
                            ((t.timescale = t.samplerate),
                            !t.isAAC &&
                              (d.mpeg
                                ? ((v = 'audio/mpeg'), (t.codec = ''))
                                : d.mp3 && (t.codec = 'mp3')),
                            (f.audio = {
                              id: 'audio',
                              container: v,
                              codec: t.codec,
                              initSegment:
                                !t.isAAC && d.mpeg ? new Uint8Array(0) : o.default.initSegment([t]),
                              metadata: { channelCount: t.channelCount },
                            }),
                            h && ((l = t.inputTimeScale), (n = s = u[0].pts - Math.round(l * r)))),
                          e.sps &&
                            e.pps &&
                            c.length &&
                            ((e.timescale = e.inputTimeScale),
                            (f.video = {
                              id: 'main',
                              container: 'video/mp4',
                              codec: e.codec,
                              initSegment: o.default.initSegment([e]),
                              metadata: { width: e.width, height: e.height },
                            }),
                            h))
                        ) {
                          l = e.inputTimeScale;
                          var g = this.getVideoStartPts(c),
                            p = Math.round(l * r);
                          (s = Math.min(s, i(c[0].dts, g) - p)), (n = Math.min(n, g - p));
                        }
                        return Object.keys(f).length
                          ? ((this.ISGenerated = !0),
                            h && ((this._initPTS = n), (this._initDTS = s)),
                            { tracks: f, initPTS: n, timescale: l })
                          : void 0;
                      }),
                      (e.remuxVideo = function (t, e, r, a) {
                        var s,
                          d,
                          v,
                          p = t.inputTimeScale,
                          y = t.samples,
                          b = [],
                          E = y.length,
                          T = this._initPTS,
                          A = this.nextAvcDts,
                          S = 8,
                          L = Number.POSITIVE_INFINITY,
                          _ = Number.NEGATIVE_INFINITY,
                          k = 0,
                          D = !1;
                        (r && null !== A) || (A = e * p - (y[0].pts - i(y[0].dts, y[0].pts)));
                        for (var w, R = 0; R < E; R++)
                          ((w = y[R]).pts = i(w.pts - T, A)),
                            (w.dts = i(w.dts - T, A)),
                            w.dts > w.pts && (k = Math.max(Math.min(k, w.pts - w.dts), -18e3)),
                            w.dts < y[0 < R ? R - 1 : R].dts && (D = !0);
                        D &&
                          y.sort(function (t, e) {
                            var r = t.dts - e.dts,
                              n = t.pts - e.pts;
                            return r || n;
                          }),
                          (d = y[0].dts),
                          (v = y[y.length - 1].dts);
                        var C = Math.round((v - d) / (E - 1));
                        if (0 > k) {
                          if (k < -2 * C) {
                            c.logger.warn(
                              'PTS < DTS detected in video samples, offsetting DTS from PTS by ' +
                                Object(f.toMsFromMpegTsClock)(-C, !0) +
                                ' ms'
                            );
                            for (var x = k, I = 0; I < E; I++)
                              (y[I].dts = x = Math.max(x, y[I].pts - C)),
                                (y[I].pts = Math.max(x, y[I].pts));
                          } else {
                            c.logger.warn(
                              'PTS < DTS detected in video samples, shifting DTS by ' +
                                Object(f.toMsFromMpegTsClock)(k, !0) +
                                ' ms to overcome this issue'
                            );
                            for (var O = 0; O < E; O++) y[O].dts += k;
                          }
                          d = y[0].dts;
                        }
                        if (r) {
                          var P = d - A,
                            F = P > C;
                          if (F || -1 > P) {
                            F
                              ? c.logger.warn(
                                  'AVC: ' +
                                    Object(f.toMsFromMpegTsClock)(P, !0) +
                                    ' ms (' +
                                    P +
                                    'dts) hole between fragments detected, filling it'
                                )
                              : c.logger.warn(
                                  'AVC: ' +
                                    Object(f.toMsFromMpegTsClock)(-P, !0) +
                                    ' ms (' +
                                    P +
                                    'dts) overlapping between fragments detected'
                                ),
                              (d = A);
                            var M = y[0].pts - P;
                            (y[0].dts = d),
                              (y[0].pts = M),
                              c.logger.log(
                                'Video: First PTS/DTS adjusted: ' +
                                  Object(f.toMsFromMpegTsClock)(M, !0) +
                                  '/' +
                                  Object(f.toMsFromMpegTsClock)(d, !0) +
                                  ', delta: ' +
                                  Object(f.toMsFromMpegTsClock)(P, !0) +
                                  ' ms'
                              );
                          }
                        }
                        g && (d = Math.max(0, d));
                        for (var B = 0, N = 0, U = 0; U < E; U++) {
                          for (var j = y[U], G = j.units, H = G.length, V = 0, W = 0; W < H; W++)
                            V += G[W].data.length;
                          (N += V),
                            (B += H),
                            (j.length = V),
                            (j.dts = Math.max(j.dts, d)),
                            (j.pts = Math.max(j.pts, j.dts, 0)),
                            (L = Math.min(j.pts, L)),
                            (_ = Math.max(j.pts, _));
                        }
                        v = y[E - 1].dts;
                        var K,
                          q = N + 4 * B + 8;
                        try {
                          K = new Uint8Array(q);
                        } catch (t) {
                          return void this.observer.emit(l.Events.ERROR, l.Events.ERROR, {
                            type: u.ErrorTypes.MUX_ERROR,
                            details: u.ErrorDetails.REMUX_ALLOC_ERROR,
                            fatal: !1,
                            bytes: q,
                            reason: 'fail allocating video mdat ' + q,
                          });
                        }
                        var z = new DataView(K.buffer);
                        z.setUint32(0, q), K.set(o.default.types.mdat, 4);
                        for (var Y = 0; Y < E; Y++) {
                          for (var X = y[Y], Q = X.units, $ = 0, J = 0, Z = Q.length; J < Z; J++) {
                            var tt = Q[J],
                              et = tt.data,
                              rt = tt.data.byteLength;
                            z.setUint32(S, rt), (S += 4), K.set(et, S), (S += rt), ($ += 4 + rt);
                          }
                          if (Y < E - 1) s = y[Y + 1].dts - X.dts;
                          else {
                            var nt = this.config,
                              it = X.dts - y[0 < Y ? Y - 1 : Y].dts;
                            if (nt.stretchShortVideoTrack && null !== this.nextAudioPts) {
                              var at = Math.floor(nt.maxBufferHole * p),
                                st = (a ? L + a * p : this.nextAudioPts) - X.pts;
                              st > at
                                ? (0 > (s = st - it) && (s = it),
                                  c.logger.log(
                                    '[mp4-remuxer]: It is approximately ' +
                                      st / 90 +
                                      ' ms to the next segment; using duration ' +
                                      s / 90 +
                                      ' ms for the last video frame.'
                                  ))
                                : (s = it);
                            } else s = it;
                          }
                          var ot = Math.round(X.pts - X.dts);
                          b.push(new m(X.key, s, $, ot));
                        }
                        if (b.length && h && 70 > h) {
                          var lt = b[0].flags;
                          (lt.dependsOn = 2), (lt.isNonSync = 0);
                        }
                        console.assert(void 0 !== s, 'mp4SampleDuration must be computed'),
                          (this.nextAvcDts = A = v + s),
                          (this.isVideoContiguous = !0);
                        var ut = {
                          data1: o.default.moof(t.sequenceNumber++, d, n({}, t, { samples: b })),
                          data2: K,
                          startPTS: L / p,
                          endPTS: (_ + s) / p,
                          startDTS: d / p,
                          endDTS: A / p,
                          type: 'video',
                          hasAudio: !1,
                          hasVideo: !0,
                          nb: b.length,
                          dropped: t.dropped,
                        };
                        return (
                          (t.samples = []),
                          (t.dropped = 0),
                          console.assert(K.length, 'MDAT length must not be zero'),
                          ut
                        );
                      }),
                      (e.remuxAudio = function (t, e, r, a, d) {
                        var f = t.inputTimeScale,
                          h = f / (t.samplerate ? t.samplerate : f),
                          v = t.isAAC ? 1024 : 1152,
                          g = v * h,
                          p = this._initPTS,
                          y = !t.isAAC && this.typeSupported.mpeg,
                          b = [],
                          E = t.samples,
                          T = y ? 0 : 8,
                          A = this.nextAudioPts || -1,
                          S = e * f;
                        if (
                          ((this.isAudioContiguous = r =
                            r ||
                            (E.length &&
                              0 < A &&
                              ((a && 9e3 > Math.abs(S - A)) ||
                                Math.abs(i(E[0].pts - p, S) - A) < 20 * g))),
                          E.forEach(function (t) {
                            t.pts = i(t.pts - p, S);
                          }),
                          !r || 0 > A)
                        ) {
                          if (
                            !(E = E.filter(function (t) {
                              return 0 <= t.pts;
                            })).length
                          )
                            return;
                          A = 0 === d ? 0 : a ? Math.max(0, S) : E[0].pts;
                        }
                        if (t.isAAC)
                          for (
                            var L = void 0 !== d, _ = this.config.maxAudioFramesDrift, k = 0, D = A;
                            k < E.length;
                            k++
                          ) {
                            var w = E[k],
                              R = w.pts,
                              C = R - D,
                              x = Math.abs((1e3 * C) / f);
                            if (C <= -_ * g && L)
                              0 === k &&
                                (c.logger.warn(
                                  'Audio frame @ ' +
                                    (R / f).toFixed(3) +
                                    's overlaps nextAudioPts by ' +
                                    Math.round((1e3 * C) / f) +
                                    ' ms.'
                                ),
                                (this.nextAudioPts = A = D = R));
                            else if (C >= _ * g && 1e4 > x && L) {
                              var I = Math.round(C / g);
                              0 > (D = R - I * g) && (I--, (D += g)),
                                0 === k && (this.nextAudioPts = A = D),
                                c.logger.warn(
                                  '[mp4-remuxer]: Injecting ' +
                                    I +
                                    ' audio frame @ ' +
                                    (D / f).toFixed(3) +
                                    's due to ' +
                                    Math.round((1e3 * C) / f) +
                                    ' ms gap.'
                                );
                              for (var O = 0; O < I; O++) {
                                var P = Math.max(D, 0),
                                  F = s.default.getSilentFrame(
                                    t.manifestCodec || t.codec,
                                    t.channelCount
                                  );
                                F ||
                                  (c.logger.log(
                                    '[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.'
                                  ),
                                  (F = w.unit.subarray())),
                                  E.splice(k, 0, { unit: F, pts: P }),
                                  (D += g),
                                  k++;
                              }
                            }
                            (w.pts = D), (D += g);
                          }
                        for (var M, B = null, N = null, U = 0, j = E.length; j--; )
                          U += E[j].unit.byteLength;
                        for (var G = 0, H = E.length; G < H; G++) {
                          var V = E[G],
                            W = V.unit,
                            K = V.pts;
                          if (null !== N) b[G - 1].duration = Math.round((K - N) / h);
                          else {
                            if ((r && t.isAAC && (K = A), (B = K), !(0 < U))) return;
                            U += T;
                            try {
                              M = new Uint8Array(U);
                            } catch (t) {
                              return void this.observer.emit(l.Events.ERROR, l.Events.ERROR, {
                                type: u.ErrorTypes.MUX_ERROR,
                                details: u.ErrorDetails.REMUX_ALLOC_ERROR,
                                fatal: !1,
                                bytes: U,
                                reason: 'fail allocating audio mdat ' + U,
                              });
                            }
                            y ||
                              (new DataView(M.buffer).setUint32(0, U),
                              M.set(o.default.types.mdat, 4));
                          }
                          M.set(W, T);
                          var q = W.byteLength;
                          (T += q), b.push(new m(!0, v, q, 0)), (N = K);
                        }
                        var z = b.length;
                        if (z) {
                          var Y = b[b.length - 1];
                          this.nextAudioPts = A = N + h * Y.duration;
                          var X = y
                            ? new Uint8Array(0)
                            : o.default.moof(t.sequenceNumber++, B / h, n({}, t, { samples: b }));
                          t.samples = [];
                          var Q = B / f,
                            $ = A / f,
                            J = {
                              data1: X,
                              data2: M,
                              startPTS: Q,
                              endPTS: $,
                              startDTS: Q,
                              endDTS: $,
                              type: 'audio',
                              hasAudio: !0,
                              hasVideo: !1,
                              nb: z,
                            };
                          return (
                            (this.isAudioContiguous = !0),
                            console.assert(M.length, 'MDAT length must not be zero'),
                            J
                          );
                        }
                      }),
                      (e.remuxEmptyAudio = function (t, e, r, n) {
                        var i = t.inputTimeScale,
                          a = i / (t.samplerate ? t.samplerate : i),
                          o = this.nextAudioPts,
                          l = (null === o ? n.startDTS * i : o) + this._initDTS,
                          u = n.endDTS * i + this._initDTS,
                          d = 1024 * a,
                          f = Math.ceil((u - l) / d),
                          h = s.default.getSilentFrame(t.manifestCodec || t.codec, t.channelCount);
                        if ((c.logger.warn('[mp4-remuxer]: remux empty Audio'), h)) {
                          for (var v, g = [], p = 0; p < f; p++)
                            (v = l + p * d), g.push({ unit: h, pts: v, dts: v });
                          return (t.samples = g), this.remuxAudio(t, e, r, !1);
                        }
                        c.logger.trace(
                          '[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec'
                        );
                      }),
                      (e.remuxID3 = function (t, e) {
                        var r = t.samples.length;
                        if (r) {
                          for (
                            var n,
                              a = t.inputTimeScale,
                              s = this._initPTS,
                              o = this._initDTS,
                              l = 0;
                            l < r;
                            l++
                          )
                            ((n = t.samples[l]).pts = i(n.pts - s, e * a) / a),
                              (n.dts = i(n.dts - o, e * a) / a);
                          var u = t.samples;
                          return (t.samples = []), { samples: u };
                        }
                      }),
                      (e.remuxText = function (t, e) {
                        var r = t.samples.length;
                        if (r) {
                          for (var n, a = t.inputTimeScale, s = this._initPTS, o = 0; o < r; o++)
                            (n = t.samples[o]).pts = i(n.pts - s, e * a) / a;
                          t.samples.sort(function (t, e) {
                            return t.pts - e.pts;
                          });
                          var l = t.samples;
                          return (t.samples = []), { samples: l };
                        }
                      }),
                      t
                    );
                  })(),
                  m = function (t, e, r, n) {
                    (this.size = void 0),
                      (this.duration = void 0),
                      (this.cts = void 0),
                      (this.flags = void 0),
                      (this.duration = e),
                      (this.size = r),
                      (this.cts = n),
                      (this.flags = new y(t));
                  },
                  y = function (t) {
                    (this.isLeading = 0),
                      (this.isDependedOn = 0),
                      (this.hasRedundancy = 0),
                      (this.degradPrio = 0),
                      (this.dependsOn = 1),
                      (this.isNonSync = 1),
                      (this.dependsOn = t ? 2 : 1),
                      (this.isNonSync = t ? 0 : 1);
                  };
              },
              './src/remux/passthrough-remuxer.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  var r = null == t ? void 0 : t.codec;
                  return r && 4 < r.length
                    ? r
                    : 'hvc1' === r
                    ? 'hvc1.1.c.L120.90'
                    : 'av01' === r
                    ? 'av01.0.04M.08'
                    : 'avc1' === r || e === s.ElementaryStreamTypes.VIDEO
                    ? 'avc1.42e01e'
                    : 'mp4a.40.5';
                }
                r.r(e);
                var i = r('./src/polyfills/number.ts'),
                  a = r('./src/utils/mp4-tools.ts'),
                  s = r('./src/loader/fragment.ts'),
                  o = r('./src/utils/logger.ts'),
                  l = (function () {
                    function t() {
                      (this.emitInitSegment = !1),
                        (this.audioCodec = void 0),
                        (this.videoCodec = void 0),
                        (this.initData = void 0),
                        (this.initPTS = void 0),
                        (this.initTracks = void 0),
                        (this.lastEndDTS = null);
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {}),
                      (e.resetTimeStamp = function (t) {
                        (this.initPTS = t), (this.lastEndDTS = null);
                      }),
                      (e.resetNextTimestamp = function () {
                        this.lastEndDTS = null;
                      }),
                      (e.resetInitSegment = function (t, e, r) {
                        (this.audioCodec = e),
                          (this.videoCodec = r),
                          this.generateInitSegment(t),
                          (this.emitInitSegment = !0);
                      }),
                      (e.generateInitSegment = function (t) {
                        var e = this.audioCodec,
                          r = this.videoCodec;
                        if (!t || !t.byteLength)
                          return (this.initTracks = void 0), void (this.initData = void 0);
                        var i = (this.initData = Object(a.parseInitSegment)(t));
                        e || (e = n(i.audio, s.ElementaryStreamTypes.AUDIO)),
                          r || (r = n(i.video, s.ElementaryStreamTypes.VIDEO));
                        var l = {};
                        i.audio && i.video
                          ? (l.audiovideo = {
                              container: 'video/mp4',
                              codec: e + ',' + r,
                              initSegment: t,
                              id: 'main',
                            })
                          : i.audio
                          ? (l.audio = {
                              container: 'audio/mp4',
                              codec: e,
                              initSegment: t,
                              id: 'audio',
                            })
                          : i.video
                          ? (l.video = {
                              container: 'video/mp4',
                              codec: r,
                              initSegment: t,
                              id: 'main',
                            })
                          : o.logger.warn(
                              '[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.'
                            ),
                          (this.initTracks = l);
                      }),
                      (e.remux = function (t, e, r, n, s) {
                        var l = this.initPTS,
                          c = this.lastEndDTS,
                          d = {
                            audio: void 0,
                            video: void 0,
                            text: n,
                            id3: r,
                            initSegment: void 0,
                          };
                        Object(i.isFiniteNumber)(c) || (c = this.lastEndDTS = s || 0);
                        var f = e.samples;
                        if (!f || !f.length) return d;
                        var h = { initPTS: void 0, timescale: 1 },
                          v = this.initData;
                        if (
                          ((v && v.length) || (this.generateInitSegment(f), (v = this.initData)),
                          !v || !v.length)
                        )
                          return (
                            o.logger.warn(
                              '[passthrough-remuxer.ts]: Failed to generate initSegment.'
                            ),
                            d
                          );
                        this.emitInitSegment &&
                          ((h.tracks = this.initTracks), (this.emitInitSegment = !1)),
                          Object(i.isFiniteNumber)(l) ||
                            (this.initPTS = h.initPTS = l = u(v, f, c));
                        var g = Object(a.getDuration)(f, v),
                          p = c,
                          m = g + p;
                        Object(a.offsetStartDTS)(v, f, l),
                          0 < g
                            ? (this.lastEndDTS = m)
                            : (o.logger.warn(
                                'Duration parsed from mp4 should be greater than zero'
                              ),
                              this.resetNextTimestamp());
                        var y = !!v.audio,
                          b = !!v.video,
                          E = '';
                        y && (E += 'audio'), b && (E += 'video');
                        var T = {
                          data1: f,
                          startPTS: p,
                          startDTS: p,
                          endPTS: m,
                          endDTS: m,
                          type: E,
                          hasAudio: y,
                          hasVideo: b,
                          nb: 1,
                          dropped: 0,
                        };
                        return (
                          (d.audio = 'audio' === T.type ? T : void 0),
                          (d.video = 'audio' === T.type ? void 0 : T),
                          (d.text = n),
                          (d.id3 = r),
                          (d.initSegment = h),
                          d
                        );
                      }),
                      t
                    );
                  })(),
                  u = function (t, e, r) {
                    return Object(a.getStartDTS)(t, e) - r;
                  };
                e.default = l;
              },
              './src/task-loop.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'default', function () {
                    return n;
                  });
                var n = (function () {
                  function t() {
                    (this._boundTick = void 0),
                      (this._tickTimer = null),
                      (this._tickInterval = null),
                      (this._tickCallCount = 0),
                      (this._boundTick = this.tick.bind(this));
                  }
                  var e = t.prototype;
                  return (
                    (e.destroy = function () {
                      this.onHandlerDestroying(), this.onHandlerDestroyed();
                    }),
                    (e.onHandlerDestroying = function () {
                      this.clearNextTick(), this.clearInterval();
                    }),
                    (e.onHandlerDestroyed = function () {}),
                    (e.hasInterval = function () {
                      return !!this._tickInterval;
                    }),
                    (e.hasNextTick = function () {
                      return !!this._tickTimer;
                    }),
                    (e.setInterval = function (t) {
                      return (
                        !this._tickInterval &&
                        ((this._tickInterval = self.setInterval(this._boundTick, t)), !0)
                      );
                    }),
                    (e.clearInterval = function () {
                      return (
                        !!this._tickInterval &&
                        (self.clearInterval(this._tickInterval), (this._tickInterval = null), !0)
                      );
                    }),
                    (e.clearNextTick = function () {
                      return (
                        !!this._tickTimer &&
                        (self.clearTimeout(this._tickTimer), (this._tickTimer = null), !0)
                      );
                    }),
                    (e.tick = function () {
                      this._tickCallCount++,
                        1 === this._tickCallCount &&
                          (this.doTick(),
                          1 < this._tickCallCount && this.tickImmediate(),
                          (this._tickCallCount = 0));
                    }),
                    (e.tickImmediate = function () {
                      this.clearNextTick(), (this._tickTimer = self.setTimeout(this._boundTick, 0));
                    }),
                    (e.doTick = function () {}),
                    t
                  );
                })();
              },
              './src/types/cmcd.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'CMCDVersion', function () {
                    return s;
                  }),
                  r.d(e, 'CMCDObjectType', function () {
                    return n;
                  }),
                  r.d(e, 'CMCDStreamingFormat', function () {
                    return i;
                  }),
                  r.d(e, 'CMCDStreamType', function () {
                    return a;
                  });
                var n,
                  i,
                  a,
                  s = 1;
                !(function (t) {
                  (t.MANIFEST = 'm'),
                    (t.AUDIO = 'a'),
                    (t.VIDEO = 'v'),
                    (t.MUXED = 'av'),
                    (t.INIT = 'i'),
                    (t.CAPTION = 'c'),
                    (t.TIMED_TEXT = 'tt'),
                    (t.KEY = 'k'),
                    (t.OTHER = 'o');
                })(n || (n = {})),
                  (function (t) {
                    (t.DASH = 'd'), (t.HLS = 'h'), (t.SMOOTH = 's'), (t.OTHER = 'o');
                  })(i || (i = {})),
                  (function (t) {
                    (t.VOD = 'v'), (t.LIVE = 'l');
                  })(a || (a = {}));
              },
              './src/types/level.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = 0; n < e.length; n++)
                    ((r = e[n]).enumerable = r.enumerable || !1),
                      (r.configurable = !0),
                      'value' in r && (r.writable = !0),
                      Object.defineProperty(t, r.key, r);
                }
                function i(t, e) {
                  var r = t.canSkipUntil,
                    n = t.canSkipDateRanges,
                    i = t.endSN;
                  return r && (void 0 === e ? 0 : e - i) < r ? (n ? a.v2 : a.Yes) : a.No;
                }
                var a;
                r.r(e),
                  r.d(e, 'HlsSkip', function () {
                    return a;
                  }),
                  r.d(e, 'getSkipValue', function () {
                    return i;
                  }),
                  r.d(e, 'HlsUrlParameters', function () {
                    return s;
                  }),
                  r.d(e, 'Level', function () {
                    return o;
                  }),
                  (function (t) {
                    (t.No = ''), (t.Yes = 'YES'), (t.v2 = 'v2');
                  })(a || (a = {}));
                var s = (function () {
                    function t(t, e, r) {
                      (this.msn = void 0),
                        (this.part = void 0),
                        (this.skip = void 0),
                        (this.msn = t),
                        (this.part = e),
                        (this.skip = r);
                    }
                    return (
                      (t.prototype.addDirectives = function (t) {
                        var e = new self.URL(t);
                        return (
                          void 0 !== this.msn &&
                            e.searchParams.set('_HLS_msn', this.msn.toString()),
                          void 0 !== this.part &&
                            e.searchParams.set('_HLS_part', this.part.toString()),
                          this.skip && e.searchParams.set('_HLS_skip', this.skip),
                          e.toString()
                        );
                      }),
                      t
                    );
                  })(),
                  o = (function () {
                    function t(t) {
                      (this.attrs = void 0),
                        (this.audioCodec = void 0),
                        (this.bitrate = void 0),
                        (this.codecSet = void 0),
                        (this.height = void 0),
                        (this.id = void 0),
                        (this.name = void 0),
                        (this.videoCodec = void 0),
                        (this.width = void 0),
                        (this.unknownCodecs = void 0),
                        (this.audioGroupIds = void 0),
                        (this.details = void 0),
                        (this.fragmentError = 0),
                        (this.loadError = 0),
                        (this.loaded = void 0),
                        (this.realBitrate = 0),
                        (this.textGroupIds = void 0),
                        (this.url = void 0),
                        (this._urlId = 0),
                        (this.url = [t.url]),
                        (this.attrs = t.attrs),
                        (this.bitrate = t.bitrate),
                        t.details && (this.details = t.details),
                        (this.id = t.id || 0),
                        (this.name = t.name),
                        (this.width = t.width || 0),
                        (this.height = t.height || 0),
                        (this.audioCodec = t.audioCodec),
                        (this.videoCodec = t.videoCodec),
                        (this.unknownCodecs = t.unknownCodecs),
                        (this.codecSet = [t.videoCodec, t.audioCodec]
                          .filter(function (t) {
                            return t;
                          })
                          .join(',')
                          .replace(/\.[^.,]+/g, ''));
                    }
                    return (
                      (e = t),
                      (r = [
                        {
                          key: 'maxBitrate',
                          get: function () {
                            return Math.max(this.realBitrate, this.bitrate);
                          },
                        },
                        {
                          key: 'uri',
                          get: function () {
                            return this.url[this._urlId] || '';
                          },
                        },
                        {
                          key: 'urlId',
                          get: function () {
                            return this._urlId;
                          },
                          set: function (t) {
                            var e = t % this.url.length;
                            this._urlId !== e && ((this.details = void 0), (this._urlId = e));
                          },
                        },
                      ]) && n(e.prototype, r),
                      i && n(e, i),
                      t
                    );
                    var e, r, i;
                  })();
              },
              './src/types/loader.ts': function (t, e, r) {
                'use strict';
                var n, i;
                r.r(e),
                  r.d(e, 'PlaylistContextType', function () {
                    return n;
                  }),
                  r.d(e, 'PlaylistLevelType', function () {
                    return i;
                  }),
                  (function (t) {
                    (t.MANIFEST = 'manifest'),
                      (t.LEVEL = 'level'),
                      (t.AUDIO_TRACK = 'audioTrack'),
                      (t.SUBTITLE_TRACK = 'subtitleTrack');
                  })(n || (n = {})),
                  (function (t) {
                    (t.MAIN = 'main'), (t.AUDIO = 'audio'), (t.SUBTITLE = 'subtitle');
                  })(i || (i = {}));
              },
              './src/types/transmuxer.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'ChunkMetadata', function () {
                    return n;
                  });
                var n = function (t, e, r, n, i, a) {
                  void 0 === n && (n = 0),
                    void 0 === i && (i = -1),
                    void 0 === a && (a = !1),
                    (this.level = void 0),
                    (this.sn = void 0),
                    (this.part = void 0),
                    (this.id = void 0),
                    (this.size = void 0),
                    (this.partial = void 0),
                    (this.transmuxing = { start: 0, executeStart: 0, executeEnd: 0, end: 0 }),
                    (this.buffering = {
                      audio: { start: 0, executeStart: 0, executeEnd: 0, end: 0 },
                      video: { start: 0, executeStart: 0, executeEnd: 0, end: 0 },
                      audiovideo: { start: 0, executeStart: 0, executeEnd: 0, end: 0 },
                    }),
                    (this.level = t),
                    (this.sn = e),
                    (this.id = r),
                    (this.size = n),
                    (this.part = i),
                    (this.partial = a);
                };
              },
              './src/utils/attr-list.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'AttrList', function () {
                    return a;
                  });
                var n = /^(\d+)x(\d+)$/,
                  i = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g,
                  a = (function () {
                    function t(e) {
                      for (var r in ('string' == typeof e && (e = t.parseAttrList(e)), e))
                        e.hasOwnProperty(r) && (this[r] = e[r]);
                    }
                    var e = t.prototype;
                    return (
                      (e.decimalInteger = function (t) {
                        var e = parseInt(this[t], 10);
                        return e > Number.MAX_SAFE_INTEGER ? 1 / 0 : e;
                      }),
                      (e.hexadecimalInteger = function (t) {
                        if (this[t]) {
                          var e = (this[t] || '0x').slice(2);
                          e = (1 & e.length ? '0' : '') + e;
                          for (var r = new Uint8Array(e.length / 2), n = 0; n < e.length / 2; n++)
                            r[n] = parseInt(e.slice(2 * n, 2 * n + 2), 16);
                          return r;
                        }
                        return null;
                      }),
                      (e.hexadecimalIntegerAsNumber = function (t) {
                        var e = parseInt(this[t], 16);
                        return e > Number.MAX_SAFE_INTEGER ? 1 / 0 : e;
                      }),
                      (e.decimalFloatingPoint = function (t) {
                        return parseFloat(this[t]);
                      }),
                      (e.optionalFloat = function (t, e) {
                        var r = this[t];
                        return r ? parseFloat(r) : e;
                      }),
                      (e.enumeratedString = function (t) {
                        return this[t];
                      }),
                      (e.bool = function (t) {
                        return 'YES' === this[t];
                      }),
                      (e.decimalResolution = function (t) {
                        var e = n.exec(this[t]);
                        return null === e
                          ? void 0
                          : { width: parseInt(e[1], 10), height: parseInt(e[2], 10) };
                      }),
                      (t.parseAttrList = function (t) {
                        var e,
                          r = {};
                        for (i.lastIndex = 0; null !== (e = i.exec(t)); ) {
                          var n = e[2];
                          0 === n.indexOf('"') &&
                            n.lastIndexOf('"') === n.length - 1 &&
                            (n = n.slice(1, -1)),
                            (r[e[1]] = n);
                        }
                        return r;
                      }),
                      t
                    );
                  })();
              },
              './src/utils/binary-search.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  (e.default = {
                    search: function (t, e) {
                      for (var r = 0, n = t.length - 1, i = null, a = null; r <= n; ) {
                        var s = e((a = t[(i = 0 | ((r + n) / 2))]));
                        if (0 < s) r = i + 1;
                        else {
                          if (!(0 > s)) return a;
                          n = i - 1;
                        }
                      }
                      return null;
                    },
                  });
              },
              './src/utils/buffer-helper.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  r.d(e, 'BufferHelper', function () {
                    return a;
                  });
                var n = r('./src/utils/logger.ts'),
                  i = {
                    length: 0,
                    start: function () {
                      return 0;
                    },
                    end: function () {
                      return 0;
                    },
                  },
                  a = (function () {
                    function t() {}
                    return (
                      (t.isBuffered = function (e, r) {
                        try {
                          if (e)
                            for (var n = t.getBuffered(e), i = 0; i < n.length; i++)
                              if (r >= n.start(i) && r <= n.end(i)) return !0;
                        } catch (t) {}
                        return !1;
                      }),
                      (t.bufferInfo = function (e, r, n) {
                        try {
                          if (e) {
                            var i,
                              a = t.getBuffered(e),
                              s = [];
                            for (i = 0; i < a.length; i++)
                              s.push({ start: a.start(i), end: a.end(i) });
                            return this.bufferedInfo(s, r, n);
                          }
                        } catch (t) {}
                        return { len: 0, start: r, end: r, nextStart: void 0 };
                      }),
                      (t.bufferedInfo = function (t, e, r) {
                        (e = Math.max(0, e)),
                          t.sort(function (t, e) {
                            var r = t.start - e.start;
                            return r || e.end - t.end;
                          });
                        var n = [];
                        if (r)
                          for (var i, a = 0; a < t.length; a++)
                            if ((i = n.length)) {
                              var s = n[i - 1].end;
                              t[a].start - s < r
                                ? t[a].end > s && (n[i - 1].end = t[a].end)
                                : n.push(t[a]);
                            } else n.push(t[a]);
                        else n = t;
                        for (var o, l = 0, u = e, c = e, d = 0; d < n.length; d++) {
                          var f = n[d].start,
                            h = n[d].end;
                          if (e + r >= f && e < h) (u = f), (l = (c = h) - e);
                          else if (e + r < f) {
                            o = f;
                            break;
                          }
                        }
                        return { len: l, start: u || 0, end: c || 0, nextStart: o };
                      }),
                      (t.getBuffered = function (t) {
                        try {
                          return t.buffered;
                        } catch (t) {
                          return n.logger.log('failed to get media.buffered', t), i;
                        }
                      }),
                      t
                    );
                  })();
              },
              './src/utils/codecs.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  var r = a[e];
                  return !!r && !0 === r[t.slice(0, 4)];
                }
                function i(t, e) {
                  return MediaSource.isTypeSupported((e || 'video') + '/mp4;codecs="' + t + '"');
                }
                r.r(e),
                  r.d(e, 'isCodecType', function () {
                    return n;
                  }),
                  r.d(e, 'isCodecSupportedInMp4', function () {
                    return i;
                  });
                var a = {
                  audio: {
                    'a3ds': !0,
                    'ac-3': !0,
                    'ac-4': !0,
                    'alac': !0,
                    'alaw': !0,
                    'dra1': !0,
                    'dts+': !0,
                    'dts-': !0,
                    'dtsc': !0,
                    'dtse': !0,
                    'dtsh': !0,
                    'ec-3': !0,
                    'enca': !0,
                    'g719': !0,
                    'g726': !0,
                    'm4ae': !0,
                    'mha1': !0,
                    'mha2': !0,
                    'mhm1': !0,
                    'mhm2': !0,
                    'mlpa': !0,
                    'mp4a': !0,
                    'raw ': !0,
                    'Opus': !0,
                    'samr': !0,
                    'sawb': !0,
                    'sawp': !0,
                    'sevc': !0,
                    'sqcp': !0,
                    'ssmv': !0,
                    'twos': !0,
                    'ulaw': !0,
                  },
                  video: {
                    'avc1': !0,
                    'avc2': !0,
                    'avc3': !0,
                    'avc4': !0,
                    'avcp': !0,
                    'av01': !0,
                    'drac': !0,
                    'dvav': !0,
                    'dvhe': !0,
                    'encv': !0,
                    'hev1': !0,
                    'hvc1': !0,
                    'mjp2': !0,
                    'mp4v': !0,
                    'mvc1': !0,
                    'mvc2': !0,
                    'mvc3': !0,
                    'mvc4': !0,
                    'resv': !0,
                    'rv60': !0,
                    's263': !0,
                    'svc1': !0,
                    'svc2': !0,
                    'vc-1': !0,
                    'vp08': !0,
                    'vp09': !0,
                  },
                  text: { stpp: !0, wvtt: !0 },
                };
              },
              './src/utils/discontinuities.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  for (var r, n = null, i = 0, a = t.length; i < a; i++)
                    if ((r = t[i]) && r.cc === e) {
                      n = r;
                      break;
                    }
                  return n;
                }
                function i(t, e, r) {
                  return !(!e.details || !(r.endCC > r.startCC || (t && t.cc < r.startCC)));
                }
                function a(t, e) {
                  var r = t.fragments,
                    i = e.fragments;
                  if (i.length && r.length) {
                    var a = n(r, i[0].cc);
                    return !a || (a && !a.startPTS)
                      ? void h.logger.log('No frag in previous level to align on')
                      : a;
                  }
                  h.logger.log('No fragments to align');
                }
                function s(t, e) {
                  if (t) {
                    var r = t.start + e;
                    (t.start = t.startPTS = r), (t.endPTS = r + t.duration);
                  }
                }
                function o(t, e) {
                  for (var r = e.fragments, n = 0, i = r.length; n < i; n++) s(r[n], t);
                  e.fragmentHint && s(e.fragmentHint, t), (e.alignedSliding = !0);
                }
                function l(t, e, r) {
                  e &&
                    ((function (t, e, r) {
                      if (i(t, r, e)) {
                        var n = a(r.details, e);
                        n &&
                          Object(f.isFiniteNumber)(n.start) &&
                          (h.logger.log(
                            'Adjusting PTS using last level due to CC increase within current level ' +
                              e.url
                          ),
                          o(n.start, e));
                      }
                    })(t, r, e),
                    !r.alignedSliding && e.details && u(r, e.details),
                    !r.alignedSliding &&
                      e.details &&
                      !r.skippedSegments &&
                      Object(v.adjustSliding)(e.details, r));
                }
                function u(t, e) {
                  if (e.fragments.length && t.hasProgramDateTime && e.hasProgramDateTime) {
                    var r = e.fragments[0].programDateTime,
                      n = t.fragments[0].programDateTime,
                      i = (n - r) / 1e3 + e.fragments[0].start;
                    i &&
                      Object(f.isFiniteNumber)(i) &&
                      (h.logger.log(
                        'Adjusting PTS using programDateTime delta ' +
                          (n - r) +
                          'ms, sliding:' +
                          i.toFixed(3) +
                          ' ' +
                          t.url +
                          ' '
                      ),
                      o(i, t));
                  }
                }
                function c(t, e) {
                  var r = t.programDateTime;
                  if (r) {
                    var n = (r - e) / 1e3;
                    (t.start = t.startPTS = n), (t.endPTS = n + t.duration);
                  }
                }
                function d(t, e) {
                  if (e.fragments.length && t.hasProgramDateTime && e.hasProgramDateTime) {
                    var r = e.fragments[0].programDateTime - 1e3 * e.fragments[0].start;
                    t.fragments.forEach(function (t) {
                      c(t, r);
                    }),
                      t.fragmentHint && c(t.fragmentHint, r),
                      (t.alignedSliding = !0);
                  }
                }
                r.r(e),
                  r.d(e, 'findFirstFragWithCC', function () {
                    return n;
                  }),
                  r.d(e, 'shouldAlignOnDiscontinuities', function () {
                    return i;
                  }),
                  r.d(e, 'findDiscontinuousReferenceFrag', function () {
                    return a;
                  }),
                  r.d(e, 'adjustSlidingStart', function () {
                    return o;
                  }),
                  r.d(e, 'alignStream', function () {
                    return l;
                  }),
                  r.d(e, 'alignPDT', function () {
                    return u;
                  }),
                  r.d(e, 'alignFragmentByPDTDelta', function () {
                    return c;
                  }),
                  r.d(e, 'alignMediaPlaylistByPDT', function () {
                    return d;
                  });
                var f = r('./src/polyfills/number.ts'),
                  h = r('./src/utils/logger.ts'),
                  v = r('./src/controller/level-helper.ts');
              },
              './src/utils/ewma-bandwidth-estimator.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = r('./src/utils/ewma.ts'),
                  i = (function () {
                    function t(t, e, r) {
                      (this.defaultEstimate_ = void 0),
                        (this.minWeight_ = void 0),
                        (this.minDelayMs_ = void 0),
                        (this.slow_ = void 0),
                        (this.fast_ = void 0),
                        (this.defaultEstimate_ = r),
                        (this.minWeight_ = 0.001),
                        (this.minDelayMs_ = 50),
                        (this.slow_ = new n.default(t)),
                        (this.fast_ = new n.default(e));
                    }
                    var e = t.prototype;
                    return (
                      (e.update = function (t, e) {
                        var r = this.slow_,
                          i = this.fast_;
                        this.slow_.halfLife !== t &&
                          (this.slow_ = new n.default(t, r.getEstimate(), r.getTotalWeight())),
                          this.fast_.halfLife !== e &&
                            (this.fast_ = new n.default(e, i.getEstimate(), i.getTotalWeight()));
                      }),
                      (e.sample = function (t, e) {
                        var r = (t = Math.max(t, this.minDelayMs_)) / 1e3,
                          n = (8 * e) / r;
                        this.fast_.sample(r, n), this.slow_.sample(r, n);
                      }),
                      (e.canEstimate = function () {
                        var t = this.fast_;
                        return t && t.getTotalWeight() >= this.minWeight_;
                      }),
                      (e.getEstimate = function () {
                        return this.canEstimate()
                          ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate())
                          : this.defaultEstimate_;
                      }),
                      (e.destroy = function () {}),
                      t
                    );
                  })();
                e.default = i;
              },
              './src/utils/ewma.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = (function () {
                  function t(t, e, r) {
                    void 0 === e && (e = 0),
                      void 0 === r && (r = 0),
                      (this.halfLife = void 0),
                      (this.alpha_ = void 0),
                      (this.estimate_ = void 0),
                      (this.totalWeight_ = void 0),
                      (this.halfLife = t),
                      (this.alpha_ = t ? Math.exp(Math.log(0.5) / t) : 0),
                      (this.estimate_ = e),
                      (this.totalWeight_ = r);
                  }
                  var e = t.prototype;
                  return (
                    (e.sample = function (t, e) {
                      var r = Math.pow(this.alpha_, t);
                      (this.estimate_ = e * (1 - r) + r * this.estimate_), (this.totalWeight_ += t);
                    }),
                    (e.getTotalWeight = function () {
                      return this.totalWeight_;
                    }),
                    (e.getEstimate = function () {
                      if (this.alpha_) {
                        var t = 1 - Math.pow(this.alpha_, this.totalWeight_);
                        if (t) return this.estimate_ / t;
                      }
                      return this.estimate_;
                    }),
                    t
                  );
                })();
                e.default = n;
              },
              './src/utils/fetch-loader.ts': function (t, e, r) {
                'use strict';
                function n(t) {
                  var e = 'function' == typeof Map ? new Map() : void 0;
                  return (n = function (t) {
                    function r() {
                      return i(t, arguments, o(this).constructor);
                    }
                    if (
                      null === t ||
                      ((n = t), -1 === Function.toString.call(n).indexOf('[native code]'))
                    )
                      return t;
                    var n;
                    if ('function' != typeof t)
                      throw new TypeError('Super expression must either be null or a function');
                    if (void 0 !== e) {
                      if (e.has(t)) return e.get(t);
                      e.set(t, r);
                    }
                    return (
                      (r.prototype = Object.create(t.prototype, {
                        constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 },
                      })),
                      s(r, t)
                    );
                  })(t);
                }
                function i(t, e, r) {
                  return (i = a()
                    ? Reflect.construct
                    : function (t, e, r) {
                        var n = [null];
                        n.push.apply(n, e);
                        var i = new (Function.bind.apply(t, n))();
                        return r && s(i, r.prototype), i;
                      }).apply(null, arguments);
                }
                function a() {
                  if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
                  if (Reflect.construct.sham) return !1;
                  if ('function' == typeof Proxy) return !0;
                  try {
                    return (
                      Boolean.prototype.valueOf.call(
                        Reflect.construct(Boolean, [], function () {})
                      ),
                      !0
                    );
                  } catch (t) {
                    return !1;
                  }
                }
                function s(t, e) {
                  return (s =
                    Object.setPrototypeOf ||
                    function (t, e) {
                      return (t.__proto__ = e), t;
                    })(t, e);
                }
                function o(t) {
                  return (o = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                        return t.__proto__ || Object.getPrototypeOf(t);
                      })(t);
                }
                function l() {
                  return (l =
                    Object.assign ||
                    function (t) {
                      for (var e, r = 1; r < arguments.length; r++)
                        for (var n in (e = arguments[r]))
                          Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                      return t;
                    }).apply(this, arguments);
                }
                function u() {
                  if (self.fetch && self.AbortController && self.ReadableStream && self.Request)
                    try {
                      return new self.ReadableStream({}), !0;
                    } catch (t) {}
                  return !1;
                }
                function c(t, e) {
                  return new self.Request(t.url, e);
                }
                r.r(e),
                  r.d(e, 'fetchSupported', function () {
                    return u;
                  });
                var d = r('./src/polyfills/number.ts'),
                  f = r('./src/loader/load-stats.ts'),
                  h = r('./src/demux/chunk-cache.ts'),
                  v = (function () {
                    function t(t) {
                      (this.fetchSetup = void 0),
                        (this.requestTimeout = void 0),
                        (this.request = void 0),
                        (this.response = void 0),
                        (this.controller = void 0),
                        (this.context = void 0),
                        (this.config = null),
                        (this.callbacks = null),
                        (this.stats = void 0),
                        (this.loader = null),
                        (this.fetchSetup = t.fetchSetup || c),
                        (this.controller = new self.AbortController()),
                        (this.stats = new f.LoadStats());
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {
                        (this.loader = this.callbacks = null), this.abortInternal();
                      }),
                      (e.abortInternal = function () {
                        var t = this.response;
                        (t && t.ok) || ((this.stats.aborted = !0), this.controller.abort());
                      }),
                      (e.abort = function () {
                        var t;
                        this.abortInternal(),
                          null !== (t = this.callbacks) &&
                            void 0 !== t &&
                            t.onAbort &&
                            this.callbacks.onAbort(this.stats, this.context, this.response);
                      }),
                      (e.load = function (t, e, r) {
                        var n = this,
                          i = this.stats;
                        if (i.loading.start) throw new Error('Loader can only be used once.');
                        i.loading.start = self.performance.now();
                        var a = (function (t, e) {
                            var r = {
                              method: 'GET',
                              mode: 'cors',
                              credentials: 'same-origin',
                              signal: e,
                              headers: new self.Headers(l({}, t.headers)),
                            };
                            return (
                              t.rangeEnd &&
                                r.headers.set(
                                  'Range',
                                  'bytes=' + t.rangeStart + '-' + (t.rangeEnd - 1)
                                ),
                              r
                            );
                          })(t, this.controller.signal),
                          s = r.onProgress,
                          o = 'arraybuffer' === t.responseType,
                          u = o ? 'byteLength' : 'length';
                        (this.context = t),
                          (this.config = e),
                          (this.callbacks = r),
                          (this.request = this.fetchSetup(t, a)),
                          self.clearTimeout(this.requestTimeout),
                          (this.requestTimeout = self.setTimeout(function () {
                            n.abortInternal(), r.onTimeout(i, t, n.response);
                          }, e.timeout)),
                          self
                            .fetch(this.request)
                            .then(function (r) {
                              if (((n.response = n.loader = r), !r.ok)) {
                                var a = r.status,
                                  l = r.statusText;
                                throw new g(l || 'fetch, bad network response', a, r);
                              }
                              return (
                                (i.loading.first = Math.max(
                                  self.performance.now(),
                                  i.loading.start
                                )),
                                (i.total = parseInt(r.headers.get('Content-Length') || '0')),
                                s && Object(d.isFiniteNumber)(e.highWaterMark)
                                  ? n.loadProgressively(r, i, t, e.highWaterMark, s)
                                  : o
                                  ? r.arrayBuffer()
                                  : r.text()
                              );
                            })
                            .then(function (a) {
                              var o = n.response;
                              self.clearTimeout(n.requestTimeout),
                                (i.loading.end = Math.max(self.performance.now(), i.loading.first)),
                                (i.loaded = i.total = a[u]);
                              var l = { url: o.url, data: a };
                              s && !Object(d.isFiniteNumber)(e.highWaterMark) && s(i, t, a, o),
                                r.onSuccess(l, i, t, o);
                            })
                            .catch(function (e) {
                              if ((self.clearTimeout(n.requestTimeout), !i.aborted)) {
                                var a = e.code || 0;
                                r.onError({ code: a, text: e.message }, t, e.details);
                              }
                            });
                      }),
                      (e.getCacheAge = function () {
                        var t = null;
                        if (this.response) {
                          var e = this.response.headers.get('age');
                          t = e ? parseFloat(e) : null;
                        }
                        return t;
                      }),
                      (e.loadProgressively = function (t, e, r, n, i) {
                        void 0 === n && (n = 0);
                        var a = new h.default(),
                          s = t.body.getReader();
                        return (function o() {
                          return s
                            .read()
                            .then(function (s) {
                              if (s.done)
                                return (
                                  a.dataLength && i(e, r, a.flush(), t),
                                  Promise.resolve(new ArrayBuffer(0))
                                );
                              var l = s.value,
                                u = l.length;
                              return (
                                (e.loaded += u),
                                u < n || a.dataLength
                                  ? (a.push(l), a.dataLength >= n && i(e, r, a.flush(), t))
                                  : i(e, r, l, t),
                                o()
                              );
                            })
                            .catch(function () {
                              return Promise.reject();
                            });
                        })();
                      }),
                      t
                    );
                  })(),
                  g = (function (t) {
                    function e(e, r, n) {
                      var i;
                      return (
                        ((i = t.call(this, e) || this).code = void 0),
                        (i.details = void 0),
                        (i.code = r),
                        (i.details = n),
                        i
                      );
                    }
                    return (
                      (n = t),
                      ((r = e).prototype = Object.create(n.prototype)),
                      (r.prototype.constructor = r),
                      s(r, n),
                      e
                    );
                    var r, n;
                  })(n(Error));
                e.default = v;
              },
              './src/utils/logger.ts': function (t, e, r) {
                'use strict';
                function n(t) {
                  var e = self.console[t];
                  return e ? e.bind(self.console, '[' + t + '] >') : a;
                }
                function i(t) {
                  if ((self.console && !0 === t) || 'object' == typeof t) {
                    !(function (t) {
                      for (
                        var e = arguments.length, r = Array(1 < e ? e - 1 : 0), i = 1;
                        i < e;
                        i++
                      )
                        r[i - 1] = arguments[i];
                      r.forEach(function (e) {
                        o[e] = t[e] ? t[e].bind(t) : n(e);
                      });
                    })(t, 'debug', 'log', 'info', 'warn', 'error');
                    try {
                      o.log();
                    } catch (t) {
                      o = s;
                    }
                  } else o = s;
                }
                r.r(e),
                  r.d(e, 'enableLogs', function () {
                    return i;
                  }),
                  r.d(e, 'logger', function () {
                    return l;
                  });
                var a = function () {},
                  s = { trace: a, debug: a, log: a, warn: a, info: a, error: a },
                  o = s,
                  l = s;
              },
              './src/utils/mediakeys-helper.ts': function (t, e, r) {
                'use strict';
                var n;
                r.r(e),
                  r.d(e, 'KeySystems', function () {
                    return n;
                  }),
                  r.d(e, 'requestMediaKeySystemAccess', function () {
                    return i;
                  }),
                  (function (t) {
                    (t.WIDEVINE = 'com.widevine.alpha'), (t.PLAYREADY = 'com.microsoft.playready');
                  })(n || (n = {}));
                var i =
                  'undefined' != typeof self &&
                  self.navigator &&
                  self.navigator.requestMediaKeySystemAccess
                    ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator)
                    : null;
              },
              './src/utils/mediasource-helper.ts': function (t, e, r) {
                'use strict';
                function n() {
                  return self.MediaSource || self.WebKitMediaSource;
                }
                r.r(e),
                  r.d(e, 'getMediaSource', function () {
                    return n;
                  });
              },
              './src/utils/mp4-tools.ts': function (t, e, r) {
                'use strict';
                function n(t) {
                  return String.fromCharCode.apply(null, t);
                }
                function i(t, e) {
                  'data' in t && ((e += t.start), (t = t.data));
                  var r = (t[e] << 8) | t[e + 1];
                  return 0 > r ? 65536 + r : r;
                }
                function a(t, e) {
                  'data' in t && ((e += t.start), (t = t.data));
                  var r = (t[e] << 24) | (t[e + 1] << 16) | (t[e + 2] << 8) | t[e + 3];
                  return 0 > r ? 4294967296 + r : r;
                }
                function s(t, e, r) {
                  'data' in t && ((e += t.start), (t = t.data)),
                    (t[e] = r >> 24),
                    (t[e + 1] = 255 & (r >> 16)),
                    (t[e + 2] = 255 & (r >> 8)),
                    (t[e + 3] = 255 & r);
                }
                function o(t, e) {
                  var r,
                    i,
                    s,
                    l = [];
                  if (!e.length) return l;
                  'data' in t
                    ? ((r = t.data), (i = t.start), (s = t.end))
                    : ((i = 0), (s = (r = t).byteLength));
                  for (var u = i; u < s; ) {
                    var c = a(r, u),
                      d = 1 < c ? u + c : s;
                    if (n(r.subarray(u + 4, u + 8)) === e[0])
                      if (1 === e.length) l.push({ data: r, start: u + 8, end: d });
                      else {
                        var f = o({ data: r, start: u + 8, end: d }, e.slice(1));
                        f.length && y.apply(l, f);
                      }
                    u = d;
                  }
                  return l;
                }
                function l(t) {
                  var e = o(t, ['moov'])[0],
                    r = e ? e.end : null,
                    n = o(t, ['sidx']);
                  if (!n || !n[0]) return null;
                  var s = [],
                    l = n[0],
                    u = l.data[0],
                    c = 0 === u ? 8 : 16,
                    d = a(l, c);
                  (c += 4), (c += 0 === u ? 8 : 16), (c += 2);
                  var f = l.end + 0,
                    h = i(l, c);
                  c += 2;
                  for (var v = 0; v < h; v++) {
                    var g = c,
                      p = a(l, g);
                    g += 4;
                    var m = 2147483647 & p;
                    if (1 == (2147483648 & p) >>> 31)
                      return console.warn('SIDX has hierarchical references (not supported)'), null;
                    var y = a(l, g);
                    (g += 4),
                      s.push({
                        referenceSize: m,
                        subsegmentDuration: y,
                        info: { duration: y / d, start: f, end: f + m - 1 },
                      }),
                      (f += m),
                      (c = g += 4);
                  }
                  return {
                    earliestPresentationTime: 0,
                    timescale: d,
                    version: u,
                    referencesCount: h,
                    references: s,
                    moovEndOffset: r,
                  };
                }
                function u(t) {
                  for (var e = [], r = o(t, ['moov', 'trak']), i = 0; i < r.length; i++) {
                    var s = r[i],
                      l = o(s, ['tkhd'])[0];
                    if (l) {
                      var u = l.data[l.start],
                        c = 0 === u ? 12 : 20,
                        d = a(l, c),
                        f = o(s, ['mdia', 'mdhd'])[0];
                      if (f) {
                        var h = a(f, (c = 0 === (u = f.data[f.start]) ? 12 : 20)),
                          v = o(s, ['mdia', 'hdlr'])[0];
                        if (v) {
                          var g = n(v.data.subarray(v.start + 8, v.start + 12)),
                            p = {
                              soun: m.ElementaryStreamTypes.AUDIO,
                              vide: m.ElementaryStreamTypes.VIDEO,
                            }[g];
                          if (p) {
                            var y = o(s, ['mdia', 'minf', 'stbl', 'stsd'])[0],
                              b = void 0;
                            y && (b = n(y.data.subarray(y.start + 12, y.start + 16))),
                              (e[d] = { timescale: h, type: p }),
                              (e[p] = { timescale: h, id: d, codec: b });
                          }
                        }
                      }
                    }
                  }
                  return (
                    o(t, ['moov', 'mvex', 'trex']).forEach(function (t) {
                      var r = a(t, 4),
                        n = e[r];
                      n && (n.default = { duration: a(t, 12), flags: a(t, 20) });
                    }),
                    e
                  );
                }
                function c(t, e) {
                  return (
                    o(e, ['moof', 'traf']).reduce(function (e, r) {
                      var n = o(r, ['tfdt'])[0],
                        i = n.data[n.start],
                        s = o(r, ['tfhd']).reduce(function (e, r) {
                          var s = a(r, 4),
                            o = t[s];
                          if (o) {
                            var l = a(n, 4);
                            1 === i && ((l *= Math.pow(2, 32)), (l += a(n, 8)));
                            var u = l / (o.timescale || 9e4);
                            if (isFinite(u) && (null === e || u < e)) return u;
                          }
                          return e;
                        }, null);
                      return null !== s && isFinite(s) && (null === e || s < e) ? s : e;
                    }, null) || 0
                  );
                }
                function d(t, e) {
                  for (
                    var r = 0, n = 0, i = 0, s = o(t, ['moof', 'traf']), u = 0;
                    u < s.length;
                    u++
                  ) {
                    var c = s[u],
                      d = o(c, ['tfhd'])[0],
                      h = e[a(d, 4)];
                    if (h) {
                      var v = h.default,
                        g = a(d, 0) | (null == v ? void 0 : v.flags),
                        p = null == v ? void 0 : v.duration;
                      8 & g && (p = a(d, 2 & g ? 12 : 8));
                      for (var y = h.timescale || 9e4, b = o(c, ['trun']), E = 0; E < b.length; E++)
                        (r = p ? p * a(b[E], 4) : f(b[E])),
                          h.type === m.ElementaryStreamTypes.VIDEO
                            ? (n += r / y)
                            : h.type === m.ElementaryStreamTypes.AUDIO && (i += r / y);
                    }
                  }
                  if (0 === n && 0 === i) {
                    var T = l(t);
                    if (null != T && T.references)
                      return T.references.reduce(function (t, e) {
                        return t + e.info.duration || 0;
                      }, 0);
                  }
                  return n || i;
                }
                function f(t) {
                  var e = a(t, 0),
                    r = 8;
                  1 & e && (r += 4), 4 & e && (r += 4);
                  for (var n = 0, i = a(t, 4), s = 0; s < i; s++)
                    256 & e && ((n += a(t, r)), (r += 4)),
                      512 & e && (r += 4),
                      1024 & e && (r += 4),
                      2048 & e && (r += 4);
                  return n;
                }
                function h(t, e, r) {
                  o(e, ['moof', 'traf']).forEach(function (e) {
                    o(e, ['tfhd']).forEach(function (n) {
                      var i = a(n, 4),
                        l = t[i];
                      if (l) {
                        var u = l.timescale || 9e4;
                        o(e, ['tfdt']).forEach(function (t) {
                          var e = t.data[t.start],
                            n = a(t, 4);
                          if (0 === e) s(t, 4, n - r * u);
                          else {
                            (n *= Math.pow(2, 32)),
                              (n += a(t, 8)),
                              (n -= r * u),
                              (n = Math.max(n, 0));
                            var i = Math.floor(n / 4294967296),
                              o = Math.floor(n % 4294967296);
                            s(t, 4, i), s(t, 8, o);
                          }
                        });
                      }
                    });
                  });
                }
                function v(t) {
                  var e = { valid: null, remainder: null },
                    r = o(t, ['moof']);
                  if (!r) return e;
                  if (2 > r.length) return (e.remainder = t), e;
                  var n = r[r.length - 1];
                  return (
                    (e.valid = Object(p.sliceUint8)(t, 0, n.start - 8)),
                    (e.remainder = Object(p.sliceUint8)(t, n.start - 8)),
                    e
                  );
                }
                function g(t, e) {
                  var r = new Uint8Array(t.length + e.length);
                  return r.set(t), r.set(e, t.length), r;
                }
                r.r(e),
                  r.d(e, 'bin2str', function () {
                    return n;
                  }),
                  r.d(e, 'readUint16', function () {
                    return i;
                  }),
                  r.d(e, 'readUint32', function () {
                    return a;
                  }),
                  r.d(e, 'writeUint32', function () {
                    return s;
                  }),
                  r.d(e, 'findBox', function () {
                    return o;
                  }),
                  r.d(e, 'parseSegmentIndex', function () {
                    return l;
                  }),
                  r.d(e, 'parseInitSegment', function () {
                    return u;
                  }),
                  r.d(e, 'getStartDTS', function () {
                    return c;
                  }),
                  r.d(e, 'getDuration', function () {
                    return d;
                  }),
                  r.d(e, 'computeRawDurationFromSamples', function () {
                    return f;
                  }),
                  r.d(e, 'offsetStartDTS', function () {
                    return h;
                  }),
                  r.d(e, 'segmentValidRange', function () {
                    return v;
                  }),
                  r.d(e, 'appendUint8Array', function () {
                    return g;
                  });
                var p = r('./src/utils/typed-array.ts'),
                  m = r('./src/loader/fragment.ts'),
                  y = (Math.pow(2, 32), [].push);
              },
              './src/utils/texttrack-utils.ts': function (t, e, r) {
                'use strict';
                function n(t, e) {
                  var r;
                  try {
                    r = new Event('addtrack');
                  } catch (t) {
                    (r = document.createEvent('Event')).initEvent('addtrack', !1, !1);
                  }
                  (r.track = t), e.dispatchEvent(r);
                }
                function i(t, e) {
                  var r = t.mode;
                  if (('disabled' === r && (t.mode = 'hidden'), t.cues && !t.cues.getCueById(e.id)))
                    try {
                      if ((t.addCue(e), !t.cues.getCueById(e.id)))
                        throw new Error('addCue is failed for: ' + e);
                    } catch (r) {
                      l.logger.debug('[texttrack-utils]: ' + r);
                      var n = new self.TextTrackCue(e.startTime, e.endTime, e.text);
                      (n.id = e.id), t.addCue(n);
                    }
                  'disabled' === r && (t.mode = r);
                }
                function a(t) {
                  var e = t.mode;
                  if (('disabled' === e && (t.mode = 'hidden'), t.cues))
                    for (var r = t.cues.length; r--; ) t.removeCue(t.cues[r]);
                  'disabled' === e && (t.mode = e);
                }
                function s(t, e, r) {
                  var n = t.mode;
                  if (('disabled' === n && (t.mode = 'hidden'), t.cues && 0 < t.cues.length))
                    for (var i = o(t.cues, e, r), a = 0; a < i.length; a++) t.removeCue(i[a]);
                  'disabled' === n && (t.mode = n);
                }
                function o(t, e, r) {
                  var n = [],
                    i = (function (t, e) {
                      if (e < t[0].startTime) return 0;
                      var r = t.length - 1;
                      if (e > t[r].endTime) return -1;
                      for (var n, i = 0, a = r; i <= a; )
                        if (e < t[(n = Math.floor((a + i) / 2))].startTime) a = n - 1;
                        else {
                          if (!(e > t[n].startTime && i < r)) return n;
                          i = n + 1;
                        }
                      return t[i].startTime - e < e - t[a].startTime ? i : a;
                    })(t, e);
                  if (-1 < i)
                    for (var a, s = i, o = t.length; s < o; s++)
                      if ((a = t[s]).startTime >= e && a.endTime <= r) n.push(a);
                      else if (a.startTime > r) return n;
                  return n;
                }
                r.r(e),
                  r.d(e, 'sendAddTrackEvent', function () {
                    return n;
                  }),
                  r.d(e, 'addCueToTrack', function () {
                    return i;
                  }),
                  r.d(e, 'clearCurrentCues', function () {
                    return a;
                  }),
                  r.d(e, 'removeCuesInRange', function () {
                    return s;
                  }),
                  r.d(e, 'getCuesInRange', function () {
                    return o;
                  });
                var l = r('./src/utils/logger.ts');
              },
              './src/utils/time-ranges.ts': function (t, e, r) {
                'use strict';
                r.r(e),
                  (e.default = {
                    toString: function (t) {
                      for (var e = '', r = t.length, n = 0; n < r; n++)
                        e += '[' + t.start(n).toFixed(3) + ',' + t.end(n).toFixed(3) + ']';
                      return e;
                    },
                  });
              },
              './src/utils/timescale-conversion.ts': function (t, e, r) {
                'use strict';
                function n(t, e, r, n) {
                  void 0 === r && (r = 1), void 0 === n && (n = !1);
                  var i = t * e * r;
                  return n ? Math.round(i) : i;
                }
                function i(t, e, r, i) {
                  return void 0 === r && (r = 1), void 0 === i && (i = !1), n(t, e, 1 / r, i);
                }
                function a(t, e) {
                  return void 0 === e && (e = !1), n(t, 1e3, 1 / 9e4, e);
                }
                function s(t, e) {
                  return void 0 === e && (e = 1), n(t, 9e4, 1 / e);
                }
                r.r(e),
                  r.d(e, 'toTimescaleFromBase', function () {
                    return n;
                  }),
                  r.d(e, 'toTimescaleFromScale', function () {
                    return i;
                  }),
                  r.d(e, 'toMsFromMpegTsClock', function () {
                    return a;
                  }),
                  r.d(e, 'toMpegTsClockFromTimescale', function () {
                    return s;
                  });
              },
              './src/utils/typed-array.ts': function (t, e, r) {
                'use strict';
                function n(t, e, r) {
                  return Uint8Array.prototype.slice
                    ? t.slice(e, r)
                    : new Uint8Array(Array.prototype.slice.call(t, e, r));
                }
                r.r(e),
                  r.d(e, 'sliceUint8', function () {
                    return n;
                  });
              },
              './src/utils/xhr-loader.ts': function (t, e, r) {
                'use strict';
                r.r(e);
                var n = r('./src/utils/logger.ts'),
                  i = r('./src/loader/load-stats.ts'),
                  a = /^age:\s*[\d.]+\s*$/m,
                  s = (function () {
                    function t(t) {
                      (this.xhrSetup = void 0),
                        (this.requestTimeout = void 0),
                        (this.retryTimeout = void 0),
                        (this.retryDelay = void 0),
                        (this.config = null),
                        (this.callbacks = null),
                        (this.context = void 0),
                        (this.loader = null),
                        (this.stats = void 0),
                        (this.xhrSetup = t ? t.xhrSetup : null),
                        (this.stats = new i.LoadStats()),
                        (this.retryDelay = 0);
                    }
                    var e = t.prototype;
                    return (
                      (e.destroy = function () {
                        (this.callbacks = null),
                          this.abortInternal(),
                          (this.loader = null),
                          (this.config = null);
                      }),
                      (e.abortInternal = function () {
                        var t = this.loader;
                        self.clearTimeout(this.requestTimeout),
                          self.clearTimeout(this.retryTimeout),
                          t &&
                            ((t.onreadystatechange = null),
                            (t.onprogress = null),
                            4 !== t.readyState && ((this.stats.aborted = !0), t.abort()));
                      }),
                      (e.abort = function () {
                        var t;
                        this.abortInternal(),
                          null !== (t = this.callbacks) &&
                            void 0 !== t &&
                            t.onAbort &&
                            this.callbacks.onAbort(this.stats, this.context, this.loader);
                      }),
                      (e.load = function (t, e, r) {
                        if (this.stats.loading.start)
                          throw new Error('Loader can only be used once.');
                        (this.stats.loading.start = self.performance.now()),
                          (this.context = t),
                          (this.config = e),
                          (this.callbacks = r),
                          (this.retryDelay = e.retryDelay),
                          this.loadInternal();
                      }),
                      (e.loadInternal = function () {
                        var t = this.config;
                        var e = this.context;
                        if (t) {
                          console.warn('loadInternal');
                          var r = (this.loader = new self.XMLHttpRequest());
                          var n = this.stats;
                          n.loading.first = 0;
                          n.loaded = 0;
                          var i = this.xhrSetup;
                          try {
                            if (i) {
                              try {
                                i(r, e.url);
                              } catch (t) {
                                r.open('GET', e.url, !0), i(r, e.url);
                              }
                            }
                            if (!r.readyState) {
                              r.open('GET', e.url, !0);
                            }

                            var a = this.context.headers;
                            if (a) {
                              for (var s in a) {
                                r.setRequestHeader(s, a[s]);
                              }
                            }
                          } catch (t) {
                            return void this.callbacks.onError(
                              { code: r.status, text: t.message },
                              e,
                              r
                            );
                          }
                          if (e.rangeEnd) {
                            r.setRequestHeader(
                              'Range',
                              'bytes=' + e.rangeStart + '-' + (e.rangeEnd - 1)
                            );
                          }
                          r.onreadystatechange = this.readystatechange.bind(this);
                          r.onprogress = this.loadprogress.bind(this);
                          r.responseType = e.responseType;
                          self.clearTimeout(this.requestTimeout);
                          this.requestTimeout = self.setTimeout(
                            this.loadtimeout.bind(this),
                            t.timeout
                          );
                          r.send();
                        }
                      }),
                      (e.readystatechange = function () {
                        var t = this.context,
                          e = this.loader,
                          r = this.stats;
                        if (t && e) {
                          var i = e.readyState,
                            a = this.config;
                          if (!r.aborted && 2 <= i)
                            if (
                              (self.clearTimeout(this.requestTimeout),
                              0 === r.loading.first &&
                                (r.loading.first = Math.max(
                                  self.performance.now(),
                                  r.loading.start
                                )),
                              4 === i)
                            ) {
                              (e.onreadystatechange = null), (e.onprogress = null);
                              var s = e.status;
                              if (200 <= s && 300 > s) {
                                var o, l;
                                if (
                                  ((r.loading.end = Math.max(
                                    self.performance.now(),
                                    r.loading.first
                                  )),
                                  (l =
                                    'arraybuffer' === t.responseType
                                      ? (o = e.response).byteLength
                                      : (o = e.responseText).length),
                                  (r.loaded = r.total = l),
                                  !this.callbacks)
                                )
                                  return;
                                var u = this.callbacks.onProgress;
                                if ((u && u(r, t, o, e), !this.callbacks)) return;
                                var c = { url: e.responseURL, data: o };
                                this.callbacks.onSuccess(c, r, t, e);
                              } else
                                r.retry >= a.maxRetry || (400 <= s && 499 > s)
                                  ? (n.logger.error(s + ' while loading ' + t.url),
                                    this.callbacks.onError({ code: s, text: e.statusText }, t, e))
                                  : (n.logger.warn(
                                      s +
                                        ' while loading ' +
                                        t.url +
                                        ', retrying in ' +
                                        this.retryDelay +
                                        '...'
                                    ),
                                    this.abortInternal(),
                                    (this.loader = null),
                                    self.clearTimeout(this.retryTimeout),
                                    (this.retryTimeout = self.setTimeout(
                                      this.loadInternal.bind(this),
                                      this.retryDelay
                                    )),
                                    (this.retryDelay = Math.min(
                                      2 * this.retryDelay,
                                      a.maxRetryDelay
                                    )),
                                    r.retry++);
                            } else
                              self.clearTimeout(this.requestTimeout),
                                (this.requestTimeout = self.setTimeout(
                                  this.loadtimeout.bind(this),
                                  a.timeout
                                ));
                        }
                      }),
                      (e.loadtimeout = function () {
                        n.logger.warn('timeout while loading ' + this.context.url);
                        var t = this.callbacks;
                        t &&
                          (this.abortInternal(),
                          t.onTimeout(this.stats, this.context, this.loader));
                      }),
                      (e.loadprogress = function (t) {
                        var e = this.stats;
                        (e.loaded = t.loaded), t.lengthComputable && (e.total = t.total);
                      }),
                      (e.getCacheAge = function () {
                        var t = null;
                        if (this.loader && a.test(this.loader.getAllResponseHeaders())) {
                          var e = this.loader.getResponseHeader('age');
                          t = e ? parseFloat(e) : null;
                        }
                        return t;
                      }),
                      t
                    );
                  })();
                e.default = s;
              },
            }).default;
          }),
          (t.exports = e()));
      },
      26: (t) => {
        !(function (e, r) {
          function n(t, e) {
            return (typeof e)[0] == t;
          }
          function i(t, r) {
            return (
              ((r = function s(o, l, u, c, d, f) {
                if (((c = s.q), o != n))
                  return i(function (t, e) {
                    c.push({ p: this, r: t, j: e, 1: o, 0: l });
                  });
                if (u && n(e, u) | n('o', u))
                  try {
                    d = u.then;
                  } catch (t) {
                    (l = 0), (u = t);
                  }
                if (n(e, d)) {
                  var h = function (t) {
                    return function (e) {
                      d && ((d = 0), s(n, t, e));
                    };
                  };
                  try {
                    d.call(u, h(1), (l = h(0)));
                  } catch (t) {
                    l(t);
                  }
                } else
                  for (
                    r = function (r, s) {
                      return n(e, (r = l ? r : s))
                        ? i(function (t, e) {
                            a(this, t, e, u, r);
                          })
                        : t;
                    },
                      f = 0;
                    f < c.length;

                  )
                    (d = c[f++]), n(e, (o = d[l])) ? a(d.p, d.r, d.j, u, o) : (l ? d.r : d.j)(u);
              }).q = []),
              t.call(
                (t = {
                  then: function (t, e) {
                    return r(t, e);
                  },
                  catch: function (t) {
                    return r(0, t);
                  },
                }),
                function (t) {
                  r(n, 1, t);
                },
                function (t) {
                  r(n, 0, t);
                }
              ),
              t
            );
          }
          function a(t, r, i, a, s) {
            var o = function () {
              try {
                (a = s(a)),
                  (s = a && n('o', a) | n(e, a) && a.then),
                  n(e, s) ? (a == t ? i(TypeError()) : s.call(a, r, i)) : r(a);
              } catch (t) {
                i(t);
              }
            };
            window.setImmediate ? window.setImmediate(o) : setTimeout(o, 0);
          }
          function s(t) {
            return i(function (e) {
              e(t);
            });
          }
          window.Promise
            ? (t.exports = window.Promise)
            : ((t.exports = i),
              (i.resolve = s),
              (i.reject = function (t) {
                return i(function (e, r) {
                  r(t);
                });
              }),
              (i.all = function (t) {
                return i(function (e, r, n, i) {
                  (i = []),
                    (n = t.length || e(i)),
                    t.map(function (t, a) {
                      s(t).then(function (t) {
                        (i[a] = t), --n || e(i);
                      }, r);
                    });
                });
              }),
              (i.race = function (t) {
                return i(function (e, r) {
                  t.map(function (t) {
                    s(t).then(e, r);
                  });
                });
              }));
        })('f');
      },
    },
    __webpack_module_cache__ = {};
  function __webpack_require__(t) {
    var e = __webpack_module_cache__[t];
    if (void 0 !== e) return e.exports;
    var r = (__webpack_module_cache__[t] = { exports: {} });
    return __webpack_modules__[t].call(r.exports, r, r.exports, __webpack_require__), r.exports;
  }
  (__webpack_require__.n = (t) => {
    var e = t && t.__esModule ? () => t.default : () => t;
    return __webpack_require__.d(e, { a: e }), e;
  }),
    (__webpack_require__.d = (t, e) => {
      for (var r in e)
        __webpack_require__.o(e, r) &&
          !__webpack_require__.o(t, r) &&
          Object.defineProperty(t, r, { enumerable: !0, get: e[r] });
    }),
    (__webpack_require__.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e)),
    (__webpack_require__.r = (t) => {
      'undefined' != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }),
        Object.defineProperty(t, '__esModule', { value: !0 });
    });
  var __webpack_exports__ = {};
  (() => {
    'use strict';
    __webpack_require__.r(__webpack_exports__);
    var t = __webpack_require__(1),
      e = __webpack_require__(345);
    t.default.define('engines/hls_video.js', e.default);
  })();
})();
